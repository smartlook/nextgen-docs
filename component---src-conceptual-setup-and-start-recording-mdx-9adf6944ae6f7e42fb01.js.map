{"version":3,"sources":["webpack:///../src/conceptual/setup-and-start-recording.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","kind","snippets","android","java","kotlin","ios","swift","objc","react","js","ionic","typescript","cordova","xamarin","csharp","unity","unreal","cocos","cpp","lua","flutter","dart","to","visibleOn","isMDXComponent"],"mappings":"2gBAQO,IAAMA,EAAe,Q,8NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,0BADR,2BAGA,qBAAG,kBAAIC,WAAW,KAAf,qFACH,0KAAyJ,mBAAGA,WAAW,KAAQ,CAC3K,KAAQ,gDAD6I,qBAAzJ,KAGA,0HACA,YAAC,IAAD,CAAOC,KAAK,UAAUF,QAAQ,SAC5B,YAAC,IAAD,CAAWG,SAAU,CACnBC,SAAO,GACLC,KAAM,4KAMNC,OAAQ,oCAPH,+CAcPC,IAAK,CACHC,MAAO,sQAWPC,KAAM,sQAWRC,MAAO,CACLC,GAAI,oJAMNC,MAAO,CACLD,GAAI,6BAGJE,WAAY,8BAIdC,QAAS,CACPH,GAAI,+BAGJE,WAAY,gCAIdE,QAAS,CACPC,OAAQ,wBAIVC,MAAO,CACLD,OAAQ,sBAIVE,OAAQ,CACNF,OAAQ,uBAIVG,MAAO,CACLC,IAAK,sBAGLC,IAAK,oBAIPC,QAAS,CACPC,KAAM,mEAIPvB,QAAQ,eAEb,+JACA,YAAC,IAAD,CAAOE,KAAK,YAAYF,QAAQ,SAAhC,8gBACygB,YAAC,IAAD,CAAMwB,GAAG,0DAA0DxB,QAAQ,QAA3E,iBADzgB,KAGA,YAAC,IAAD,CAAOE,KAAK,OAAOuB,UAAU,MAAMzB,QAAQ,SAA3C,sSAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,kNACA,6JACA,YAAC,IAAD,CAAMwB,GAAG,sCAAsCxB,QAAQ,QAAvD,iBApHK,U,4NAyHTH,EAAW6B,gBAAiB","file":"component---src-conceptual-setup-and-start-recording-mdx-9adf6944ae6f7e42fb01.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nextgen-docs/nextgen-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Alert, Link, MD } from \"components\";\nimport { usePlatforms } from 'hooks';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"setup--start-recording\"\n    }}>{`Setup & Start Recording`}</h1>\n    <p><em parentName=\"p\">{`This section deals with how to setup Smartlook SDK and start recording your app.`}</em></p>\n    <p>{`To start recording, just put the following code into your application. Once you run your app on a device or in a simulator, recording will appear `}<a parentName=\"p\" {...{\n        \"href\": \"https://app.smartlook.com/settings/projects\"\n      }}>{`in your dashboard`}</a>{`.`}</p>\n    <p>{`In order to function properly, the setup should happen as soon as possible in the app life cycle:`}</p>\n    <Alert kind=\"example\" mdxType=\"Alert\">\n      <CodeBlock snippets={{\n        android: {\n          java: `\nSmartlook.setupAndStartRecording(String YOUR_API_KEY)\n \n// TODO: notes when using this other method \nSmartlook.setup(String YOUR_API_KEY, Activity activity)\n      `,\n          kotlin: `\nandroid kotlin snippet\n      `,\n          kotlin: `\nandroid kotlin snippet\n      `\n        },\n        ios: {\n          swift: `\ninclude Smartlook\n \n...\n \nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n \n   Smartlook.setup(key: \"YOUR_API_KEY\")\n   Smartlook.startRecording()\n}\n      `,\n          objc: `\n#include Smartlook\n \n...\n \nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n \n   Smartlook.setup(key: \"YOUR_API_KEY\")\n   Smartlook.startRecording()\n}      `\n        },\n        react: {\n          js: `\n// Smartlook initialization\nvar Smartlook = require(\"smartlook-react-native-wrapper\"); \nSmartlook.setupAndStartRecording(\"API_KEY\");\n      `\n        },\n        ionic: {\n          js: `\nIonic javascript\n      `,\n          typescript: `\nIonic typescript\n      `\n        },\n        cordova: {\n          js: `\nCordova javascript\n      `,\n          typescript: `\nCordova typescript\n      `\n        },\n        xamarin: {\n          csharp: `\nXamarin C#\n      `\n        },\n        unity: {\n          csharp: `\nUnity C#\n      `\n        },\n        unreal: {\n          csharp: `\nUnreal C#\n      `\n        },\n        cocos: {\n          cpp: `\nCocos C++\n      `,\n          lua: `\nCocos lua\n   `\n        },\n        flutter: {\n          dart: `\n      Smartlook.setupAndStartRecording('YOUR_API_KEY');\n   `\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <p>{`This is basically all you need to record your sessions. All other events in the app life cycle are handled by Smartlook automatically.`}</p>\n    <Alert kind=\"important\" mdxType=\"Alert\">\n  It may take several minutes before the recordings appear in the Dashboard. In the default setup, recordings are not uploaded when the device is on a mobile network. In order to see the recordings immediately, make sure the device is on WiFi, or that mobile uploads are enabled in [your project dashboard](https://app.smartlook.com/settings/projects). The recording is not streamed, it is uploaded in chunks and then processed on the server. To understand when your recordings will be availabe in the project dashboard, see <Link to=\"/conceptual/when-i-will-see-the-recordings-in-dashboard\" mdxType=\"Link\">this document</Link>.\n    </Alert>\n    <Alert kind=\"note\" visibleOn=\"ios\" mdxType=\"Alert\">\n  When debugging your app with Smartlook, you will encounter a Main Thread Checker warning which might be accompanied by a short app freeze during the app start. The freeze does not happen in production builds. For details, see this [technical note](/cookbook/ios-main-thread-check-warning\").\n    </Alert>\n    <h2 {...{\n      \"id\": \"setup-options\"\n    }}>{`Setup Options`}</h2>\n    <p>{`Smartlook recording can be customized by several parameters. Some of the recording customization options can be set by dedicated methods, some others can be also set as startup options.`}</p>\n    <p>{`Not all options are available on all platforms. For a comprehensive list of all the setup options and related details, consult  our `}</p>\n    <Link to=\"/api_reference/#setup-configuration\" mdxType=\"Link\">API reference</Link>.\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}