(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"7qIa":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return b})),t.d(n,"default",(function(){return m}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk"),t("mXGw");var o=t("/FXl"),r=t("TjRS"),i=t("+8zC"),a=(t("NRsk"),t("II6R")),c=t.n(a),s=t("jN6t"),d=t.n(s);t("aD51");function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/cookbook/secure_custom_keyboard.mdx"}});var u={_frontmatter:b},p=r.a;function m(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(o.b)(p,l({},u,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"secure-custom-keyboard"},"Secure custom keyboard"),Object(o.b)("p",null,"Some applications use non-native keyboards, typically for entering pin codes, etc.\nThis can lead to recording of sensitive data as we are gonna demonstrate by simple example."),Object(o.b)("img",{src:c.a}),Object(o.b)("p",null,"For this screen we need to change rendering mode to ",Object(o.b)("inlineCode",{parentName:"p"},"RenderingMode.NO_RENDERING"),":"),Object(o.b)(i.b,{snippets:{java:"\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n"},mdxType:"Code"}),Object(o.b)("p",null,"By doing this we will ensure the SDK will not record the pin when the user enters it into the application. The visual clues might be:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Number buttons have a hover effect on them."),Object(o.b)("li",{parentName:"ul"},"Numbers might be visible for a small period of time after they are entered.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Setting rendering mode is not enough!")," SDK automatically tracks touch events, so even with blank video, we can clearly see where the user is touching on the recording."),Object(o.b)("img",{src:d.a}),Object(o.b)(i.f,{kind:"note",mdxType:"TextBlock"},"\nSDK does not record touches on native keyboard, so there is no risk of leaking any sensitive data this way.\n"),Object(o.b)("p",null,"Automatic touch detection can be disabled by setting event tracking mode to ",Object(o.b)("inlineCode",{parentName:"p"},"EventTrackingMode.IGNORE_USER_INTERACTION"),":"),Object(o.b)(i.b,{snippets:{java:"\nSmartlook.setEventTrackingMode(EventTrackingMode.IGNORE_USER_INTERACTION);\n",kotlin:"\nSmartlook.setEventTrackingMode(EventTrackingMode.IGNORE_USER_INTERACTION);\n"},mdxType:"Code"}),Object(o.b)("p",null,"After applying these two steps SDK will not record any sensitive data on this “pin” screen."),Object(o.b)("p",null,"When your application is leaving this screen just set rendering mode and event tracking mode, back to your preferred values:"),Object(o.b)(i.b,{snippets:{java:"\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\nSmartlook.setEventTrackingMode(EventTrackingMode.FULL_TRACKING);\n",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\nSmartlook.setEventTrackingMode(EventTrackingMode.FULL_TRACKING);\n"},mdxType:"Code"}))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/cookbook/secure_custom_keyboard.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-cookbook-secure-custom-keyboard-mdx-82a7752bf38bb3732136.js.map