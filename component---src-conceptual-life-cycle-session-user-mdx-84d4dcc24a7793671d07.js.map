{"version":3,"sources":["webpack:///../src/conceptual/life-cycle-session-user.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","snippets","android","java","javascript","c","ios","swift","isMDXComponent"],"mappings":"ygBAQO,IAAMA,EAAe,Q,4NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,cADR,cAGA,qBAAG,kBAAIC,WAAW,KAAf,2IACH,6XACA,iBAAQ,CACN,GAAM,WADR,WAGA,8EACA,saACA,iIACA,iBAAQ,CACN,GAAM,QADR,QAGA,uFACA,wFACA,wIACA,yEACA,YAAC,IAAD,CAAWC,SAAU,CACnBC,QAAS,CACPC,KAAM,yXAMNC,WAAY,uBAGZC,EAAG,uBAILC,IAAK,CACHC,MAAO,4KAKP,gDAIDR,QAAQ,cA/CN,wDAmDL,8MACA,oQACA,sVACA,iBAAQ,CACN,GAAM,0CADR,0CAGA,qLACA,gIACA,yEACA,uBAAK,sBAAMC,WAAW,OAAU,IAA3B,+RASL,wTACA,yEACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,8CAEL,+ZACA,iBAAQ,CACN,GAAM,4CADR,4CAGA,8MACA,4LACA,yEACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,mHAKL,4ZACA,iBAAQ,CACN,GAAM,2BADR,+BAGA,qBAAG,kBAAIA,WAAW,KAAf,iM,0NAKPJ,EAAWY,gBAAiB","file":"component---src-conceptual-life-cycle-session-user-mdx-84d4dcc24a7793671d07.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nextgen-docs/nextgen-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBlock } from \"components/CodeBlock\";\nimport { TextBlock } from \"components/TextBlock\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"life-cycle\"\n    }}>{`Life Cycle`}</h1>\n    <p><em parentName=\"p\">{`This section covers the way Smartlook automatically follows app lifecycle, and introduces the concept of recording sessions and users.`}</em></p>\n    <p>{`Apart from the initial Smartlook setup when a new instance of an app starts, Smartlook follows the life-cycle of the app automatically. When the app is suspended to the background, recording is paused automatically. When the app resumes to the frontend again, so resumes the recording. There is no need to call  API methods to achieve this basic behaviour.`}</p>\n    <h2 {...{\n      \"id\": \"session\"\n    }}>{`Session`}</h2>\n    <p>{`Sessions roughly correspond to individual app “runs”.`}</p>\n    <p>{`This does not mean, however, that each interval when the app is on screen is always recorded as a separate session. When an app is suspended to the background just for a short period of time (e.g., it is interrupted by an incoming call, notification), the original session continues when the app is resumed. When the app is closed for several minutes, a new session starts on the next app opening.`}</p>\n    <p>{`To change this default behaviour, an API method that resets the session must be called when appropriate.`}</p>\n    <h2 {...{\n      \"id\": \"user\"\n    }}>{`User`}</h2>\n    <p>{`Smartlook records user interactions with the app in sessions. `}</p>\n    <p>{`Every session has a single user. A user can have more sessions.`}</p>\n    <p>{`You can uniquely identify the user across your projects by associating an unique identifier with it by calling:`}</p>\n    <p>{`[CURRENT PLATFORM/LANGUAGE DEPENDAND CODE BLOCK]`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setGlobalEventProperties(JSONObject globalEventProperties, boolean immutable)\nSmartlook.setGlobalEventProperties(Bundle globalEventProperties, boolean immutable)\nSmartlook.setGlobalEventProperties(String globalEventPropertiesJsonString, boolean immutable)\nSmartlook.setGlobalEventProperty(@NotNull String key, @NotNull String value, boolean immutable)\n      `,\n        javascript: `\njs snippet\n      `,\n        c: `\nc snippet\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.startRecording() // start or resume paused recording\nSmartlook.stopRecording()  // pause recording\nSmartlook.isRecording()    // returns true/false\n      `,\n        \"objective-c\": `\nobjective-c snippet\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n```\nSmartlook.setUserIdentifier(“unique-user-id”)\n```\n    <p>{`This call associates the current user with the provided id. If a user with such an id already exists in one of your Smartlook projects, the session is automatically assigned to him.`}</p>\n    <p>{`Important note: when you call this method again, it does not create a new user, it changes the id of the user currently associated with the session. To “login” a new user, use the resetSession method described in the following section.`}</p>\n    <p>{`The app remembers the last user id and reuses it as the default user id with each new session (i.e., when the app is launched again on the device). This happens even when you do not identify the user explicitly. This  implicit user also ensures that the app runs on the same device are by default associated together.`}</p>\n    <h2 {...{\n      \"id\": \"explicit-control-of-sessions-and-users\"\n    }}>{`Explicit Control of Sessions and Users`}</h2>\n    <p>{`In some use cases, e.g. an app that will typically run on a tablet shared among colleagues, it makes sense to explicitly control the session and users flow.`}</p>\n    <p>{`When the app should always start with a fresh session (or user), use one of the following setup option:`}</p>\n    <p>{`[CURRENT PLATFORM/LANGUAGE DEPENDAND CODE BLOCK]`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// to start new session with the previous user\nSmartlook.setup(key: \"YOUR_API_KEY\", \n                options: [.startNewSession: true])\n \n// to start with new session and user\nSmartlook.setup(key: \"YOUR_API_KEY\", \n                options: [.startNewSessionAndUser: true])\n \n`}</code></pre>\n    <p>{`When it is desired to start a new session, or login a new user while the app is running, force it by using the following method. The resetUser attribute indicates, whether the user identity should be also reset, or whether the new session should retain the user from the current session.`}</p>\n    <p>{`[CURRENT PLATFORM/LANGUAGE DEPENDAND CODE BLOCK]`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Smartlook.resetSession(resetUser: Bool)\n`}</code></pre>\n    <p>{`Important note: It is not recommended to call this method when the app gets to background. Smartlook is busy with cleaning up when the app is going to background, and calling this method may create ephemeral sessions as an unwanted consequence. When you wish that sessions in no case continue with the next app launch, use the setup resetSession options when initializing Smartlook instead.`}</p>\n    <h2 {...{\n      \"id\": \"explicit-recording-stopping-and-starting\"\n    }}>{`Explicit Recording Stopping and Starting`}</h2>\n    <p>{`Under normal circumstances, once the recording first starts, Smartlook follows the app life-cycle automatically and it is not necessary to to stop and restart recording explicitly. `}</p>\n    <p>{`However, for the use-cases when you e.g., want recording just a small part of your application, it is still possible to stop and start recording programmatically. `}</p>\n    <p>{`[CURRENT PLATFORM/LANGUAGE DEPENDAND CODE BLOCK]`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Smartlook.stopRecording()\nSmartlook.startRecording()\n \nlet isSmartlookRecording = Smartlook.isRecording()\n`}</code></pre>\n    <p>{`Note: when you control recording programmatically, the time the user spent in the rest of the app is not visible on the timeline. Thus, for just a short recording interruption (e.g., when use fills in some form full of sensitive data), consider switching to some combination of rendering and event tracking modes. This way, you will see the time the user spent incognito on the timeline.`}</p>\n    <h2 {...{\n      \"id\": \"user-session-properties\"\n    }}>{`User (Session) Properties*✝`}</h2>\n    <p><em parentName=\"p\">{`This part of our API and both client and server implementation is currently a bit messy. Perhaps it is time to clean it up and define what we want when formulating the documentation?`}</em></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}