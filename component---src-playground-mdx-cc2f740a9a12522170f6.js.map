{"version":3,"sources":["webpack:///../src/playground.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","snippets","android","java","kotlin","ios","swift","objc","react","javasctipt","typescript","ionic","cordova","xamarin","csharp","unity","unreal","cocos","cpp","lua","visibleOn","platform","isMDXComponent"],"mappings":"6gBAQO,IAAMA,EAAe,Q,oMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAWC,SAAU,CACnBC,QAAS,CACPC,KAAM,iCAGNC,OAAQ,oCAIVC,IAAK,CACHC,MAAO,+BAGPC,KAAM,qCAIRC,MAAO,CACLC,WAAY,6BAGZC,WAAY,8BAIdC,MAAO,CACLF,WAAY,6BAGZC,WAAY,8BAIdE,QAAS,CACPH,WAAY,+BAGZC,WAAY,gCAIdG,QAAS,CACPC,OAAQ,wBAIVC,MAAO,CACLD,OAAQ,sBAIVE,OAAQ,CACNF,OAAQ,uBAIVG,MAAO,CACLC,IAAK,sBAGLC,IAAK,qBAINnB,QAAQ,cACX,YAAC,IAAD,CAAWoB,UAAU,sBAAsBpB,QAAQ,cACpD,SAAAqB,GACK,OAAO,2GAEU,IACH,QAAbA,GAAsB,kEACvB,wD,kMAQRxB,EAAWyB,gBAAiB","file":"component---src-playground-mdx-cc2f740a9a12522170f6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nextgen-docs/nextgen-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBlock } from \"components/CodeBlock\";\nimport { TextBlock } from \"components/TextBlock\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <CodeBlock snippets={{\n      android: {\n        java: `\nandroid java snippet\n      `,\n        kotlin: `\nandroid kotlin snippet\n      `\n      },\n      ios: {\n        swift: `\niOS swift snippet \n      `,\n        objc: `\niOS objective-c snippet\n      `\n      },\n      react: {\n        javasctipt: `\nreact javascript\n      `,\n        typescript: `\nreact typescript\n      `\n      },\n      ionic: {\n        javasctipt: `\nIonic javascript\n      `,\n        typescript: `\nIonic typescript\n      `\n      },\n      cordova: {\n        javasctipt: `\nCordova javascript\n      `,\n        typescript: `\nCordova typescript\n      `\n      },\n      xamarin: {\n        csharp: `\nXamarin C#\n      `\n      },\n      unity: {\n        csharp: `\nUnity C#\n      `\n      },\n      unreal: {\n        csharp: `\nUnreal C#\n      `\n      },\n      cocos: {\n        cpp: `\nCocos C++\n      `,\n        lua: `\nCocos lua\n   `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"ios,android,cordova\" mdxType=\"TextBlock\">\n  {platform => {\n        return <span>\n        example block that is rendered only on defined platforms in the\n        'visibleOn' prop{\" \"}\n        {platform === \"ios\" && \"also you have access to the current platofrm, so somehow use it\"}\n        <h2>and it supports HTML</h2>\n      </span>;\n      }}\n    </TextBlock>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}