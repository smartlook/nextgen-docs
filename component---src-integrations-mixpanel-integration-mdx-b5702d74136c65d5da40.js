(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{"89j2":function(e,n,i){"use strict";i.r(n),i.d(n,"_frontmatter",(function(){return l})),i.d(n,"default",(function(){return p}));var t=i("Fcif"),o=i("+I+c"),r=(i("mXGw"),i("/FXl")),a=i("TjRS"),s=i("+8zC"),l=(i("aD51"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/integrations/mixpanel-integration.mdx"}});var d={_frontmatter:l},c=a.a;function p(e){var n=e.components,i=Object(o.a)(e,["components"]);return Object(r.b)(c,Object(t.a)({},d,i,{components:n,mdxType:"MDXLayout"}),Object(r.b)(s.g,{kind:"title",mdxType:"TextBlock"},"Mixpanel integration"),Object(r.b)("h2",{id:"manual-integration"},"Manual integration"),Object(r.b)("p",null,"Smartlook can be easily integrated into Mixpanel using ",Object(r.b)("inlineCode",{parentName:"p"},"IntegrationListener"),":"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:'\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        JSONObject eventProperties = new JSONObject();\n        try {\n            eventProperties.put("Session url", dashboardSessionUrl);\n        } catch (JSONException exception) {\n        }\n        mixpanel.track("Smartlook session URL", eventProperties);\n    }\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        mixpanel.getPeople().set("Smartlook visitor URL", dashboardVisitorUrl);\n    }\n});\n      ',kotlin:'\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        val eventProperties = JSONObject()\n        try {\n            eventProperties.put("Session url", dashboardSessionUrl)\n        } catch (JSONException exception) {\n        }\n        mixpanel.track("Smartlook session URL", eventProperties)\n    }\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        mixpanel.getPeople().set("Smartlook visitor URL", dashboardVisitorUrl)\n    }\n})\n      '},cocos:{java:'\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        JSONObject eventProperties = new JSONObject();\n        try {\n            eventProperties.put("Session url", dashboardSessionUrl);\n        } catch (JSONException exception) {\n        }\n        mixpanel.track("Smartlook session URL", eventProperties);\n    }\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        mixpanel.getPeople().set("Smartlook visitor URL", dashboardVisitorUrl);\n    }\n});\n      ',kotlin:'\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        val eventProperties = JSONObject()\n        try {\n            eventProperties.put("Session url", dashboardSessionUrl)\n        } catch (JSONException exception) {\n        }\n        mixpanel.track("Smartlook session URL", eventProperties)\n    }\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        mixpanel.getPeople().set("Smartlook visitor URL", dashboardVisitorUrl)\n    }\n})\n      '},cordova:{javascript:'\nSmartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) { \n    mixpanel.track(\n    "Smartlook session URL",\n    {"session_url": dashboardSessionUrl});\n);\n  },\n  onVisitorReady: function (dashboardVisitorUrl) { \n    mixpanel.people.set({ "smartlook_visitor_url": dashboardVisitorUrl });\n\n    // identify must be called along with every instance of people.set\n    mixpanel.identify("sample_identifier");\n  }\n});\n      '},ionic:{typescript:'\nsmartlook.registerIntegrationListener(new SmartlookIntegrationListener(\n  function (dashboardSessionUrl) { \n    mixpanel.track(\n    "Smartlook session URL",\n    {"session_url": dashboardSessionUrl})\n  },\n  function (dashboardVisitorUrl) { \n    mixpanel.people.set({ "smartlook_visitor_url": dashboardVisitorUrl })\n\n    // identify must be called along with every instance of people.set\n    mixpanel.identify("sample_identifier")\n  }\n));\n      '},ios:{swift:"\npublic class let dashboardSessionURLChanged: NSNotification.Name\npublic class let dashboardVisitorURLChanged: NSNotification.Name\n      ","objective-c":"\nNSNotificationName const SLDashboardSessionURLChangedNotification;\nNSNotificationName const SLDashboardVisitorURLChangedNotification;\n      "},flutter:{dart:"\nclass CustomIntegrationListener implements IntegrationListener {\n  void onSessionReady(String dashboardSessionUrl) {\n    //todo\n  }\n\n\n  void onVisitorReady(String dashboardVisitorUrl) {\n    //todo\n  }\n}\n\n\nSmartlook.registerIntegrationListener(new CustomIntegrationListener());\n      "},unity:{csharp:'\npublic class IntegrationListener : SmartlookUnity.IntegrationListener\n{\n    public override void onSessionReady(string dashboardSessionUrl)\n    {\n        var props = new Value();\n        props["Session url"] = dashboardSessionUrl;\n\n        Mixpanel.Track("Smartlook session URL", props);\n    }\n\n\n    public override void onVisitorReady(string dashboardVisitorUrl)\n    {\n        // mixpanel identify: must be called before user profile properties can be set\n        Mixpanel.Identify("sample_identifier");\n\n        Mixpanel.People.Set("Smartlook visitor URL", dashboardVisitorUrl);\n    }\n}\n\n\nSmartlookUnity.Smartlook.RegisterIntegrationListener(new IntegrationListener());\n'},react:{javascript:'\nSmartlook.registerIntegrationListener(\n    (visitor) => {\n        mixpanel.people.set({ "smartlook_visitor_url": visitor });\n\n        // identify must be called along with every instance of people.set\n        mixpanel.identify("sample_identifier");\n    },\n    (dash) => {\n        mixpanel.track(\n            "Smartlook session URL",\n            {"session_url": dash});\n    }\n  );\n'}},mdxType:"CodeBlock"}),Object(r.b)(s.g,{kind:"note",visibleOn:"android",mdxType:"TextBlock"},"\nFull mixpanel documentation with examples can be found on the [official website](https://developer.mixpanel.com/docs/android).\n"),Object(r.b)(s.g,{kind:"note",visibleOn:"unity",mdxType:"TextBlock"},"\nFull mixpanel documentation with examples can be found on the [official website](https://developer.mixpanel.com/docs/unity).\n"),Object(r.b)(s.g,{kind:"note",visibleOn:"ios",mdxType:"TextBlock"},"\nFull mixpanel documentation with examples can be found on the [official website](https://developer.mixpanel.com/docs/swift).\n"),Object(r.b)(s.g,{kind:"note",visibleOn:"cocos",mdxType:"TextBlock"},"\nFull mixpanel documentation with examples can be found on the [official website](https://developer.mixpanel.com/docs/java).\n"),Object(r.b)(s.g,{kind:"note",visibleOn:"cordova,ionic,react",mdxType:"TextBlock"},"\nFull mixpanel documentation with examples can be found on the [official website](https://developer.mixpanel.com/docs/javascript).\n"),Object(r.b)("h2",{id:"automatic-integration"},"Automatic integration"),Object(r.b)("p",null,"Automatic Mixpanel integration comming soon."))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/integrations/mixpanel-integration.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-integrations-mixpanel-integration-mdx-b5702d74136c65d5da40.js.map