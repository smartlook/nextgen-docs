{"version":3,"sources":["webpack:///../src/api_reference.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","visibleOn","kind","snippets","android","java","kotlin","cordova","javascript","ionic","typescript","flutter","dart","unity","csharp","react","ios","swift","html","src","native_rendering_mode","wireframe_rendering_mode","no_rendering_mode","blueprint_rendering_mode","icon_blueprint_rendering_mode","isMDXComponent"],"mappings":"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","file":"component---src-api-reference-mdx-08e3e1cc6eb658278ee6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nextgen-docs/nextgen-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Link } from \"components\";\nimport { usePlatforms } from 'hooks';\nimport native_rendering_mode from 'assets/rendering_native.png';\nimport wireframe_rendering_mode from 'assets/rendering_wireframe.png';\nimport no_rendering_mode from 'assets/rendering_no_rendering.png';\nimport blueprint_rendering_mode from 'assets/rendering_blueprint.png';\nimport icon_blueprint_rendering_mode from 'assets/rendering_icon_blueprint.png';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"lifecycle--recording\"\n    }}>{`Lifecycle & recording`}</h1>\n    <h2 {...{\n      \"id\": \"sdk-setup-on-application-start\"\n    }}>{`SDK setup (on application start)`}</h2>\n    <p>{`Smartlook SDK `}<strong parentName=\"p\">{`setup`}</strong>{` needs to be called only `}<strong parentName=\"p\">{`once during application lifetime`}</strong>{` and it should be called `}<strong parentName=\"p\">{`on application startup`}</strong>{`. There is `}<strong parentName=\"p\">{`no need to stop`}</strong>{` recording explicitly `}<strong parentName=\"p\">{`on application closure`}</strong>{`, SDK stops itself automatically.`}</p>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nThe best place to setup the SDK is in \\`onCreate()\\` method of your \\`Application\\` class:\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova\" mdxType=\"TextBlock\">{`\nThe best place to setup the SDK is in [deviceready](https://cordova.apache.org/docs/en/5.1.1/cordova/events/events.deviceready.html) callback:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\nThe best place to setup the SDK is in [platform ready](https://ionicframework.com/docs/v3/api/platform/Platform/#ready) callback:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nThe best place to setup the SDK is in \\`didFinishLaunchingWithOptions\\` method of the \\`ApplicationDelegate\\`:\n`}</TextBlock>\n    <TextBlock kind=\"example\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nimport android.app.Application;\\\\n\npublic class MyCustomApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Smartlook.setupAndStartRecording(YOUR_API_KEY);\n    }\n}\n      \\`,\n      kotlin: \\`\nimport android.app.Application;\\\\n\nclass MyCustomApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        Smartlook.setupAndStartRecording(YOUR_API_KEY)\n    }\n}\n      \\`,\n    },\n    cordova: {\n      javascript: \\`\nif(document.readyState === \"complete\") {\n  document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\\\\n\nfunction onDeviceReady() {\n    Smartlook.setupAndStartRecording({smartlookAPIKey: \"YOUR_API_KEY\"});\n}\n      \\`,\n    },\n    ionic: {\n      typescript: \\`\nthis.platform.ready().then(() => {\n    this.smartlook.setupAndStartRecording(new SmartlookSetupConfig(\"YOUR API KEY\"));\n}\n      \\`,\n    },\n    ios: {\n      swift: \\`\nimport Smartlook\n \nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n \n  Smartlook.setup(key: \"YOUR_API_KEY\")\n  Smartlook.startRecording()\n  \n  // other initialization stuff\n    \n  return true\n}\n      \\`,\n      'objective-c': \\`\n#import <Smartlook/Smartlook.h>\n    \n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n        \n    [Smartlook setupWithKey: @\"YOUR_API_KEY\"];\n    [Smartlook startRecording];\n  \n    // other initialization stuff\n  \n    return YES;\n}\n      \\`,\n    },\n    flutter: {\n    dart: \\`\nimport 'package:smartlook/smartlook.dart';\n\\\\n\nclass _MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    ...\n    Smartlook.setupAndStartRecording('YOUR_API_KEY');\n    ...\n    }\n}\n\\`,\n  },\n  unity: {\n    csharp: \\`\npublic class NewBehaviourScript : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        SmartlookUnity.Smartlook.SetupAndStartRecording(\"YOUR_API_KEY\");\n    }\n\\\\n\n    // Update is called once per frame\n    void Update()\n    {\n        ...\n    }\n}\n\\`,\n  },\n  react: {\n    javascript: \\`\nvar Smartlook = require('smartlook-react-native-wrapper');\nSmartlook.setupAndStartRecording(\"YOUR_API_KEY\");\n\\`,\n  }\n  }}\n/>\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf you need to setup SDK later than in Application class, typically if you are fetching your API key, please take a look [here](/cookbooks/android_setup_outside_application_class).\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,cordova,ionic,flutter,unity,react\" mdxType=\"TextBlock\">{`\nThe easiest way of setting up the SDK is with \\`setupAndStart()\\` method:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nThe easiest way of setting up the SDK is with \\`setup()\\` method:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setupAndStart(@NotNull String apiKey);\n      `,\n        kotlin: `\nSmartlook.setupAndStart(@NotNull apiKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setupAndStartRecording({smartlookAPIKey: string});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setupAndStartRecording(new SmartlookSetupConfig(smartlookApiKey: string));\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setupAndStartRecording('YOUR_API_KEY');\n      `\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetupAndStartRecording(\"YOUR_API_KEY\");\n      `\n      },\n      react: {\n        javascript: `\nSmartlook.setupAndStartRecording(\"YOUR_API_KEY\");\n    `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,cordova,ionic,flutter,unity,react\" mdxType=\"TextBlock\">{`\nIt will set the SDK up and also start the recording. If you want to start recording later you can just use:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setup(@NotNull String apiKey);\n      `,\n        kotlin: `\nSmartlook.setup(@NotNull apiKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setup({smartlookAPIKey: string});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setup(new SmartlookSetupConfig(smartlookAPIKey: string));\n      `\n      },\n      ios: {\n        swift: `\nclass func setup(withKey key: String)\n      `,\n        'objective-c': `\n+(void)setupWithKey:(nonnull NSString *)key;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setup(String key, [int fps = 2]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.Setup(\"YOUR_API_KEY\");\nSmartlookUnity.Smartlook.Setup(\"YOUR_API_KEY\", fps);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.setup(\"YOUR_API_KEY\", fps);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nYou need to provide your Smartlook SDK API key which can be acquired in the Smartlook Dashboard.\n`}</TextBlock>\n    <p>{`And then when you want to start the recording call:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startRecording();\n      `,\n        kotlin: `\nSmartlook.startRecording()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startRecording();\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.startRecording();\n      `\n      },\n      ios: {\n        swift: `\nclass func startRecording()\n      `,\n        'objective-c': `\n+ (void)startRecording;\n`\n      },\n      flutter: {\n        dart: `\nSmartlook.startRecording();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StartRecording();\n`\n      },\n      react: {\n        javascript: `\nSmartlook.startRecording();\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"setup-configuration\"\n    }}>{`Setup configuration`}</h3>\n    <TextBlock visibleOn=\"ios,android,cordova,ionic\" mdxType=\"TextBlock\">{`\nSome recording parameters can be configured on setup:\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n| Parameter           | Required | Description                                                                                                                                        | Default value        |\n|---------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|\n| apiKey              | yes      | Unique 40 character key identifying your app (can be found in the dashboard).                                                                      | \"\"                   |\n| fps                 | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value you will override frame rate settings from Dashboard! | 2                    |\n| experimental        | no       | Set this to true to enable some experimental features as TextureView/Maps/MapBox recording etc.                                                    | false                |\n| activity            | no       | Actual activity reference is required when setting the SDK outside of Application class.                                                           | null                 |\n| [renderingMode](#rendering)       | no       | Define the way SDK is going to capture screen image data.                                                                                          | RenderingMode.NATIVE |\n| [renderingModeOption](#rendering) | no       | Further customization of rendering mode.                                                                                                           | null                 |\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nThe following table describes all available optional parameters. Most of them can be also set by a dedicated method. See the respective documentation section for details.\n\\n\nThe options dictionary keys are constants defined as members of \\`SetupOptionKey\\` enumeration.\n\\n\n| Parameter            | Type                   | Default value | Description                                                                                                                                 \n|----------------------|------------------------|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| .enableCrashlytics   | bool                   | false         | Enables Firebase Crashlytics integration              |\n| .framerate           | int                    | 2             | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value you will override frame rate settings from Dashboard!   |\n| .useAdaptiveFramerate | bool                    | true        | By defaults, Smartlook adapts its recording framerate to the frequency of UI changes in order to lower its footprint in app performace. For details, see FIXME LINK -> <Link to=\"/conceptual/screen-recording-quality\">Screen Recording Quality</Link>. |\n| [.renderingMode](#rendering)      | RenderingMode          | native        | Define the way SDK is going to capture screen image data.  |\n| [.renderingModeOption](#rendering) | RenderingModeOption    | none          | Further customize rendering mode.  |\n| .startNewSession     | bool                   | false         | Always start new session with Smartlook setup.   |\n| .startNewSessionAndUser | bool                | false         | Always start new session and reset user woth Smartlook setup.  |\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova\" mdxType=\"TextBlock\">{`\n| Parameter              | Required | Description                                                                                                                                        | Default value        |\n|------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|\n| apiKey                 | yes      | Unique 40 character key identifying your app (can be found in the dashboard).                                                                      | \"\"                   |\n| fps                    | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value you will override frame rate settings from Dashboard! | 2                    |\n| [.renderingMode](#rendering)         | no       | Define the way SDK is going to capture screen image data.                                                                                          | RenderingMode.NATIVE |\n| startNewSession        | no       | Set this to true if you want to force start of new session on setup.                                                                               | false                |\n| startNewSessionAndUser | no       | Set this to true if you want to force start of new session and create new visitor on setup.                                                        | false                |                                                                                                                | null                 |\n`}</TextBlock>\n    <TextBlock visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\n| Parameter              | Required | Description                                                                                                                                        | Default value        |\n|------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|\n| apiKey                 | yes      | Unique 40 character key identifying your app (can be found in the dashboard).                                                                      | \"\"                   |\n| fps                    | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value you will override frame rate settings from Dashboard! | 2                    |\n| [.renderingMode](#rendering)         | no       | Define the way SDK is going to capture screen image data.                                                                                          | SmartlookRenderingMode.NATIVE |\n| startNewSession        | no       | Set this to true if you want to force start of new session on setup.                                                                               | false                |\n| startNewSessionAndUser | no       | Set this to true if you want to force start of new session and create new visitor on setup.                                                        | false                |                                                                                                                | null                 |\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nFull SDK setup configuration can be done with \\`SetupOptionsBuilder\\`, this allows you to set any of setup parameters shown above.\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(@NotNull String apiKey)\n        .setFps(int fps)\n        .setExperimental(boolean experimental)\n        .setActivity(@NonNull Activity activity)\n        .setRenderingMode(@RenderingMode String renderingMode)\n        .setRenderingMode(@RenderingModeOption String renderingModeOption);\\\\n\nSmartlook.setupAndStartRecording(builder.build());\n      \\`,\n      kotlin: \\`\nval builder = Smartlook.SetupOptionsBuilder(@NotNull apiKey: String)\n        .setFps(fps: Int)\n        .setExperimental(experimental: Boolean)\n        .setActivity(@NonNull activity: Activity)\n        .setRenderingMode(@RenderingMode renderingMode: String)\n        .setRenderingMode(@RenderingModeOption renderingModeOption: String)\\\\n\nSmartlook.setupAndStartRecording(builder.build())\n      \\`,\n    },\n  }}\n/>\n\\n\nYou can replace the last line with \\`Smartlook.setup()\\` and start the recording later.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nFull SDK setup configuration can be done with optional \\`setup\\` method parameter.\n`}</TextBlock>\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nclass func setup(key: String, options: [Smartlook.SetupOptionKey : Any]? = nil)\n`,\n        'objective-c': `\n+(void)setupWithKey:(nonnull NSString *)key options:(nullable NSDictionary<SLSetupOptionKey,id> *)options;\n    \n// values in the options dictionary must be objects, e.g.,\n[Smartlook setupWithKey:@\"SOME_API_KEY\" options:@{ SLSetupOptionFramerateKey: @3 }];\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"cordova\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    cordova: {\n      javascript: \\`\nSmartlook.setup({\n  smartlookAPIKey: \"YOUR_API_KEY\",\n  fps: 2,\n  renderingMode: Smartlook.RenderingMode.NATIVE,\n  startNewSession: true\n});\\\\n\nSmartlook.setupAndStartRecording({\n  smartlookAPIKey: \"YOUR_API_KEY\",\n  fps: 2,\n  renderingMode: Smartlook.RenderingMode.NATIVE,\n  startNewSessionAndUser: true\n});\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\nFull SDK setup configuration can be done with \\`SmartlookSetupConfigBuilder\\`, this allows you to set any of setup parameters shown above.\n<CodeBlock\n  snippets={{\n    ionic: {\n      typescript: \\`\nvar builder = new SmartlookSetupConfigBuilder(smartlookAPIKey: string)\n        .fps(fps: number)\n        .renderingMode(renderingMode: SmartlookRenderingMode)\n        .startNewSession(startNewSession: boolean);\n        .startNewSessionAndUser(startNewSessionAndUser: boolean);\\\\n\nSmartlook.setupAndStartRecording(builder.build());\n      \\`,\n    },\n  }}\n/>\n\\n\nYou can replace the last line with \\`Smartlook.setup()\\` and start the recording later.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"start-and-stop-recording\"\n    }}>{`Start and stop recording`}</h2>\n    <p>{`Recording can be `}<strong parentName=\"p\">{`started`}</strong>{` or `}<strong parentName=\"p\">{`stopped`}</strong>{` at any time, the only requirement is that the SDK is set up.`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      `,\n        kotlin: `\nSmartlook.startRecording()\nSmartlook.stopRecording()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.startRecording();\nsmartlook.stopRecording();\n      `\n      },\n      ios: {\n        swift: `\nclass func startRecording()\nclass func stopRecording()\n`,\n        'objective-c': `\n+ (void)startRecording;\n+ (void)stopRecording;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StartRecording();\nSmartlookUnity.Smartlook.StopRecording();\n`\n      },\n      react: {\n        javascript: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nYou **don't need to call** \\`stopRecording()\\` on application closure. **Recording is stopped automatically**.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"check-if-sdk-is-recording\"\n    }}>{`Check if SDK is recording`}</h2>\n    <p>{`If you are using `}<inlineCode parentName=\"p\">{`startRecording()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`stopRecording()`}</inlineCode>{` methods it might be handy to know if SDK is currently recording or not. Simply call:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.isRecording();\n      `,\n        kotlin: `\nSmartlook.isRecording()\n      `\n      },\n      cordova: {\n        typescript: `\nSmartlook.isRecording(isRecording: function(isRecording: string))\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.isRecording(): promise<boolean>;\n      `\n      },\n      ios: {\n        swift: `\nclass func isRecording() -> Bool\n`,\n        'objective-c': `\n+ (BOOL)isRecording;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.isRecording();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.IsRecording();\n`\n      },\n      react: {\n        javascript: `\nSmartlook.isRecording();\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    cordova: {\n      javascript: \\`\nSmartlook.isRecording(\n    function(isRecording){\n        //check here\n    }\n)\n      \\`,\n    },\n    ionic: {\n      typescript: \\`\nsmartlook.isRecording().then((isRecording) => {\n  alert(isRecording)\n});\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n## Reset session\nYou can end current session and start new one by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.resetSession(boolean resetUser);\n      `,\n        kotlin: `\nSmartlook.resetSession(resetUser: Boolean)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nSet \\`resetUser\\` to \\`true\\` if you want SDK to create new visitor. This is especially beneficial if you want to identify new user (typically after logout).\\n\nYou can ensure that new session is created on SDK setup:\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSession();\\\\n\nSmartlook.setupAndStartRecording(builder.build());\n      \\`,\n      kotlin: \\`\nval builder = Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSession()\\\\n\nSmartlook.setupAndStartRecording(builder.build())\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf you also want to create new visitor on SDK setup use:\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSessionAndUser();\\\\n\nSmartlook.setupAndStartRecording(builder.build());\n      \\`,\n      kotlin: \\`\nval builder = Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSessionAndUser()\\\\n\nSmartlook.setupAndStartRecording(builder.build())\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <h1 {...{\n      \"id\": \"sensitive-data-hiding\"\n    }}>{`Sensitive data hiding`}</h1>\n    <TextBlock visibleOn=\"android,ios,react\" mdxType=\"TextBlock\">{`\nWhen using **native** rendering mode, **SDK can record sensitive data in your application**. You can configure recording using methods listed below so sensitive data is not recorded, or you can simply use one of **Wireframe** rendering modes that does not record sensitive data by design.\n`}</TextBlock>\n    <TextBlock kind=\"important\" visibleOn=\"android,ios,react\" mdxType=\"TextBlock\">{`\nSensitive elements are **hidden locally** on the device, no sentive data is transfered over network and stored in our dashboard.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,react,flutter,unity\" mdxType=\"TextBlock\">{`\n## Blacklisted views\n`}</TextBlock>\n    <TextBlock visibleOn=\"flutter, unity\" mdxType=\"TextBlock\">{`\nThis functionality is not available yet.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,react\" mdxType=\"TextBlock\">{`\nYou can hide any view in the recording by marking it as a **blacklisted** view. View can be marked as blacklisted by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerBlacklistedView(View view);\nSmartlook.registerBlacklistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.registerBlacklistedView(view: View)\nSmartlook.registerBlacklistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nclass func registerBlacklisted(object: Any)\n`,\n        'objective-c': `\n+ (void)registerBlacklistedObject:(nonnull id)object;\n      `\n      },\n      react: {\n        javascript: `\nSmartlook.registerBlacklistedView(ref);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\n  <CodeBlock\n    snippets={{\n      ios: {\n        swift: \\`\nSmartlook.registerBlacklisted(object: someView)\n\\`,\n        'objective-c': \\`\n[Smartlook registerBlacklistedObject:self.someView];\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nOr can be tagged directly in \\`xml\\` layout file:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nOr can be tagged directly by an \\`UIView\\` property added by Smartlook:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\n<View>\n    <tag android:id=\"@id/smartlook_blacklisted_view\"/>\n</View>\n      `\n      },\n      ios: {\n        swift: `\nvar slSensitive: Bool\n`,\n        'objective-c': `\n@property (nonatomic, assign) IBInspectable BOOL slSensitive;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\n  <CodeBlock\n    snippets={{\n      ios: {\n        swift: \\`\nsomeView.slSensitive = true\n\\`,\n        'objective-c': \\`\nself.someView.slSensitive = YES;\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,react\" mdxType=\"TextBlock\">{`\nIf view no longer needs to be blacklisted call:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterBlacklistedView(View view);\nSmartlook.unregisterBlacklistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.unregisterBlacklistedView(view: View)\nSmartlook.unregisterBlacklistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nclass func registerBlacklisted(object: Any)\n`,\n        'objective-c': `\n+ (void)unregisterBlacklistedObject:(nonnull id)object\n      `\n      },\n      react: {\n        javascript: `\nSmartlook.unregisterBlacklistedView(ref);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nBlacklisted view is hidden on recording by single color rectangle. You can configure color of this rectangle by calling:\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlook.setBlacklistedItemsColor(@ColorInt int color);\n      \\`,\n      kotlin: \\`\nSmartlook.setBlacklistedItemsColor(@ColorInt color: Int);\n      \\`,\n    },\n    ios: {\n      swift: \\`\nclass func setBlacklistedItem(color: UIColor)\n      \\`,\n      'objective-c': \\`\n+ (void)setBlacklistedItemsColor:(nonnull UIColor *)color;\n      \\`,\n    },\n  }}\n/>\nThis is applied for all blacklisted objects.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,react,flutter,unity\" mdxType=\"TextBlock\">{`\n## Blacklisted classes\n`}</TextBlock>\n    <TextBlock visibleOn=\"flutter,unity,react\" mdxType=\"TextBlock\">{`\nThis functionality is not available yet.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf you dont want to blacklist specific \\`views\\` and rather blacklist all \\`views\\` of given \\`Class\\`, use:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nYou can also blacklist all instances of a **\\`UIView\\` subclass** or all \\`UIView\\` subclasses that conform some **protocol**:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerBlacklistedClass(Class class);\nSmartlook.registerBlacklistedClasses(List<Class> classes);\n      `,\n        kotlin: `\nSmartlook.registerBlacklistedClass(class: Class)\nSmartlook.registerBlacklistedClasses(classes: List<Class>)\n      `\n      },\n      ios: {\n        swift: `\n// Note: the object can be UIView instance, UIView subclass or a Protocol,\n// see examples below\nclass func registerBlacklisted(object: Any)\n`,\n        'objective-c': `\n// Note: the object can be UIView instance, UIView subclass or a Protocol \n// see examples below\n+ (void)registerBlacklistedObject:(nonnull id)object;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\n  <CodeBlock\n    snippets={{\n      ios: {\n        swift: \\`\n// Note: the object can be UIView instance, UIView subclass or a Protocol \nsomeView.slSensitive = true\nSmartlook.registerBlacklisted(object: someView)      \nSmartlook.registerBlacklisted(object: SensitiveDataViewClass.self)      \nSmartlook.registerBlacklisted(object: SensitiveProtocol.self)\n\\`,\n        'objective-c': \\`\n// Note: the object can be UIView instance, UIView subclass or a Protocol \nself.someView.slSensitive = true\n[Smartlook registerBlacklistedObject:self.someView];          \n[Smartlook registerBlacklistedObject:SensitiveDataViewClass.class];          \n[Smartlook registerBlacklistedObject:@protocol(SensitiveProtocol)];\n      \\`,\n    },\n  }}\n  />\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nYou can remove any of blacklisted classes:\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nNote that for convenience, **some classes are blacklisted by default**: \\`UITextView\\`, \\`UITextField\\` and \\`WKWebView\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{` \nYou can remove any of the blacklisted objects:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterBlacklistedClass(Class class);\nSmartlook.unregisterBlacklistedClasses(List<Class> classes);\n      `,\n        kotlin: `\nSmartlook.unregisterBlacklistedClass(class: Class)\nSmartlook.unregisterBlacklistedClasses(classes: List<Class>)\n      `\n      },\n      ios: {\n        swift: `\nclass func unregisterBlacklisted(object: Any)\n`,\n        'objective-c': `\n+ (void)unregisterBlacklistedObject:(nonnull id)object\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nNote that \\`EditText\\` and \\`WebView\\` are **blacklisted by default** and can be removed using \\`Smartlook.unregisterBlacklistedClass()\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,react,flutter,unity\" mdxType=\"TextBlock\">{`\n## Whitelisted views\n`}</TextBlock>\n    <TextBlock visibleOn=\"flutter,unity,react\" mdxType=\"TextBlock\">{`\nThis functionality is not available yet.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nIn case you need some view to be recorded even if its instance of a blacklisted class, you can whitelist it:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerWhitelistedView(View view);\nSmartlook.registerWhitelistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.registerWhitelistedView(view: View)\nSmartlook.registerWhitelistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nclass func registerWhitelisted(object: Any)\n`,\n        'objective-c': `\n+ (void)registerWhitelistedObject:(nonnull id)object;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nOr you can tag them directly in \\`xml\\` layout file:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nOr can be tagged directly by an \\`UIView\\` property added by Smartlook:\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"ios,android\" mdxType=\"TextBlock\">{`\n  <CodeBlock\n    snippets={{\n      android: {\n        java: \\`\n<View>\n    <tag android:id=\"@id/smartlook_whitelisted_view\"/>\n</View>\n      \\`,\n      },   \n      ios: {\n        swift: \\`\nsomeView.slSensitive = false\n        \\`,\n        'objective-c': \\`\nself.someView.slSensitive = NO;\n        \\`,\n      },\n    }}\n  />\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nYou can remove view from whitelist by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterWhitelistedView(View view);\nSmartlook.unregisterWhitelistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.unregisterWhitelistedView(view: View)\nSmartlook.unregisterWhitelistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.unregisterWhitelisted(object: someView)\n`,\n        'objective-c': `\n[Smartlook unregisterWhitelistedObject:someView];\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nSome elements in your application cannot be recorded because of security (posibly GDPR) reasons.\nAll of theese can be marked and will be hidden on the recording.\n`}</TextBlock>\n    <TextBlock kind=\"important\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nSensitive elements are **hidden locally** on the device, no sentive data is transfered over network and stored in our dashboard.\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n## Hidden elements\nSensitive elements can be blacklisted by marking them with \\`.smartlook-hide\\` css class:\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    cordova: {\n      html: \\`\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      \\`,\n    },\n    ionic: {\n      html: \\`\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n**All inputs** are **hidden** by default except for \\`button\\` and \\`submit\\` types.\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n## Shown elements\nIf you need to record some input that is hidden by default you can mark it with \\`.smartlook-show\\` css class:\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    cordova: {\n      html: \\`\n<input type=\"text\" class='smartlook-show'>\n      \\`,\n    },\n    ionic: {\n      html: \\`\n<input type=\"text\" class='smartlook-show'>\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"no-rendering\"\n    }}>{`No Rendering`}</h2>\n    <p>{`In case your whole screen consists of sensitive data you can tell SDK to not record any screen data. This can be done by switching into `}<inlineCode parentName=\"p\">{`no rendering`}</inlineCode>{` rendering mode:`}</p>\n    <TextBlock kind=\"example\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n      \\`,\n      kotlin: \\`\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING)\n      \\`,\n    },\n    cordova: {\n      javascript: \\`\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NO_RENDERING})\n      \\`,\n    },\n    ionic: {\n      typescript: \\`\nsmartlook.setRenderingMode(SmartlookRenderingMode.NO_RENDERING());\n      \\`,\n    },    \n    ios: {\n      swift: \\`\nSmartlook.setRenderingMode(to: .noRendering)\n      \\`,\n      'objective-c': \\`\n[Smartlook setRenderingModeTo:SLRenderingModeNoRendering];\n      \\`,\n    },\n    flutter: {\n      dart: \\`\nSmartlook.setRenderingMode(SmartlookRenderingMode.no_rendering);\n      \\`,\n  },\n  unity: {\n    csharp: \\`\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType.no_rendering);\n    \\`,\n  },\n  react: {\n    javascript: \\`\nSmartlook.setRenderingMode(\"no_rendering\");\n    \\`,\n  }\n  }}\n/>\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android,ios,react\" mdxType=\"TextBlock\">{`\nSDK provides rendering modes that hide sensitive information by simplifying the rendered screen for recording. This can be advantageous because you can see what is the user doing and be safe in sensitive data regard. You can read more about rendering modes [in conceptual documentation](/conceptual/handling-sensitive-data#recording-modes-handling-sensitive-data-at-the-whole-screen-level).\n`}</TextBlock>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">{`\nSome screens can leak sensitive data even through automatically detected touch events. You can read more about this issue in [secure custom keyboard example](/cookbooks/secure_custom_keyboard).\n`}</TextBlock>\n    <p>{`When your application is no longer displaying sensitive screen you can set your rendering mode back to preferred variant:`}</p>\n    <TextBlock kind=\"example\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\n      \\`,\n      kotlin: \\`\nSmartlook.setRenderingMode(RenderingMode.NATIVE)\n      \\`,\n    },\n    cordova: {\n      javascript: \\`\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NATIVE})\n      \\`,\n    },\n    ionic: {\n      typescript: \\`\nsmartlook.setRenderingMode(SmartlookRenderingMode.NATIVE());\n      \\`,\n    },    \n    ios: {\n      swift: \\`\nSmartlook.setRenderingMode(to: .native)\n      \\`,\n      'objective-c': \\`\n[Smartlook setRenderingModeTo:SLRenderingModeNative];\n      \\`,\n    },\n    flutter: {\n      dart: \\`\nSmartlook.setRenderingMode(SmartlookRenderingMode.native);\n      \\`,\n  },\n  unity: {\n    csharp: \\`\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType.native);\n    \\`,\n  },\n  react: {\n    javascript: \\`\nSmartlook.setRenderingMode(\"native\");\n    \\`,\n  }\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,flutter,unity,react\" mdxType=\"TextBlock\">{`\n## WebView blacklisting/whitelisting\n`}</TextBlock>\n    <TextBlock visibleOn=\"flutter,unity,react\" mdxType=\"TextBlock\">{`\nThis functionality is not available yet.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf your application has some parts displayed using \\`WebView\\` and you want to record those parts you need to enable \\`WebView\\` recording by removing \\`WebView\\` from list of blacklisted classes:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nIf your application has some parts displayed using \\`WKWebView\\` and you want to record those parts you need to enable \\`WKWebView\\` recording by removing \\`WKWebView\\` from list of blacklisted classes:\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\n\\`UIWebView\\` class is obsolete and no longer supported by Apple. Thus, its instances and their content are not specifically handled by Smartlook from the \\`sensitivity\\` point of view.\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"ios,android\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlook.unregisterBlacklistedClass(WebView.class);\n      \\`,\n      kotlin: \\`\nSmartlook.registerBlacklistedClass(WebView::class.java)\n      \\`,\n    },\n    ios: {\n      swift: \\`\nSmartlook.unregisterBlacklisted(object: WKWebView.class)\n      \\`,\n      'objective-c': \\`\n[Smartlook unregisterBlacklistedObject:WKWebView.class];\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nNow that you are recording all \\`WebView\\`s please **make sure that all sensitive elements** on the displayed web page **are hidden**. This can be done by marking sensitive html elements with \\`.smartlook-hide\\` css class:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      `\n      },\n      ios: {\n        html: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nAll input inputs are hidden by default except for \\`button\\` and \\`submit\\` types. If you need to record some hidden inputs you can mark these views with \\`.smartlook-show\\` css class:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      },\n      ios: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h1 {...{\n      \"id\": \"user-identification\"\n    }}>{`User Identification`}</h1>\n    <p>{`You can specify user identifier by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setUserIdentifier(@NonNull String identifier);\n      `,\n        kotlin: `\nSmartlook.setUserIdentifier(@NonNull identifier: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setUserIdentifier({identifier: string})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier(identifier: string));\n      `\n      },\n      ios: {\n        swift: `\nclass func setUserIdentifier(_ userIdentifier: String?)\n      `,\n        'objective-c': `\n+ (void)setUserIdentifier:(nullable NSString*)userIdentifier;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setUserIdentifier(String key, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetUserIdentifier(string userIdentifier);\n//json string, obtained for example with JsonUtility.ToJson(param)\nSmartlookUnity.Smartlook.SetUserIdentifier(string userIdentifier, string properties);\n    `\n      },\n      react: {\n        javascript: `\nSmartlook.setUserIdentifier(idKey, map);\n    `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nYou can then lookup identifiers in the Dashboard to find specific user’s recordings.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"user-properties\"\n    }}>{`User properties`}</h2>\n    <TextBlock visibleOn=\"flutter,unity,react\" mdxType=\"TextBlock\">{`\nThis functionality is described in **User Identification** section.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nAdditional user information such as \\`name\\`, \\`email\\`, etc. can be set using \\`UserProperties\\` helper class and its methods.\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nUserProperties userProperties = new UserProperties();\nuserProperties.putEmail(\"sample@email.com\");\nuserProperties.putName(\"John Doe\");\nSmartlook.setUserProperties(userProperties);\n      \\`,\n      kotlin: \\`\nval userProperties = UserProperties().apply {\n    putEmail(\"sample@email.com\")\n    putName(\"John Doe\")\n}\nSmartlook.setUserProperties(userProperties)\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf you set \\`email\\` or \\`name\\` property it will be displayed in the list of visitors in the Smartlook dashboard. Otherwise \\`identifier\\` is used.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf there is no helper method for the data you want to set to user properties use \\`put()\\` method that accepts combination of \\`key\\` and \\`value\\`.\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nUserProperties userProperties = new UserProperties();\nuserProperties.put(\"key\", \"value\");\nSmartlook.setUserProperties(userProperties);\n      \\`,\n      kotlin: \\`\nval userProperties = UserProperties()\nuserProperties.put(\"key\", \"value\")\nSmartlook.setUserProperties(userProperties)\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nAll helper and \\`put()\\` method have optional parameter \\`immutable\\` if set to **true**, the value that has been set for the key is going to be immutable.\nThis means it cannot be set again (new value will **not overrride** the old one).\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nAdditional user information, such as \\`name\\`, \\`email\\` and other custom properties can be set by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      cordova: {\n        javascript: `\nSmartlook.setUserIdentifier({\n  identifier: string,\n  sessionProperties: object\n})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier(identifier: string, sessionProperties: object));\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    cordova: {\n      javascript: \\`\nSmartlook.setUserIdentifier({\n  identifier: \"sample_identifier\",\n  sessionProperties: {\n    name: \"John\",\n    email: \"john@example.com\"\n  }\n})\n      \\`,\n    },\n    ionic: {\n      typescript: \\`\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier(\"sample_identifier\", {name: \"John\" email: \"john@example.com\"}));\n      \\`,\n    },    \n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nAdditional custom properties can be added to each recording session by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nclass func setSessionProperty(value: String, forName name: String)\n`,\n        'objective-c': `\n+ (void)setSessionPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name;\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nYou will see these properties in the Dashboard at Visitor details.\n\\n    \nIf you want to lock a session property value to protect it against accidental further changes. Immutable property value cannot be changes once it is set.\n`}</TextBlock>\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nstatic var immutable: SLPropertyOption\n \nclass func setSessionProperty(value: String, forName name: String, options: SLPropertyOption)\n`,\n        'objective-c': `\ntypedef NS_OPTIONS(NSUInteger, SLPropertyOption) {\n    SLPropertyOptionDefaults    = 0,\n    SLPropertyOptionImmutable   = 1 << 0\n};\n+ (void)setSessionPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name withOptions:(SLPropertyOption)options;\n`\n      }\n    }} mdxType=\"CodeBlock\" />  \n    <TextBlock kind=\"example\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\n  <CodeBlock\n    snippets={{\n      ios: {\n        swift: \\`\nSmartlook.setSessionProperty(value: \"immutable-value\", forName: \"my-property\", options: .immutable)\n        \\`,\n        'objective-c': \\`\n[Smartlook setSessionPropertyValue:@\"immutable-value\" forName:@\"my-property\" withOptions:SLPropertyOptionImmutable];\n        \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <h1 {...{\n      \"id\": \"analytics\"\n    }}>{`Analytics`}</h1>\n    <TextBlock visibleOn=\"android, ios, react\" mdxType=\"TextBlock\">{`\nSome analytic events are recorded out-of-box:\n* Activity/Fragment changes\n* Focus changes\n* Clicked views\n* Application crashes\n* For everything else you can use custom events.\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nNames of some automatically detected events can be customized.\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nOn web based frameworks we are not able to autodetect all events like on native frameworks. With that said we are still able to detect Application crashes.\nFor everything else you need to use custom events.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"custom-event\"\n    }}>{`Custom event`}</h2>\n    <p>{`You can track simple custom event by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackCustomEvent(@NonNull String eventName);\n      `,\n        kotlin: `\nSmartlook.trackCustomEvent(@NonNull eventName: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackCustomEvent({name: string})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.trackCustomEvent(new SmartlookCustomEvent(name: string));\n      `\n      },\n      ios: {\n        swift: `\nclass func trackCustomEvent(name eventName: String)\n`,\n        'objective-c': `\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.trackCustomEvent(String eventName);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.TrackCustomEvent(string eventName);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.trackCustomEvent(key);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nAdditional data serialized as \\`JSONObject\\`, \\`Bundle\\`, \\`String\\` with valid json format or key/value pair can be added to custom event:\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nAddition data passed as a \\`object\\` can be added to custom event:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nCustom event also accepts a dictionary of string key/values as event properties.\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackCustomEvent(@NonNull String eventName, JSONObject eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, Bundle eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, String validJsonString);\nSmartlook.trackCustomEvent(@NonNull String eventName, @NotNull String key, String value);\n      `,\n        kotlin: `\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: JSONObject);\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: Bundle);\nSmartlook.trackCustomEvent(@NonNull eventName: String, validJsonString: String);\nSmartlook.trackCustomEvent(@NonNull eventName: String, @NotNull key: String, value: String);\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackCustomEvent({name: string, eventProperties: object})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.trackCustomEvent(new SmartlookCustomEvent(name: string, eventProperties: object));\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.trackCustomEvent(name: String, props: [String : String]?)\n`,\n        'objective-c': `\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.trackCustomEvent(String eventName, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\n    //json string, obtained for example with JsonUtility.ToJson(param)\nSmartlookUnity.TrackCustomEvent(string eventName, string properties);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.trackCustomEvent(key, map);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    cordova: {\n      javascript: \\`\nSmartlook.trackCustomEvent({\n  name: \"sample_event\",\n  eventProperties: {\n    id: \"sample_id\",\n    text: \"sample text\"\n  }\n})\n      \\`,\n    },\n    ionic: {\n      typescript: \\`\nsmartlook.trackCustomEvent(new SmartlookCustomEvent(\"sample_event\", eventProperties: {\n    id: \"sample_id\",\n    text: \"sample text\"\n  }\n));\n      \\`,\n    }, \n  }}\n/>\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android,cordova,ionic\" mdxType=\"TextBlock\">{`\nEvent properties will effectively use only flat object.\nThis means that if you pass object that includes objects or arrays as a child elements these elements are goint to be ignored.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"navigation-event\"\n    }}>{`Navigation event`}</h2>\n    <p>{`You can track screen/navigation transitions manually by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackNavigationEvent(@NotNull String name, @ViewState String viewState);\n      `,\n        kotlin: `\nSmartlook.trackNavigationEvent(@NotNull name: String, @ViewState viewState: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackNavigationEvent({name: string, viewState: Smartlook.ViewState})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.trackNavigationEvent(new SmartlookNavigationEvent(name: string, viewState: SmartlookViewState))\n      `\n      },\n      ios: {\n        swift: `\nstatic let enter: Smartlook.NavigationEventType\nstatic let exit: Smartlook.NavigationEventType\n \nSmartlook.trackNavigationEvent(withControllerId controllerId: String, type: Smartlook.NavigationEventType)\n`,\n        'objective-c': `\nSLNavigationType const _Nonnull SLNavigationTypeEnter;\nSLNavigationType const _Nonnull SLNavigationTypeExit;\n \n+ (void)trackNavigationEventWithControllerId:(nonnull NSString *)controllerId type:(nonnull SLNavigationType)type;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.trackNavigationEvent(String key, SmartlookNavigationEventType type);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.TrackNavigationEvent(string screenName, NavigationEventType direction);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.trackNavigationEvent(screenName, \"enter\"/\"exit\");\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nwhere \\`viewState\\` can be either \\`ViewState.START\\` or \\`ViewState.STOP\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova\" mdxType=\"TextBlock\">{`\nwhere \\`viewState\\` can be either \\`Smartlook.ViewState.START\\` or \\`Smartlook.ViewState.STOP\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\nwhere \\`viewState\\` can be either \\`SmartlookViewState.START\\` or \\`SmartlookViewState.STOP\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nwhere the \\`type\\` could flag the event as either \\`enter\\` or \\`exit\\` of the navigation controller.\n`}</TextBlock>\n    <TextBlock kind=\"important\" visibleOn=\"unity\" mdxType=\"TextBlock\">{`\nYou need to track navigation events manually, because Unity apps typically consist of single activity.\n`}</TextBlock>\n    <TextBlock kind=\"important\" visibleOn=\"cordova, ionic\" mdxType=\"TextBlock\">{`\nYou need to track navigation events manually, because web technology based apps typically consist of single activity.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nYou can also explicitly tell the SDK if the navigation event happened between \\`Activities\\` or \\`Fragments\\`:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackNavigationEvent(@NotNull String name, @ViewType String type, @ViewState String viewState);\n      `,\n        kotlin: `\nSmartlook.trackNavigationEvent(@NotNull name: String, @ViewType type: String, @ViewState viewState: String)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nwhere \\`viewType\\` is one of \\`ViewType.ACTIVITY\\` or \\`ViewType.FRAGMENT\\`.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"timed-event\"\n    }}>{`Timed event`}</h2>\n    <p>{`In case you want to measure the duration of any time-sensitive or long-running actions in the app (for example download/upload). You can call one of:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startTimedCustomEvent(@NotNull String eventName);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, JSONObject eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, Bundle eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.startTimedCustomEvent(@NotNull eventName: String)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: JSONObject)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: Bundle)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startTimedCustomEvent({name: string}, successCallback: function(eventId: string));\nSmartlook.startTimedCustomEvent({name: string, eventProperties: object}, successCallback: function(eventId: string));\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.startTimedCustomEvent(new SmartlookTimedCustomEventStart(name: string)): promise<string>;\nsmartlook.startTimedCustomEvent(new SmartlookTimedCustomEventStart(name: string, eventProperties: object)): promise<string>;\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.startTimedCustomEvent(name: String, props: [String : String]?) -> Any\n`,\n        'objective-c': `\n+ (id _Nonnull)startTimedCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.startTimedCustomEvent(String eventName, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StartTimedCustomEvent(string eventName);\nSmartlookUnity.Smartlook.StartTimedCustomEvent(string eventName, string properties)\n`\n      },\n      react: {\n        javascript: `\nSmartlook.startTimedCustomEvent(\"sample_timed_event\", {prop: \"propValue\"});\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`This will not send out any event but returns a unique `}<inlineCode parentName=\"p\">{`eventId`}</inlineCode>{` that `}<strong parentName=\"p\">{`needs to be stored`}</strong>{` and its used to stop/cancel custom timed event.`}</p>\n    <p>{`To send out event with duration you need to call one of:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.stopTimedCustomEvent(@NotNull String eventId);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, JSONObject eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, Bundle eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: JSONObject)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: Bundle)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.stopTimedCustomEvent({eventId: string});\nSmartlook.stopTimedCustomEvent({eventId: string, eventProperties: object});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.stopTimedCustomEvent(new SmartlookTimedCustomEventStop(eventId: string));\nsmartlook.stopTimedCustomEvent(new SmartlookTimedCustomEventStop(eventId: string, eventProperties: object));\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.stopTimedCustomEvent(String key, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StopTimedCustomEvent(string eventId);\nSmartlookUnity.Smartlook.StopTimedCustomEvent(string eventId, string properties);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.stopTimedCustomEvent(\"event_id\", {prop: \"propValue\"});\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`with corresponding `}<inlineCode parentName=\"p\">{`eventId`}</inlineCode>{` obtained from `}<inlineCode parentName=\"p\">{`startTimedCustomEvent`}</inlineCode>{`.`}</p>\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nProperties set in start will be **merged** with properties set in stop/cancel. Properties from stop/cancel have higher priority and will rewrite conflicting properties from start.\n`}</TextBlock>\n    <p>{`In case given action failed you can call `}<inlineCode parentName=\"p\">{`cancelTimedCustomEvent()`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`stopTimedCustomEvent()`}</inlineCode>{` and provide a `}<strong parentName=\"p\">{`reason`}</strong>{` of failure:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, JSONObject eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, Bundle eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: JSONObject)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: Bundle)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.cancelTimedCustomEvent({eventId: string, reason: string});\nSmartlook.cancelTimedCustomEvent({eventId: string, reason: string, eventProperties: object});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.cancelTimedCustomEvent(new SmartlookTimedCustomEventCancel(eventId: string, reason: string));\nsmartlook.cancelTimedCustomEvent(new SmartlookTimedCustomEventCancel(eventId: string, reason: string, eventProperties: object));\n      `\n      },\n      ios: {\n        swift: `\n// to track successfull events\nSmartlook.trackTimedCustomEvent(eventId: Any, props: [String : String]?)\n// to track event cancellation\nSmartlook.trackTimedCustomEventCancel(eventId: Any, reason: String?, props: [String : String]?)\n`,\n        'objective-c': `\n// to track successfull events\n+ (void)trackTimedCustomEventWithEventId:(id _Nonnull)eventId props:(nullable NSDictionary<NSString*, NSString*>*)props;\n// to track event cancellation\n+ (void)trackTimedCustomEventCancelWithEventId:(id _Nonnull)eventId reason:(NSString *_Nullable)reason props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.cancelTimedCustomEvent(String key, String reason, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.CancelTimedCustomEvent(string eventId, string reason);\nSmartlookUnity.Smartlook.CancelTimedCustomEvent(string eventId, string reason, string properties);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.stopTimedCustomEvent(\"event_id\", \"reason\", {prop: \"propValue\"});\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"android,cordova,ionic,ios\" mdxType=\"TextBlock\">{`\nTypical use of timed event might look like this:\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nString eventID = Smartlook.startTimedCustomEvent(\"duration_event\");\nThread.sleep(1000); //long running operation\nSmartlook.stopTimedCustomEvent(eventId);\n      \\`,\n      kotlin: \\`\nval eventID = Smartlook.startTimedCustomEvent(\"duration_event\")\nThread.sleep(1000) //long running operation\nSmartlook.stopTimedCustomEvent(eventId)\n      \\`,\n    },\n    cordova: {\n      javascript: \\`\nSmartlook.startTimedCustomEvent({name: \"duration_event\"}, function(eventId) {\n  setTimeout(function() {\n    Smartlook.stopTimedCustomEvent({eventId: eventId});\n  }, 1000);\n});\n      \\`,\n    },\n    ionic: {\n      typescript: \\`\nsmartlook.startTimedCustomEvent(new SmartlookTimedCustomEventStart(\"duration_event\")).then((eventId) => {\n  setTimeout(function() {\n    smartlook.stopTimedCustomEvent(new SmartlookTimedCustomEventStop(eventId));\n  }, 1000);\n});\n      \\`,\n    },\n    ios: {\n      swift: \\`\nlet eventRef = Smartlook.startTimedCustomEvent(\"duration_event\");\n// some lenghty operation\nSmartlook.trackTimedCustomEvent(eventRef);\n      \\`,\n      'objective-c': \\`\nid eventRef = [Smartlook startTimedCustomEventWithName:@\"duration_event\"];\n// some lenghty operation\n[Smartlook trackTimedCustomEventCancelWithEventId:eventRef];\n      \\`,\n    },\n  }}\n/>\n\\n \nIn this case \\`duration_event\\` will have duration property set to circa 1000ms.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n## Customize automatic event detection\nFor some automatically detected events SDK tries to figure out the name from application context:\n* **click event** - Event name consists of \\`Activity\\` name, \\`View\\` class (Button, etc.) and \\`id\\`.\n* **navigation event** - Event name is set as \\`Activity\\`/\\`Fragment\\` name.\n\\n\nBut sometimes it's impossible to name an event with an easy to read and descriptive name. Because of this SDK provides you with an option to personalize event names.\n\\n\n### Name click events\nSo a click on a given view has a custom event name instead of id it can be tagged directly in the XML layout file:\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      xml: \\`\n<View>\n    <tag android:id=\"@id/smartlook_custom_name\" android:value=\"custom_name\"/>\n</View>\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf View has \\`smartlook_custom_name\\` set, clicking on this view will trigger an event with name consisting of \\`Activity\\` name, \\`View\\` class (\\`Button\\`, etc.) and \\`smartlook_custom_name\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n### Name navigation events\nCustom names for navigation events can be set in two different ways. \\`Activity\\`/\\`Fragment\\` can implement \\`SmartlookNamedController\\` interface:\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\npublic class SettingsActivity extends AppCompatActivity implements SmartlookNamedController {\n    @NotNull\n    @Override\n    public String getCustomName() {\n        return \"custom_activity_name\";\n    }\n}\n      \\`,\n      kotlin: \\`\nclass SettingsActivity : AppCompatActivity(), SmartlookNamedController {\n    @NotNull\n    override fun getCustomName(): String {\n        return \"custom_activity_name\";\n    }\n}\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nOr \\`Activity\\`/\\`Fragment\\` root view can be tagged directly in \\`XML\\` layout file:\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      xml: \\`\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<View>\n\t<tag android:id=\"@id/smartlook_custom_controller_name\" android:value=\"custom_name\"/>\\\\n\n\t<!-- child views -->\n</View>\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"global-event-properties\"\n    }}>{`Global event properties`}</h2>\n    <p>{`SDK lets you set data that will be attached to every event. We call these `}<strong parentName=\"p\">{`global event properties`}</strong>{`.\nYou can set global event properties:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setGlobalEventProperties(JSONObject globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(Bundle globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(String globalEventPropertiesJson, boolean immutable);\nSmartlook.setGlobalEventProperty(@NotNull String key, @NotNull String value, boolean immutable);\n      `,\n        kotlin: `\nSmartlook.setGlobalEventProperties(globalEventProperties: JSONObject, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventProperties: Bundle, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventPropertiesJson: String, immutable: Boolean)\nSmartlook.setGlobalEventProperty(@NotNull key: String, @NotNull value: String, immutable: Boolean)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setGlobalEventProperties({globalEventProperties: object, immutable: boolean});\nSmartlook.setGlobalEventProperty({key: string, value: string, immutable: boolean});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setGlobalEventProperties(new SmartlookGlobalEventProperties(globalEventProperties: object, immutable: boolean));\nsmartlook.setGlobalEventProperty(new SmartlookGlobalEventProperty(key: string, value: string, immutable: boolean));\n      `\n      },\n      ios: {\n        swift: `\nclass func setGlobalEventProperty(value: String, forName name: String)\n  \nstatic var immutable: SLPropertyOption \nclass func setGlobalEventProperty(value: String, forName name: String, options: SLPropertyOption)\n`,\n        'objective-c': `\n+ (void)setGlobalEventPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name;\n  \ntypedef NS_OPTIONS(NSUInteger, SLPropertyOption) {\n    SLPropertyOptionDefaults    = 0,\n    SLPropertyOptionImmutable   = 1 << 0\n};\n+ (void)setGlobalEventPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name withOptions:(SLPropertyOption)options;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setGlobalEventProperty(String key, String value, bool immutable)\nSmartlook.setGlobalEventProperties(Object map, bool immutable)\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetGlobalEventProperty(string key, string value, bool immutable);\nSmartlookUnity.Smartlook.SetGlobalEventProperties(string properties, bool immutable);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.setGlobalEventProperty(key, value, immutable);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    cordova: {\n      javascript: \\`\nSmartlook.setGlobalEventProperties({\n  globalEventProperties: {\n    global: \"property\",\n    sample: \"test\"\n  },\n  immutable: true\n});\n      \\`,\n    },\n    ionic: {\n      typescript: \\`\nsmartlook.setGlobalEventProperties(new GlobalEventProperties({sample: \"property\"}, true);\nsmartlook.setGLobalEventProperty(new setGlobalEventProperty(\"sample\", \"property\", true);\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\n  <CodeBlock\n    snippets={{\n      ios: {\n        swift: \\`\nSmartlook.setGlobalEventProperty(value: \"value\", forName: \"my-property\");\nSmartlook.setGlobalEventProperty(value: \"immutable-value\", forName: \"my-immutable-property\", options: .immutable)\n        \\`,\n        'objective-c': \\`\n[Smartlook setGlobalEventPropertyValue:@\"value\" forName:@\"my-property\"];\n[Smartlook setGlobalEventPropertyValue:@\"immutable-value\" forName:@\"my-immutable-property\" withOptions:SLPropertyOptionImmutable];\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <p>{`Properties set to be `}<strong parentName=\"p\">{`immutable`}</strong>{` have the `}<strong parentName=\"p\">{`highest`}</strong>{` priority and once set they `}<strong parentName=\"p\">{`cannot be overridden`}</strong>{` (only removed).`}</p>\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nGlobal event properties have higher priority so in the merging process they will override custom properties with the same key.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"remove-global-event-properties\"\n    }}>{`Remove global event properties`}</h2>\n    <p>{`If you want to remove global property with a given key call:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.removeGlobalEventProperty(String propertyKey);\n      `,\n        kotlin: `\nSmartlook.removeGlobalEventProperty(propertyKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.removeGlobalEventProperty({key: string});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.removeGlobalEventProperty(SmartlookGlobalEventPropertyKey(key: string))\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.removeGlobalEventProperty(forName: String)\n`,\n        'objective-c': `\n+ (void)removeGlobalEventPropertyForName:(nonnull NSString *)name;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.removeGlobalEventProperty(String key)\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.RemoveGlobalEventProperty(string key);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.removeGlobalEventProperty(key);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Or you can remove all global event properties at once:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.removeAllGlobalEventProperties();\n      `,\n        kotlin: `\nSmartlook.removeAllGlobalEventProperties()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.removeAllGlobalEventProperties();\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.removeAllGlobalEventProperties()\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.clearGlobalEventProperties()\n`,\n        'objective-c': `\n+ (void)clearGlobalEventProperties;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.removeAllGlobalEventProperties()\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.RemoveAllGlobalEventProperties();\n`\n      },\n      react: {\n        javascript: `\nSmartlook.removeAllGlobalEventProperties();\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nGlobal event properties are stored until they are not removed or the app is uninstalled.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"event-tracking-modes\"\n    }}>{`Event tracking modes`}</h2>\n    <TextBlock visibleOn=\"android,ios,cordova,ionic\" mdxType=\"TextBlock\">{`\nSometimes it can be beneficial to disable automatically detected or all events due to security reasons. This can be done using one of the **event tracking modes**:\n`}</TextBlock>\n    <TextBlock visibleOn=\"flutter,unity,react\" mdxType=\"TextBlock\">{`\nThis functionality is not available yet.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n* **FULL_TRACKING** this a default state. SDK tracks all automatically detected events along with all user defined events.\n* **IGNORE_USER_INTERACTION** automatically detected events will not be tracked. User defined events are still enabled.\n* **NO_TRACKING** no analytic events are enabled.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\n* \\`fullTracking\\`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`ignoreUserInteractionEvents\\`: automatically detected events will not be tracked. User defined events are still enabled.\n* \\`noTracking\\`: no analytic events are enabled.\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova\" mdxType=\"TextBlock\">{`\n* \\`Smartlook.RenderingMode.FULL_TRACKING\\`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`Smartlook.RenderingMode.IGNORE_USER_INTERACTION\\`: automatically detected events will not be tracked. User defined events are still enabled.\n* \\`Smartlook.RenderingMode.NO_TRACKING\\`: no analytic events are enabled.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\n* \\`SmartlookEventTrackingMode.FULL_TRACKING()\\`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`SmartlookEventTrackingMode.IGNORE_USER_INTERACTION()\\`: automatically detected events will not be tracked. User defined events are still enabled.\n* \\`SmartlookEventTrackingMode.NO_TRACKING()\\`: no analytic events are enabled.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,cordova,ionic\" mdxType=\"TextBlock\">{`\nEvent tracking mode can changed **anytime** during the application run:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setEventTrackingMode(@EventTrackingMode String eventTrackingMode);\n      `,\n        kotlin: `\nSmartlook.setEventTrackingMode(@EventTrackingMode eventTrackingMode: String);\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setEventTrackingMode({eventTrackingMode: Smartlook.EventTrackingMode});\n      `\n      },\n      ionic: {\n        typescript: `\nSmartlook.setEventTrackingMode(eventTrackingMode: SmartlookEventTrackingMode);\n      `\n      },\n      ios: {\n        swift: `\nstatic let fullTracking: Smartlook.EventTrackingMode\nstatic let ignoreUserInteractionEvents: Smartlook.EventTrackingMode\nstatic let noTracking: Smartlook.EventTrackingMode\n  \nclass func setEventTrackingMode(to eventTrackingMode: Smartlook.EventTrackingMode)\nclass func currentEventTrackingMode() -> Smartlook.EventTrackingMode\n`,\n        'objective-c': `\nSLEventTrackingMode const SLEventTrackingModeFullTracking;\nSLEventTrackingMode const SLEventTrackingModeIgnoreUserInteractionEvents;\nSLEventTrackingMode const SLEventTrackingModeNoTracking;\n  \n+ (void)setEventTrackingModeTo:(nonnull SLEventTrackingMode)eventTrackingMode;\n+ (nonnull SLEventTrackingMode)currentEventTrackingMode;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    ionic: {\n      typescript: \\`\nSmartlook.setEventTrackingMode(SmartlookEventTrackingMode.FULL_TRACKING());\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android,ios,cordova,ionic\" mdxType=\"TextBlock\">{`\nTake a look at [pin code keyboard sample](/cookbooks/secure_custom_keyboard), demonstrating usage of analytic event modes.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,cordova,ionic\" mdxType=\"TextBlock\">{`\n# Rendering\nSDK can use different methods of capturing screen image data. We call these **rendering modes**.\n## Set rendering mode\n`}</TextBlock>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`NATIVE`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`WIREFRAME`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`NO_RENDERING`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}><img src={native_rendering_mode} /></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}><img src={wireframe_rendering_mode} /></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}><img src={no_rendering_mode} /></td>\n        </tr>\n      </tbody>\n    </table>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nYou can change rendering mode on SDK setup using builder:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios,cordova,ionic\" mdxType=\"TextBlock\">{`\nRendering mode can be set on SDK setup, e.g.:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(@RenderingMode String renderingMode);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `,\n        kotlin: `\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(@RenderingMode String renderingMode)\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build())\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setupAndStartRecording({smartlookAPIKey: string, renderingMode: Smartlook.RenderingMode});\n      `\n      },\n      ionic: {\n        typescript: `\nvar builder = new SmartlookSetupConfigBuilder(smartlookAPIKey: string)\n        .renderingMode(renderingMode: SmartlookRenderingMode);\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.setup(key: YOUR_API_KEY, options: [.renderingMode: Smartlook.RenderingMode.wireframe]);\n`,\n        'objective-c': `\n[Smartlook setupWithKey:@\"YOUR_API_KEY\" options:@{ SLSetupOptionRenderingModeOptionsKey: SLRenderingModeOptionBlueprintWireframe }];\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios,cordova,ionic\" mdxType=\"TextBlock\">{`\nOr at anytime during application run using:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(@RenderingMode String renderingMode);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(@RenderingMode renderingMode: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setRenderingMode(renderingMode: SmartlookRenderingMode);\n      `\n      },\n      ios: {\n        swift: `\nclass func setRenderingMode(to renderingMode: Smartlook.RenderingMode)\n`,\n        'objective-c': `\n+ (void)setRenderingModeTo:(nonnull SLRenderingMode)renderingMode;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setRenderingMode(SmartlookRenderingMode renderingMode);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType renderingMode);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.SetRenderingMode(\"native\"/\"no_rendering\"/\"wireframe\");\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    ionic: {\n      typescript: \\`\nSmartlook.setRenderingMode(SmartlookRenderingMode.NATIVE());\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,cordova,ionic\" mdxType=\"TextBlock\">{`\nRendering modes available:\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n* \\`RenderingMode.NATIVE\\`\n* \\`RenderingMode.WIREFRAME\\`\n* \\`RenderingMode.NO_RENDERING\\`\n`}</TextBlock>\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nSmartlook.RenderingMode.native\nSmartlook.RenderingMode.wireframe\nSmartlook.RenderingMode.noRendering\n`,\n        'objective-c': `\nSLRenderingMode const SLRenderingModeNative;\nSLRenderingMode const SLRenderingModeWireframe;\nSLRenderingMode const SLRenderingModeNoRendering;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"cordova\" mdxType=\"TextBlock\">{`\n* \\`Smartlook.RenderingMode.NATIVE\\`\n* \\`Smartlook.RenderingMode.NO_RENDERING\\`\n`}</TextBlock>\n    <TextBlock visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\n* \\`SmartlookRenderingMode.NATIVE()\\`\n* \\`SmartlookRenderingMode.NO_RENDERING()\\`\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android,ios,cordova,ionic\" mdxType=\"TextBlock\">{`\n\\`NO_RENDERING\\` mode does not record any screen data, this is beneficial on screens that include sensitive data, [read more](#no-rendering).\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\n## Rendering mode option\n\\`WIREFRAME\\` rendering mode can be further configured by \\`renderingModeOption\\`.\n\\n\nRendering mode option can be set on setup:\n`}</TextBlock>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`WIREFRAME`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`BLUEPRINT`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`ICON_BLUEPRINT`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}><img src={wireframe_rendering_mode} /></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}><img src={blueprint_rendering_mode} /></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}><img src={icon_blueprint_rendering_mode} /></td>\n        </tr>\n      </tbody>\n    </table>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(@RenderingModeOption String renderingModeOption);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `,\n        kotlin: `\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(@RenderingModeOption renderingModeOption: String);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n        `\n      },\n      ios: {\n        swift: `\nclass func  Smartlook.setup(key: String,\n                        options: [\n                          .renderingMode:Smartlook.RenderingMode,\n                          .renderingModeOption:Smartlook.RenderingModeOption\n                        ])\n          `,\n        'objective-c': `\n+(void)setupWithKey:(nonnull NSString *)key \n            options:@{\n              SLSetupOptionRenderingModeKey:SLRenderingMode,\n              SLSetupOptionRenderingModeOptionsKey:SLRenderingModeOption\n            };\n        `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nOr at anytime during application run using:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, @RenderingModeOption String renderingModeOption);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, @RenderingModeOption renderingModeOption: String)\n      `\n      },\n      ios: {\n        swift: `\nclass func setRenderingMode(to renderingMode: Smartlook.RenderingMode, option renderingModeOption: Smartlook.RenderingModeOption?)\n`,\n        'objective-c': `\n+ (void)setRenderingModeTo:(nonnull SLRenderingMode)renderingMode withOption:(nullable SLRenderingModeOption)renderingModeOption\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nRendering mode options for \\`WIREFRAME\\` rendering mode:\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n* \\`RenderingMode.WIREFRAME\\`\n* \\`RenderingMode.BLUEPRINT\\`\n* \\`RenderingMode.ICON_BLUEPRINT\\`\n`}</TextBlock>\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nSmartlook.RenderingModeOption.none\nSmartlook.RenderingModeOption.colorWireframe\nSmartlook.RenderingModeOption.blueprintWireframe\nSmartlook.RenderingModeOption.iconBlueprintWireframe\n`,\n        'objective-c': `\nSLRenderingModeOption const SLRenderingModeOptionNone;\nSLRenderingModeOption const SLRenderingModeOptionColorWireframe;\nSLRenderingModeOption const SLRenderingModeOptionBlueprintWireframe;\nSLRenderingModeOption const SLRenderingModeOptionIconBlueprintWireframe;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n# Network intercepting\nYou can track your apps' HTTP traffic using the network inceptor provided by the SDK. This feature is available to you if you are using **OkHttp** for your HTTP/REST communication.\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf you are using another HTTP library that allows intercepting, please feel free to submit a feature request on our github.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n## OkHttp interceptor\nIf you are using \\`OkHttp\\` you can add Smartlook interceptor as a another \\`NetworkInterceptor\\` when creating a \\`OkHttpClient\\` like this:\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nOkHttpClient client = new OkHttpClient.Builder()\n    .addNetworkInterceptor(new SmartlookOkHttpInterceptor())\n    .build();\n      \\`,\n      kotlin: \\`\nval client = OkHttpClient.Builder()\n    .addNetworkInterceptor(SmartlookOkHttpInterceptor())\n    .build()\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nWe will **not read or send out any body data**, we are reading and sending only these request metadata:\n* **Request url** that can be stripped of any sensitive data -> read more.\n* **Http method** used for this request.\n* **Request headers** that can be filtered out so they do not leak any sensitive data.\n* **Response headers** that are filtered out so they do not leak any sensitive data.\n* **Protocol** negotiated by this connection.\n* **Duration** between request and response/failure.\n* **Request status** stating if the request was successful or eventually how it failed, can be one of:\n  * Ok\n  * Error\n  * Abort\n  * Timeout\n* **Status code** of http response.\n* Flag stating if response was received from **cache**.\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nAll intercepted requests can be displayed in **dev tools** on every recording.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n### Url masks\nYou can hide sensitive parts of request URLs using \\`UrlMask\\`:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew UrlMask(String regex);\nnew UrlMask(String regex, String replaceWith);\n      `,\n        kotlin: `\nUrlMask(regex: String)\nUrlMask(regex: String, replaceWith: String)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf you don't specify \\`replaceWith\\` \\`String\\` explicitly the default replace \\`String\\` is used.\nYou need to initialize \\`SmartlookOkHttpInterceptor\\` using \\`Builder\\` to define used \\`UrlMask\\`s:\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nYou can add \\`UrlMask\\`s using \\`SmartlookOkHttpInterceptor.Builder\\`:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew SmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(UrlMask urlMask)\n                .build();\n      `,\n        kotlin: `\nSmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(urlMask: UrlMask)\n                .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nWe are intercepting request with URL containing sensitive query named \\`secret\\`:\n\\n\n\\`\\`\\`https://example.com/page?secret=password&second=query\\`\\`\\`\n\\n\nThe content of sensitive query can be hidden for intercepting using \\`UrlMask\\`:\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlookOkHttpInterceptor interceptor = new SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(new UrlMask(\"(name=)[^&]+(&*)\", \"$1&lt;sensitive&gt;$2\"))\n        .build();\\\\n\nOkHttpClient client = new OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build();\n      \\`,\n      kotlin: \\`\nval interceptor = SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(UrlMask(\"(name=)[^&]+(&*)\", \"$1&lt;sensitive&gt;$2\"))\n        .build()\\\\n\nval client = OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build()\n      \\`,\n    },\n  }}\n/>\n\\n\nWith above shown \\`UrlMask\\` intercepted request will have following URL stored:\n\\n\n\\`\\`\\`https://example.com/page?secret=&lt;sensitive&gt;&second=query\\`\\`\\`\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n### Sensitive headers\n\\n\nIntercepted headers can contain sensitive data, so they need to be filtered out by their name. This can be done using \\`sensitiveHeaderNameRegexps\\`, this list of sensitive header names contains these regular expressions by default:\n* \\`\".*csrf.*\"\\`\n* \\`\".*token.*\"\\`\n* \\`\".*auth.*\"\\`\n* \\`\".*key.*\"\\`\n* \\`\".*cookie.*\"\\`\n\\n\nYou can define your custom list of sensitive header name regular expressions:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew SmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(String headerRegex)\n        .build();\n      `,\n        kotlin: `\nSmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(headerRegex: String)\n        .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"important\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nWhen you add at least one sensitive header name regex, default ones (shown above) are not going to be used. \n`}</TextBlock>\n    <h1 {...{\n      \"id\": \"utility-methods\"\n    }}>{`Utility methods`}</h1>\n    <TextBlock visibleOn=\"android,cordova,ionic,flutter,unity,react\" mdxType=\"TextBlock\">{`\n## Instal referrer\nWhen your application is installed from the **Google Play Store** Smartlook SDK **automatically** tracks install referrer.\n\\n\nYou can also set your custom referrer using:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setReferrer(String referrer, String source);\n      `,\n        kotlin: `\nSmartlook.setReferrer(referrer: String, source: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setReferrer({referrer: string, source: string});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setReferrer(new SmartlookReferrer(referrer: string, source: string));\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setReferrer(String referrer, String source);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetReferrer(string referrer, string source);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.setReferrer(\"referrer\", \"source\");\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nReferrer value and source of installation is stored per visitor and can be viewed in Dashboard.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"dashboard-session-url\"\n    }}>{`Dashboard session URL`}</h2>\n    <p>{`You can obtain URL leading to Smartlook Dashboard for currently recorded session:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.getDashboardSessionUrl(boolean withCurrentTimestamp);\n      `,\n        kotlin: `\nSmartlook.getDashboardSessionUrl(withCurrentTimestamp: Boolean)\n      `\n      },\n      cordova: {\n        javascript: `\n Smartlook.getDashboardSessionUrl({withCurrentTimestamp: boolean}, successCallback: function(dashboardSessionUrl: string));\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.getDashboardSessionUrl(new SmartlookDashboardSessionUrl(withCurrentTimestamp: boolean)): Promise<string>\n      `\n      },\n      ios: {\n        swift: `\nclass func getDashboardSessionURL(withCurrentTimestamp withTimestamp: Bool) -> URL?\n`,\n        'objective-c': `\n+ (nullable NSURL *)getDashboardSessionURLWithCurrentTimestamp:(BOOL)withTimestamp;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.getDashboardSessionUrl(bool withCurrentTimestamp);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.GetDashboardSessionUrl(bool withCurrentTimestamp);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.getDashboardSessionUrl(withCurrentTimestamp);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    cordova: {\n      javascript: \\`\n Smartlook.getDashboardSessionUrl(\n  {withCurrentTimestamp: true},\n  function (dashboardSessionUrl) {\n    TextBlock('Dashboard session URL: ' + dashboardSessionUrl);\n  }\n)\n      \\`,\n    },\n    ionic: {\n      typescript: \\`\nsmartlook.getDashboardSessionUrl(new SmartlookDashboardSessionUrl(false))).then((dashboardSessionUrl) => {\n  TextBlock(dashboardSessionUrl)\n});\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <p>{`If `}<inlineCode parentName=\"p\">{`withCurrentTimestamp`}</inlineCode>{` is set to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` link will include information about current recording timestamp.\nThis will ensure that the player will start playing the session at the moment when `}<inlineCode parentName=\"p\">{`getDashboardSessionUrl`}</inlineCode>{` was called.`}</p>\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nThis URL can be opened only by someone who has access to your dashboard. This is **not a public shareable link**.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"dashboard-visitor-url\"\n    }}>{`Dashboard visitor URL`}</h2>\n    <p>{`You can obtain URL leading to Smartlook Dashboard for currently recorded visitor:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.getDashboardVisitorUrl();\n      `,\n        kotlin: `\nSmartlook.getDashboardVisitorUrl()\n      `\n      },\n      cordova: {\n        javascript: `\n Smartlook.getDashboardVisitorUrl(successCallback: function(dashboardSessionUrl: string));\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.getDashboardVisitorUrl(): Promise<string>\n      `\n      },\n      ios: {\n        swift: `\nclass func getDashboardVisitorURL() -> URL?`,\n        'objective-c': `\n+ (nullable NSURL *)getDashboardVisitorURL;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.getDashboardVisitorUrl();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.GetDashboardVisitorUrl();\n`\n      },\n      react: {\n        javascript: `\nSmartlook.getDashboardVisitorUrl();\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    cordova: {\n      javascript: \\`\n Smartlook.getDashboardVisitorUrl(\n  function(dashboardVisitorUrl) {\n    TextBlock('Dashboard visitor URL: ' + dashboardVisitorUrl);\n  }\n)\n      \\`,\n    },\n    ionic: {\n      typescript: \\`\nsmartlook.getDashboardVisitorUrl().then((dashboardVisitorUrl) => {\n  TextBlock(dashboardVisitorUrl)\n});\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nThis URL can be opened only by someone who has access to your dashboard. This is **not a public sharing link**.\n`}</TextBlock>\n    <h1 {...{\n      \"id\": \"integrations\"\n    }}>{`Integrations`}</h1>\n    <h2 {...{\n      \"id\": \"manual-integration\"\n    }}>{`Manual integration`}</h2>\n    <TextBlock visibleOn=\"android,cordova,ionic,flutter,unity,react\" mdxType=\"TextBlock\">{`\nYou can manually integrate Smartlook info various analytic frameworks using our \\`IntegrationListener\\`.\n\\n\nYou can register the listener like this:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nYou can register to dashboard URL change notifications to integrate them programmatically into other 3rd party analytics frameworks.\n\\n\nThe notifications are:\n`}</TextBlock>\n    <TextBlock kind=\"example\" mdxType=\"TextBlock\">{`\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        AnalyticsTool.trackSession(dashboardSessionUrl);\n    }\\\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        AnalyticsTool.trackVisitor(dashboardSessionUrl);\n    }\n});\n      \\`,\n      kotlin: \\`\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n      AnalyticsTool.trackSession(dashboardSessionUrl)\n    }\\\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n      AnalyticsTool.trackVisitor(dashboardSessionUrl)\n    }\n})\n      \\`,\n    },\n    cordova: {\n      javascript: \\`\n Smartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) { \n    TextBlock(\"Session: \" + dashboardSessionUrl); \n  },\n  onVisitorReady: function (dashboardVisitorUrl) { \n    TextBlock(\"Visitor: \" + dashboardVisitorUrl); \n  }\n});\n      \\`,\n    }, \n    ionic: {\n      typescript: \\`\n smartlook.registerIntegrationListener(new SmartlookIntegrationListener(\n  function (dashboardSessionUrl) { \n    alert(\"Session: \" + dashboardSessionUrl); \n  },\n  function (dashboardVisitorUrl) { \n    alert(\"Visitor: \" + dashboardVisitorUrl); \n  }\n));\n      \\`,\n    }, \n    ios: {\n      swift: \\`\npublic class let dashboardSessionURLChanged: NSNotification.Name\npublic class let dashboardVisitorURLChanged: NSNotification.Name\n      \\`,\n      'objective-c': \\`\nNSNotificationName const SLDashboardSessionURLChangedNotification;\nNSNotificationName const SLDashboardVisitorURLChangedNotification;\n      \\`,\n    },\n    flutter: {\n      dart: \\`\n    class CustomIntegrationListener implements IntegrationListener {\n  void onSessionReady(String dashboardSessionUrl) {\n    print(dashboardSessionUrl);\n  }\n\\\\n\n  void onVisitorReady(String dashboardVisitorUrl) {\n    print(dashboardVisitorUrl);\n  }\n}\n\\\\n\nSmartlook.registerIntegrationListener(new CustomIntegrationListener());\n      \\`,\n  },\n  unity: {\n    csharp: \\`\n    public class IntegrationListener : SmartlookUnity.IntegrationListener\n{\n    public override void onSessionReady(string dashboardSessionUrl)\n    {\n        Debug.Log(\"dashboardSessionUrl : \" + dashboardSessionUrl);\n    }\n\\\\n\n    public override void onVisitorReady(string dashboardVisitorUrl)\n    {\n        Debug.Log(\"dashboardVisitorUrl : \" + dashboardVisitorUrl);\n    }\n}\n\\\\n\nSmartlookUnity.Smartlook.RegisterIntegrationListener(new IntegrationListener());\n\\`,\n  },\n  react: {\n    javascript: \\`\nSmartlook.registerIntegrationListener(\n    (visitor) => {\n      console.log(\"app visitor\", visitorUrl)\n    },\n    (dash) => {\n      console.log(\"app dash\", dashboardUrl)\n    }\n  );\n\\`,\n  }\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,cordova,ionic\" mdxType=\"TextBlock\">{`\nIf you want to uregister the listener simply call:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterIntegrationListener();\n      `,\n        kotlin: `\nSmartlook.unregisterIntegrationListener()\n      `\n      },\n      cordova: {\n        javascript: `\n Smartlook.unregisterIntegrationListener();\n      `\n      },\n      ionic: {\n        typescript: `\n smartlook.unregisterIntegrationListener();\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"automatic-integrations\"\n    }}>{`Automatic integrations`}</h2>\n    <p>{`Smartlook SDK automatic integrations into mopst popular frameworks are in progress.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}