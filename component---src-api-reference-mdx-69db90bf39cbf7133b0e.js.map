{"version":3,"sources":["webpack:///../src/api_reference.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","snippets","android","java","kotlin","cordova","javascript","xml","html","ionic","isMDXComponent"],"mappings":"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","file":"component---src-api-reference-mdx-69db90bf39cbf7133b0e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nextgen-docs/nextgen-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBlock } from \"components/CodeBlock\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"lifecycle--recording\"\n    }}>{`Lifecycle & recording`}</h1>\n    <h2 {...{\n      \"id\": \"sdk-setup-on-application-start\"\n    }}>{`SDK setup (on application start)`}</h2>\n    <p>{`Smartlook SDK `}<strong parentName=\"p\">{`setup`}</strong>{` needs to be called only `}<strong parentName=\"p\">{`once during application lifetime`}</strong>{` and it should be called `}<strong parentName=\"p\">{`on application startup`}</strong>{`. There is `}<strong parentName=\"p\">{`no need to stop`}</strong>{` recording explicitly `}<strong parentName=\"p\">{`on application closure`}</strong>{`, SDK stops itself automatically.`}</p>\n    <p>{`Android\nThe best place to setup the SDK is in `}<inlineCode parentName=\"p\">{`onCreate()`}</inlineCode>{` method of your `}<inlineCode parentName=\"p\">{`Application`}</inlineCode>{` class:`}</p>\n    <p>{`Cordova\nThe best place to setup the SDK is in `}<inlineCode parentName=\"p\">{`onDeviceReady`}</inlineCode>{`:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nimport android.app.Application;\\n\npublic class MyCustomApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Smartlook.setupAndStartRecording(YOUR_API_KEY);\n    }\n}\n      `,\n        kotlin: `\nimport android.app.Application;\\n\nclass MyCustomApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        Smartlook.setupAndStartRecording(YOUR_API_KEY)\n    }\n}\n      `\n      },\n      cordova: {\n        javascript: `\nif(document.readyState === \"complete\") {\n  document.addEventListener(\"deviceready\", onDeviceReady, false); \n}\\n\nfunction onDeviceReady() {\n    Smartlook.setupAndStartRecording({smartlookAPIKey: \"YOUR_API_KEY\"});\n}\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Android\nTIP: If you need to setup SDK later than in Application class, typically if you are fetching your API key, please take a look here.`}</p>\n    <p>{`The easiest way of setting up the SDK is with `}<inlineCode parentName=\"p\">{`setupAndStart()`}</inlineCode>{` method:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setupAndStart(@NotNull String apiKey);\n      `,\n        kotlin: `\nSmartlook.setupAndStart(@NotNull apiKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setupAndStartRecording({smartlookAPIKey: \"YOUR_API_KEY\"});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`It will set the SDK up and also start the recording. If you want to start recording later you can just use:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setup(@NotNull String apiKey);\n      `,\n        kotlin: `\nSmartlook.setup(@NotNull apiKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setup({smartlookAPIKey: \"YOUR_API_KEY\"});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: You need to provide your Smartlook SDK API key which can be acquired in the Smartlook Dashboard.`}</p>\n    <p>{`And then when you want to start the recording call:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startRecording();\n      `,\n        kotlin: `\nSmartlook.startRecording()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startRecording();\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"setup-configuration\"\n    }}>{`Setup configuration`}</h3>\n    <p>{`Android,iOS ??\nSome recording parameters can be configured on setup:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Parameter`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default value`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`apiKey`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Unique 40 character key identifying your app (can be found in the dashboard).`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"\"`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`fps`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`no`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value you will override frame rate settings from Dashboard!`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`2`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`experimental`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`no`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Set this to true to enable some experimental features as TextureView/Maps/MapBox recording etc.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`activity`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`no`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Actual activity reference is required when setting the SDK outside of Application class. Full example shown here.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`null`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`renderingMode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`no`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Define the way SDK is going to capture screen image data. Full documentation here.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`RenderingMode.NATIVE`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`renderingModeOption`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`no`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Further customize rendering mode.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`null`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Full SDK setup configuration can be done with `}<inlineCode parentName=\"p\">{`SetupOptionsBuilder`}</inlineCode>{`, that lets you set any of above shown setup parameters with ease:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(@NotNull String apiKey)\n        .setFps(int fps)\n        .setExperimental(boolean experimental)\n        .setActivity(@NonNull Activity activity)\n        .setRenderingMode(@RenderingMode String renderingMode)\n        .setRenderingMode(@RenderingModeOption String renderingModeOption);\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `,\n        kotlin: `\nval builder = Smartlook.SetupOptionsBuilder(@NotNull apiKey: String)\n        .setFps(fps: Int)\n        .setExperimental(experimental: Boolean)\n        .setActivity(@NonNull activity: Activity)\n        .setRenderingMode(@RenderingMode renderingMode: String)\n        .setRenderingMode(@RenderingModeOption renderingModeOption: String)\\n\nSmartlook.setupAndStartRecording(builder.build())\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`TIP: You can replace the last line with `}<inlineCode parentName=\"p\">{`Smartlook.setup()`}</inlineCode>{` and start the recording later.`}</p>\n    <p>{`Cordova\nRecording `}<strong parentName=\"p\">{`framerate`}</strong>{` can be set during setup. Allowed values are from a range from 2 to 10 fps.`}</p>\n    <CodeBlock snippets={{\n      cordova: {\n        javascript: `\nSmartlook.setupAndStartRecording({smartlookAPIKey: \"YOUR_API_KEY\", fps: 2});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"start-and-stop-recording\"\n    }}>{`Start and stop recording`}</h2>\n    <p>{`Recording can be `}<strong parentName=\"p\">{`started`}</strong>{` or `}<strong parentName=\"p\">{`stopped`}</strong>{` at any time, the only requirement is that the SDK is set up (see setup).`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      `,\n        kotlin: `\nSmartlook.startRecording()\nSmartlook.stopRecording()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: You `}<strong parentName=\"p\">{`don't need to call`}</strong>{` `}<inlineCode parentName=\"p\">{`stopRecording()`}</inlineCode>{` on application closure. `}<strong parentName=\"p\">{`Recording is stopped automatically`}</strong>{`.`}</p>\n    <h2 {...{\n      \"id\": \"check-if-sdk-is-recording\"\n    }}>{`Check if SDK is recording`}</h2>\n    <p>{`If you are using `}<inlineCode parentName=\"p\">{`startRecording()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`stopRecording()`}</inlineCode>{` methods it might be handy to know if SDK is currently recording or not. Simply call:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.isRecording();\n      `,\n        kotlin: `\nSmartlook.isRecording()\n      `\n      },\n      cordova: {\n        javascript: `\ncordova.plugins.SmartlookPlugin.isRecording(\n    function(isRecording){\n        //check here \n    }\n)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h1 {...{\n      \"id\": \"sensitive-data-hiding\"\n    }}>{`Sensitive data hiding`}</h1>\n    <p>{`Android\nWhen using `}<strong parentName=\"p\">{`native`}</strong>{` rendering mode, `}<strong parentName=\"p\">{`SDK can record sensitive data in your application`}</strong>{`. You can configure recording using methods listed below so sensitive data is not recorded, or you can simply use one of `}<strong parentName=\"p\">{`Wireframe`}</strong>{` rendering mode that does not record sensitive data by default.`}</p>\n    <h2 {...{\n      \"id\": \"blacklisted-views\"\n    }}>{`Blacklisted views`}</h2>\n    <p>{`You can hide any view in the recording by marking it as a `}<strong parentName=\"p\">{`blacklisted`}</strong>{` view. `}</p>\n    <p>{`View can be marked as blacklisted by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerBlacklistedView(View view);\nSmartlook.registerBlacklistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.registerBlacklistedView(view: View)\nSmartlook.registerBlacklistedViews(views: List<View>)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Or can be tagged directly in xml layout file:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        xml: `\n<View>\n    <tag android:id=\"@id/smartlook_blacklisted_view\"/>\n</View>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`If view no longer needs to be blacklisted call:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterBlacklistedView(View view);\nSmartlook.unregisterBlacklistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.unregisterBlacklistedView(view: View)\nSmartlook.unregisterBlacklistedViews(views: List<View>)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`TIP: Blacklisted view is hidden on recording by single color rectangle. You can configure color of this rectangle by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setBlacklistedItemsColor(@ColorInt int color);\n      `,\n        kotlin: `\nSmartlook.setBlacklistedItemsColor(@ColorInt color: Int);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`This works for all blacklisted views and classes.`}</p>\n    <h2 {...{\n      \"id\": \"blacklisted-classes\"\n    }}>{`Blacklisted classes`}</h2>\n    <p>{`If you dont want to blacklist specific views and rather blacklist all views of given `}<inlineCode parentName=\"p\">{`Class`}</inlineCode>{`, use:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerBlacklistedClass(Class class);\nSmartlook.registerBlacklistedClasses(List<Class> classes);\n      `,\n        kotlin: `\nSmartlook.registerBlacklistedClass(class: Class)\nSmartlook.registerBlacklistedClasses(classes: List<Class>)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Note: Note that `}<inlineCode parentName=\"p\">{`EditText`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`WebView`}</inlineCode>{` are `}<strong parentName=\"p\">{`blacklisted by default`}</strong>{` and can be removed using `}<inlineCode parentName=\"p\">{`Smartlook.unregisterBlacklistedClass()`}</inlineCode>{`.`}</p>\n    <p>{`You can remove any of blacklisted classes:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterBlacklistedClass(Class class);\nSmartlook.unregisterBlacklistedClasses(List<Class> classes);\n      `,\n        kotlin: `\nSmartlook.unregisterBlacklistedClass(class: Class)\nSmartlook.unregisterBlacklistedClasses(classes: List<Class>)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"whitelisted-views\"\n    }}>{`Whitelisted views`}</h2>\n    <p>{`In case you need some view to be recorded even if its instance of a blacklisted class, you can whitelist it:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerWhitelistedView(View view);\nSmartlook.registerWhitelistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.registerWhitelistedView(view: View)\nSmartlook.registerWhitelistedViews(views: List<View>)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Or you can tag them directly in `}<inlineCode parentName=\"p\">{`xml`}</inlineCode>{` layout file:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        xml: `\n<View>\n    <tag android:id=\"@id/smartlook_whitelisted_view\"/>\n</View>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`You can remove view from whitelist by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterWhitelistedView(View view);\nSmartlook.unregisterWhitelistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.unregisterWhitelistedView(view: View)\nSmartlook.unregisterWhitelistedViews(views: List<View>)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Cordova, Ionic\nSome elements in your application cannot be recorded because of security (posibly GDPR) reasons.\nAll of theese can be marked and will be hidden on the recording.`}</p>\n    <p>{`NOTE: Sensitive elements are `}<strong parentName=\"p\">{`hidden locally`}</strong>{` on the device, no sentive data is transfered over network and stored in our dashboard.`}</p>\n    <h2 {...{\n      \"id\": \"hidden-elements\"\n    }}>{`Hidden elements`}</h2>\n    <p>{`Sensitive elements can be blacklisted by marking them with `}<inlineCode parentName=\"p\">{`.smartlook-hide`}</inlineCode>{` css class:`}</p>\n    <CodeBlock snippets={{\n      cordova: {\n        html: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      `\n      },\n      ionic: {\n        html: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: `}<strong parentName=\"p\">{`All inputs`}</strong>{` are `}<strong parentName=\"p\">{`hidden`}</strong>{` by default except for `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`submit`}</inlineCode>{` types.`}</p>\n    <h2 {...{\n      \"id\": \"shown-elements\"\n    }}>{`Shown elements`}</h2>\n    <p>{`If you need to record some input that is hidden by default you can mark it with `}<inlineCode parentName=\"p\">{`.smartlook-show`}</inlineCode>{` css class:`}</p>\n    <CodeBlock snippets={{\n      cordova: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      },\n      ionic: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"no-rendering\"\n    }}>{`No Rendering`}</h2>\n    <p>{`In case your whole screen consists of sensitive data you can tell SDK to not record any screen data. This can be done by switching into `}<inlineCode parentName=\"p\">{`NO_RENDERING`}</inlineCode>{` rendering mode:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NO_RENDERING})\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Android, iOS\nTIP: SDK provides rendering modes that hide sensitive information by simplifying the rendered screen for recording. This can be advantageous because you can see what is the user doing and be safe in sensitive data regard. You can read more about rendering modes here.`}</p>\n    <p>{`TIP: Some screens can leak sensitive data even through automatically detected touch events. You can read more about this issue here.`}</p>\n    <p>{`When your application is no longer displaying sensitive screen you can set your rendering mode to preferred variant:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(RenderingMode.NATIVE)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NATIVE})\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Android`}</p>\n    <h2 {...{\n      \"id\": \"webview-blacklistingwhitelisting\"\n    }}>{`WebView blacklisting/whitelisting`}</h2>\n    <p>{`If your application has some parts displayed using `}<inlineCode parentName=\"p\">{`WebView`}</inlineCode>{` and you want to record those parts you need to enable `}<inlineCode parentName=\"p\">{`WebView`}</inlineCode>{` recording by removing `}<inlineCode parentName=\"p\">{`WebView`}</inlineCode>{` from list of blacklisted classes:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterBlacklistedClass(WebView.class);\n      `,\n        kotlin: `\nSmartlook.registerBlacklistedClass(WebView::class.java)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Now that you are recording all `}<inlineCode parentName=\"p\">{`WebView`}</inlineCode>{`s please `}<strong parentName=\"p\">{`make sure that all sensitive elements`}</strong>{` on the displayed web page `}<strong parentName=\"p\">{`are hidden`}</strong>{`. This can be done by marking sensitive html elements with `}<inlineCode parentName=\"p\">{`.smartlook-hide`}</inlineCode>{` css class:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        html: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`All input inputs are hidden by default except for `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`submit`}</inlineCode>{` types. If you need to record some hidden inputs you can mark these views with `}<inlineCode parentName=\"p\">{`.smartlook-show`}</inlineCode>{` css class:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h1 {...{\n      \"id\": \"user-identification\"\n    }}>{`User Identification`}</h1>\n    <p>{`You can specify user identifier by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setUserIdentifier(@NonNull String identifier);\n      `,\n        kotlin: `\nSmartlook.setUserIdentifier(@NonNull identifier: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setUserIdentifier({identifier: \"sample_identifier\"})\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`TIP: You can then lookup identifiers in the Dashboard to find specific user’s recordings.`}</p>\n    <p>{`Android`}</p>\n    <h2 {...{\n      \"id\": \"user-properties\"\n    }}>{`User properties`}</h2>\n    <p>{`Additional user information such as `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{`, etc. can be set using `}<inlineCode parentName=\"p\">{`UserProperties`}</inlineCode>{` helper class and its methods:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nUserProperties userProperties = new UserProperties();\nuserProperties.putEmail(\"sample@email.com\");\nuserProperties.putName(\"John Doe\");\nSmartlook.setUserProperties(userProperties);\n      `,\n        kotlin: `\nval userProperties = UserProperties().apply {\n    putEmail(\"sample@email.com\")\n    putName(\"John Doe\")\n}\nSmartlook.setUserProperties(userProperties)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: If you set `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` property it will be displayed in the list of visitors in the Smartlook dashboard. Otherwise `}<inlineCode parentName=\"p\">{`identifier`}</inlineCode>{` is used.`}</p>\n    <p>{`If there is no helper method for the data you want to set to user properties use `}<inlineCode parentName=\"p\">{`put()`}</inlineCode>{` method that accepts combination of `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{`.`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nUserProperties userProperties = new UserProperties();\nuserProperties.put(\"key\", \"value\");\nSmartlook.setUserProperties(userProperties);\n      `,\n        kotlin: `\nval userProperties = UserProperties()\nuserProperties.put(\"key\", \"value\")\nSmartlook.setUserProperties(userProperties)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: All helper and `}<inlineCode parentName=\"p\">{`put()`}</inlineCode>{` method has optional parameter `}<inlineCode parentName=\"p\">{`immutable`}</inlineCode>{` if set to `}<strong parentName=\"p\">{`true`}</strong>{`, the value that has been set for the key is going to be immutable.\nThis means it cannot be set again (new value will `}<strong parentName=\"p\">{`not overrride`}</strong>{` the old one).`}</p>\n    <p>{`Cordova`}</p>\n    <p>{`todo`}</p>\n    <h1 {...{\n      \"id\": \"analytics\"\n    }}>{`Analytics`}</h1>\n    <p>{`Android, iOS\nSome analytic events are recorded out-of-box:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Activity/Fragment changes`}</li>\n      <li parentName=\"ul\">{`Focus changes`}</li>\n      <li parentName=\"ul\">{`Clicked views`}</li>\n      <li parentName=\"ul\">{`Application crashes`}</li>\n      <li parentName=\"ul\">{`For everything else you can use custom events.`}</li>\n    </ul>\n    <p>{`TIP: Names of some automatically detected events can be customized.`}</p>\n    <p>{`Cordova`}</p>\n    <p>{`On web based frameworks we are not able to autodetect all events like on native frameworks. With that said we are still able to detect Application crashes.\nFor everything else you need to use custom events.`}</p>\n    <h2 {...{\n      \"id\": \"custom-event\"\n    }}>{`Custom event`}</h2>\n    <p>{`You can track simple custom event by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackCustomEvent(@NonNull String eventName);\n      `,\n        kotlin: `\nSmartlook.trackCustomEvent(@NonNull eventName: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackCustomEvent({name: \"sample_event\"})\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Android\nAdditional data serialized as `}<inlineCode parentName=\"p\">{`JSONObject`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Bundle`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`String`}</inlineCode>{` with valid json format or key/value pair can be added to custom event:`}</p>\n    <p>{`Cordova\nAddition data passed as a `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` can be added to custom event:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackCustomEvent(@NonNull String eventName, JSONObject eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, Bundle eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, String validJsonString);\nSmartlook.trackCustomEvent(@NonNull String eventName, @NotNull String key, String value);\n      `,\n        kotlin: `\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: JSONObject);\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: Bundle);\nSmartlook.trackCustomEvent(@NonNull eventName: String, validJsonString: String);\nSmartlook.trackCustomEvent(@NonNull eventName: String, @NotNull key: String, value: String);\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackCustomEvent(\n    {name: \"sample_event\", eventProperties: {id: \"sample_id\", text: \"sample text\"}})\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: Event properties will effectively use only flat json object.\nThis means that if you pass json object that includes objects or arrays as a child elements these elements are goint to be ignored.`}</p>\n    <p>{`Android\nNOTE: If you struggle with serialization of your data take a look here.`}</p>\n    <h2 {...{\n      \"id\": \"navigation-event\"\n    }}>{`Navigation event`}</h2>\n    <p>{`You can track screen/navigation transitions manually by calling: `}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackNavigationEvent(@NotNull String name, @ViewState String viewState);\n      `,\n        kotlin: `\nSmartlook.trackNavigationEvent(@NotNull name: String, @ViewState viewState: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackNavigationEvent({name: \"sample_screen\", viewState: Smartlook.ViewState.START})\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`where `}<inlineCode parentName=\"p\">{`viewState`}</inlineCode>{` can be either `}<inlineCode parentName=\"p\">{`ViewState.START`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`ViewState.STOP`}</inlineCode>{`.`}</p>\n    <p>{`NOTE: You need to track navigation events manually, because web technology based apps typically consist of single activity.`}</p>\n    <p>{`Android\nYou can also explicitly tell the SDK if the navigation event happened between `}<inlineCode parentName=\"p\">{`Activities`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`Fragments`}</inlineCode>{`:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackNavigationEvent(@NotNull String name, @ViewType String type, @ViewState String viewState);\n      `,\n        kotlin: `\nSmartlook.trackNavigationEvent(@NotNull name: String, @ViewType type: String, @ViewState viewState: String)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`where `}<inlineCode parentName=\"p\">{`viewType`}</inlineCode>{` is one of `}<inlineCode parentName=\"p\">{`ViewType.ACTIVITY`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`ViewType.FRAGMENT`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"timed-event\"\n    }}>{`Timed event`}</h2>\n    <p>{`In case you want to measure the duration of any time-sensitive or long-running actions in the app (for example download/upload). You can call one of:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startTimedCustomEvent(@NotNull String eventName);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, JSONObject eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, Bundle eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.startTimedCustomEvent(@NotNull eventName: String)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: JSONObject)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: Bundle)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startTimedCustomEvent({name: \"sample_timed_event\", eventProperties: {sample: \"object\"}});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`This will not send out any event but returns a unique `}<inlineCode parentName=\"p\">{`eventId`}</inlineCode>{` that `}<strong parentName=\"p\">{`needs to be stored`}</strong>{` and its used to stop/cancel custom timed event.`}</p>\n    <p>{`To send out event with duration you need to call one of:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.stopTimedCustomEvent(@NotNull String eventId);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, JSONObject eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, Bundle eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: JSONObject)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: Bundle)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.stopTimedCustomEvent({eventId: \"event_id\", eventProperties: {sample: \"object\"}});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`with corresponding `}<inlineCode parentName=\"p\">{`eventId`}</inlineCode>{` obtained from startTimedCustomEvent.`}</p>\n    <p>{`NOTE: Properties set in start will be `}<strong parentName=\"p\">{`merged`}</strong>{` with properties set in stop/cancel. Properties from stop/cancel have higher priority and will rewrite conflicting properties from start.`}</p>\n    <p>{`In case given action failed you can call `}<inlineCode parentName=\"p\">{`cancelTimedCustomEvent()`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`stopTimedCustomEvent()`}</inlineCode>{` and provide a `}<strong parentName=\"p\">{`reason`}</strong>{` of failure:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, JSONObject eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, Bundle eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: JSONObject)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: Bundle)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.cancelTimedCustomEvent({eventId: \"event_id\", reason: \"cancel reason\" eventProperties: {sample: \"object\"}});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`EXAMPLE: Typical use of timed event might look like this:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nString eventID = Smartlook.startTimedCustomEvent(\"duration_event\");\nThread.sleep(1000); //long running operation\nSmartlook.stopTimedCustomEvent(eventId);\n      `,\n        kotlin: `\nval eventID = Smartlook.startTimedCustomEvent(\"duration_event\")\nThread.sleep(1000) //long running operation\nSmartlook.stopTimedCustomEvent(eventId)\n      `\n      },\n      cordova: {\n        javascript: `\nvar eventID = Smartlook.startTimedCustomEvent({name: \"duration_event\"});\nsetTimeout(function() {\n    Smartlook.stopTimedCustomEvent({eventId: eventId})\n}, 1000);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`In this case `}<inlineCode parentName=\"p\">{`duration_event`}</inlineCode>{` will have duration property set to circa 1000ms.`}</p>\n    <p>{`Android`}</p>\n    <h2 {...{\n      \"id\": \"customize-automatic-event-detection\"\n    }}>{`Customize automatic event detection`}</h2>\n    <p>{`For some automatically detected events SDK tries to figure out the name from application context:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`click event`}</strong>{` - Event name consists of `}<inlineCode parentName=\"li\">{`Activity`}</inlineCode>{` name, `}<inlineCode parentName=\"li\">{`View`}</inlineCode>{` class (Button, etc.) and `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`navigation event`}</strong>{` - Event name is set as `}<inlineCode parentName=\"li\">{`Activity`}</inlineCode>{`/`}<inlineCode parentName=\"li\">{`Fragment`}</inlineCode>{` name.`}</li>\n    </ul>\n    <p>{`But sometimes it's impossible to name an event with an easy to read and descriptive name. Because of this SDK provides you with an option to personalize event names.`}</p>\n    <h3 {...{\n      \"id\": \"name-click-events\"\n    }}>{`Name click events`}</h3>\n    <p>{`So a click on a given view has a custom event name instead of id it can be tagged directly in the XML layout file:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        xml: `\n<View>\n    <tag android:id=\"@id/smartlook_custom_name\" android:value=\"custom_name\"/>\n</View>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: If View has `}<inlineCode parentName=\"p\">{`smartlook_custom_name`}</inlineCode>{` set, clicking on this view will trigger an event with name consisting of `}<inlineCode parentName=\"p\">{`Activity`}</inlineCode>{` name, `}<inlineCode parentName=\"p\">{`View`}</inlineCode>{` class (`}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`, etc.) and `}<inlineCode parentName=\"p\">{`smartlook_custom_name`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"name-navigation-events\"\n    }}>{`Name navigation events`}</h3>\n    <p>{`Custom names for navigation events can be set in two different ways. `}<inlineCode parentName=\"p\">{`Activity`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`Fragment`}</inlineCode>{` can implement `}<inlineCode parentName=\"p\">{`SmartlookNamedController`}</inlineCode>{` interface:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\npublic class SettingsActivity extends AppCompatActivity implements SmartlookNamedController {\n    @NotNull\n    @Override\n    public String getCustomName() {\n        return \"custom_activity_name\";\n    }\n}\n      `,\n        kotlin: `\nclass SettingsActivity : AppCompatActivity(), SmartlookNamedController {\n    @NotNull\n    override fun getCustomName(): String {\n        return \"custom_activity_name\";\n    }\n}\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Or `}<inlineCode parentName=\"p\">{`Activity`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`Fragment`}</inlineCode>{` root view can be tagged directly in `}<inlineCode parentName=\"p\">{`XML`}</inlineCode>{` layout file:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        xml: `\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<View>\n\t<tag android:id=\"@id/smartlook_custom_controller_name\" android:value=\"custom_name\"/>\\n\n\t<!-- child views -->\n</View>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"global-event-properties\"\n    }}>{`Global event properties`}</h2>\n    <p>{`SDK lets you set data that will be attached to every event. We call these `}<strong parentName=\"p\">{`global event properties`}</strong>{`.\nYou can set global event properties:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setGlobalEventProperties(JSONObject globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(Bundle globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(String globalEventPropertiesJson, boolean immutable);\nSmartlook.setGlobalEventProperty(@NotNull String key, @NotNull String value, boolean immutable);\n      `,\n        kotlin: `\nSmartlook.setGlobalEventProperties(globalEventProperties: JSONObject, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventProperties: Bundle, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventPropertiesJson: String, immutable: Boolean)\nSmartlook.setGlobalEventProperty(@NotNull key: String, @NotNull value: String, immutable: Boolean)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setGlobalEventProperties({globalEventProperties: {sample: \"property\"}, immutable: true/false});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Properties set to be `}<strong parentName=\"p\">{`immutable`}</strong>{` have the `}<strong parentName=\"p\">{`highest`}</strong>{` priority and once set they `}<strong parentName=\"p\">{`cannot be overridden`}</strong>{` (only removed).`}</p>\n    <p>{`NOTE: Global event properties have higher priority so in the merging process they will override custom properties with the same key.`}</p>\n    <h2 {...{\n      \"id\": \"remove-global-event-properties\"\n    }}>{`Remove global event properties`}</h2>\n    <p>{`If you want to remove global property with a given key call:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.removeGlobalEventProperty(String propertyKey);\n      `,\n        kotlin: `\nSmartlook.removeGlobalEventProperty(propertyKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.removeGlobalEventProperty({key: \"property_key\"});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Or you can remove all global event properties at once:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.removeAllGlobalEventProperties();\n      `,\n        kotlin: `\nSmartlook.removeAllGlobalEventProperties()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.removeAllGlobalEventProperties();\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: Global event properties are stored until they are not removed or the app is uninstalled.`}</p>\n    <h2 {...{\n      \"id\": \"event-tracking-modes\"\n    }}>{`Event tracking modes`}</h2>\n    <p>{`Sometimes it can be beneficial to disable automatically detected or all events due to security reasons. This can be done using one of the `}<strong parentName=\"p\">{`event tracking modes`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`FULL_TRACKING`}</strong>{` this a default state. SDK tracks all automatically detected events along with all user defined events.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`IGNORE_USER_INTERACTION`}</strong>{` automatically detected events will not be tracked. User defined events are still enabled.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`NO_TRACKING`}</strong>{` no analytic events are enabled.`}</li>\n    </ul>\n    <p>{`Event tracking mode can changed `}<strong parentName=\"p\">{`anytime`}</strong>{` during the application run:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setEventTrackingMode(@EventTrackingMode String eventTrackingMode);\n      `,\n        kotlin: `\nSmartlook.setEventTrackingMode(@EventTrackingMode eventTrackingMode: String);\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setEventTrackingMode({eventTrackingMode: Smartlook.EventTrackingMode.FULL_TRACKING});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`TIP: Take a look at pin code keyboard sample, demonstrating usage of analytic event modes.`}</p>\n    <h1 {...{\n      \"id\": \"rendering\"\n    }}>{`Rendering`}</h1>\n    <p>{`SDK can use different methods of capturing screen image data. We call these rendering modes. `}</p>\n    <h2 {...{\n      \"id\": \"set-rendering-mode\"\n    }}>{`Set rendering mode`}</h2>\n    <p>{`You can change rendering mode on SDK setup using builder:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(@RenderingMode String renderingMode);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `,\n        kotlin: `\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(@RenderingMode String renderingMode)\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build())\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setupAndStartRecording({smartlookAPIKey: \"YOUR_API_KEY\", renderingMode: Smartlook.RenderingMode.NATIVE});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Or at anytime during application run using:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(@RenderingMode String renderingMode);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(@RenderingMode renderingMode: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NATIVE});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Rendering modes available:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`RenderingMode.NATIVE`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`RenderingMode.WIREFRAME`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`RenderingMode.NO_RENDERING`}</inlineCode></li>\n    </ul>\n    <p>{`NOTE: `}<inlineCode parentName=\"p\">{`NO_RENDERING`}</inlineCode>{` mode does not record any screen data, this is beneficial on screens that include sensitive data, read more.`}</p>\n    <p>{`Android, iOS`}</p>\n    <h2 {...{\n      \"id\": \"rendering-mode-option\"\n    }}>{`Rendering mode option`}</h2>\n    <p><inlineCode parentName=\"p\">{`WIREFRAME`}</inlineCode>{` rendering mode can be further configured by `}<inlineCode parentName=\"p\">{`renderingModeOption`}</inlineCode>{`:`}</p>\n    <p>{`Rendering mode option can be set on setup:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(@RenderingModeOption String renderingModeOption);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `,\n        kotlin: `\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(@RenderingModeOption renderingModeOption: String);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Or at anytime during application run using:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, @RenderingModeOption String renderingModeOption);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, @RenderingModeOption renderingModeOption: String)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Rendering mode options for `}<inlineCode parentName=\"p\">{`WIREFRAME`}</inlineCode>{` rendering mode:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`RenderingMode.WIREFRAME`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`RenderingMode.BLUEPRINT`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`RenderingMode.ICON_BLUEPRINT`}</inlineCode></li>\n    </ul>\n    <h1 {...{\n      \"id\": \"crash-reporting\"\n    }}>{`Crash reporting`}</h1>\n    <p>{`todo `}</p>\n    <p>{`Android`}</p>\n    <h1 {...{\n      \"id\": \"network-intercepting\"\n    }}>{`Network intercepting`}</h1>\n    <p>{`You can track your apps' HTTP traffic using the network inceptor provided by the SDK. This feature is available to you if you are using `}<strong parentName=\"p\">{`OkHttp`}</strong>{` for your HTTP/REST communication. `}</p>\n    <p>{`NOTE: If you are using another HTTP library that allows intercepting, please feel free to submit a feature request here.`}</p>\n    <h2 {...{\n      \"id\": \"okhttp-interceptor\"\n    }}>{`OkHttp interceptor`}</h2>\n    <p>{`If you are using `}<inlineCode parentName=\"p\">{`OkHttp`}</inlineCode>{` you can add Smartlook interceptor as a another `}<inlineCode parentName=\"p\">{`NetworkInterceptor`}</inlineCode>{` when creating a `}<inlineCode parentName=\"p\">{`OkHttpClient`}</inlineCode>{` like this:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nOkHttpClient client = new OkHttpClient.Builder()\n    .addNetworkInterceptor(new SmartlookOkHttpInterceptor())\n    .build();\n      `,\n        kotlin: `\nval client = OkHttpClient.Builder()\n    .addNetworkInterceptor(SmartlookOkHttpInterceptor())\n    .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`We will `}<strong parentName=\"p\">{`not read or send out any body data`}</strong>{`, we are reading and sending only these request metadata:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Request url`}</strong>{` that can be stripped of any sensitive data -> read more.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Http method`}</strong>{` used for this request.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Request headers`}</strong>{` that can be filtered out so they do not leak any sensitive data.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Response headers`}</strong>{` that are filtered out so they do not leak any sensitive data.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Protocol`}</strong>{` negotiated by this connection.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Duration`}</strong>{` between request and response/failure.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Request status`}</strong>{` stating if the request was successful or eventually how it failed, can be one of:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Ok`}</li>\n          <li parentName=\"ul\">{`Error`}</li>\n          <li parentName=\"ul\">{`Abort`}</li>\n          <li parentName=\"ul\">{`Timeout`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Status code`}</strong>{` of http response.`}</li>\n      <li parentName=\"ul\">{`Flag stating if response was received from `}<strong parentName=\"li\">{`cache`}</strong>{`.`}</li>\n    </ul>\n    <p>{`NOTE: All intercepted requests can be displayed in `}<strong parentName=\"p\">{`dev tools`}</strong>{` on every recording.`}</p>\n    <h3 {...{\n      \"id\": \"url-masks\"\n    }}>{`Url masks`}</h3>\n    <p>{`You can hide sensitive parts of request URLs using `}<inlineCode parentName=\"p\">{`UrlMask`}</inlineCode>{`:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew UrlMask(String regex);\nnew UrlMask(String regex, String replaceWith);\n      `,\n        kotlin: `\nUrlMask(regex: String)\nUrlMask(regex: String, replaceWith: String)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: If you don't specify `}<inlineCode parentName=\"p\">{`replaceWith`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`String`}</inlineCode>{` explicitly the default replace `}<inlineCode parentName=\"p\">{`String`}</inlineCode>{` is used.`}</p>\n    <p>{`You need to initialize `}<inlineCode parentName=\"p\">{`SmartlookOkHttpInterceptor`}</inlineCode>{` using `}<inlineCode parentName=\"p\">{`Builder`}</inlineCode>{` to define used `}<inlineCode parentName=\"p\">{`UrlMask`}</inlineCode>{`s:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew SmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(UrlMask urlMask)\n                .build();\n      `,\n        kotlin: `\nSmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(urlMask: UrlMask)\n                .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`EXAMPLE: We are intercepting request with URL containing sensitive query named `}<inlineCode parentName=\"p\">{`secret`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`https://example.com/page?secret=password&second=query\n`}</code></pre>\n    <p>{`The content of sensitive query can be hidden for intercepting using `}<inlineCode parentName=\"p\">{`UrlMask`}</inlineCode>{`:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlookOkHttpInterceptor interceptor = new SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(new UrlMask(\"(name=)[^&]+(&*)\", \"$1<sensitive>$2\"))\n        .build();\\n\nOkHttpClient client = new OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build();\n      `,\n        kotlin: `\nval interceptor = SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(UrlMask(\"(name=)[^&]+(&*)\", \"$1<sensitive>$2\"))\n        .build()\\n\nval client = OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`With above shown `}<inlineCode parentName=\"p\">{`UrlMask`}</inlineCode>{` intercepted request will have following URL stored:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`https://example.com/page?secret=<sensitive>&second=query\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"sensitive-headers\"\n    }}>{`Sensitive headers`}</h3>\n    <p>{`Intercepted headers can contain sensitive data, so they need to be filtered out by their name. This can be done using `}<inlineCode parentName=\"p\">{`sensitiveHeaderNameRegexps`}</inlineCode>{`, this list of sensitive header names contains these regular expressions by default:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`“.*csrf.*”`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\".*token.*\"`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\".*auth.*\"`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`“.*key.*\"`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\".*cookie.*\"`}</inlineCode></li>\n    </ul>\n    <p>{`You can define your custom list of sensitive header name regular expressions:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew SmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(String headerRegex)\n        .build();\n      `,\n        kotlin: `\nSmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(headerRegex: String)\n        .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: When you add at least one sensitive header name regex default ones (shown above) are `}<strong parentName=\"p\">{`not going to be used`}</strong>{`. `}</p>\n    <h1 {...{\n      \"id\": \"utility-methods\"\n    }}>{`Utility methods`}</h1>\n    <h2 {...{\n      \"id\": \"instal-referrer\"\n    }}>{`Instal referrer`}</h2>\n    <p>{`When your application is installed from the `}<strong parentName=\"p\">{`Google Play Store`}</strong>{` Smartlook SDK `}<strong parentName=\"p\">{`automatically`}</strong>{` tracks install referrer.`}</p>\n    <p>{`You can also set your custom referrer using:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setReferrer(String referrer, String source);\n      `,\n        kotlin: `\nSmartlook.setReferrer(referrer: String, source: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setReferrer({referrer: \"sample referrer\", source: \"sample source\"});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: Referrer value and source of installation is stored per visitor and can be viewed in Dashboard.`}</p>\n    <h2 {...{\n      \"id\": \"sharable-session-url\"\n    }}>{`Sharable session URL`}</h2>\n    <p>{`URL leading to Smartlook Dashboard can be obtained for currently recorded session:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.getDashboardSessionUrl();\n      `,\n        kotlin: `\nSmartlook.getDashboardSessionUrl()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.getDashboardSessionUrl(\n    function(dasboardSessionUrl){ \\n\n    }\n);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`NOTE: This URL can be opened only by someone who has access to your dashboard. This is `}<strong parentName=\"p\">{`not a public sharing link`}</strong>{`.`}</p>\n    <h1 {...{\n      \"id\": \"integrations\"\n    }}>{`Integrations`}</h1>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}