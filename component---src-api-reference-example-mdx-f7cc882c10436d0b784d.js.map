{"version":3,"sources":["webpack:///../src/api-reference-example.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","snippets","android","java","kotlin","cordova","javascript","ios","swift","flutter","dart","unity","csharp","react","kind","visibleOn","isMDXComponent"],"mappings":"wgBAQO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,uGACA,qBAAG,sBAAQC,WAAW,KAAnB,0BACH,YAAC,IAAD,CAAWC,SAAU,CACnBC,QAAS,CACPC,KAAM,qZAONC,OAAQ,8ZAQVC,QAAS,CACPC,WAAY,8KAKdC,IAAK,CACHC,MAAO,8HAIP,oNAKFC,QAAS,CACPC,KAAM,yHAKRC,MAAO,CACLC,OAAQ,iNAMVC,MAAO,CACLP,WAAY,gFAKbP,QAAQ,cACX,qBAAG,sBAAQC,WAAW,KAAnB,gCACH,YAAC,IAAD,CAAWC,SAAU,CACnBC,QAAS,CACPC,KAAM,ugCAcNC,OAAQ,qhCAeVC,QAAS,CACPC,WAAY,qUAMdC,IAAK,CACHC,MAAO,iQAKP,+fAQFC,QAAS,CACPC,KAAM,oOAMRC,MAAO,CACLC,OAAQ,seASVC,MAAO,CACLP,WAAY,kOAMbP,QAAQ,cACX,YAAC,IAAD,CAAOe,KAAK,YAAYC,UAAU,wBAAwBhB,QAAQ,SAAlE,+LAIA,iBAAQ,CACN,GAAM,aADR,aAGA,+IACA,sBACE,kBAAIC,WAAW,MAAf,6EACA,kBAAIA,WAAW,MAAf,sHACA,kBAAIA,WAAW,MAAf,2GAAgI,kBAAIA,WAAW,MAAf,UAAhI,KACA,kBAAIA,WAAW,MAAf,uGAEF,6FACA,gHACA,YAAC,IAAD,CAAOc,KAAK,UAAUf,QAAQ,SAC5B,YAAC,IAAD,CAAWE,SAAU,CACnBC,QAAS,CACPC,KAAM,yEAGNC,OAAQ,2EAIVC,QAAS,CACPC,WAAY,0HAIdC,IAAK,CACHC,MAAO,oGAGP,mIAIFC,QAAS,CACPC,KAAM,uBAIRC,MAAO,CACLC,OAAQ,uBAIVC,MAAO,CACLP,WAAY,wBAIbP,QAAQ,eAEb,YAAC,IAAD,CAAOe,KAAK,OAAOC,UAAU,UAAUhB,QAAQ,SAA/C,qEAGA,mJACA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,qBAAnB,sIAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,oBAAwC,sBAAQA,WAAW,KAAnB,mBAAxC,6GAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,0CAA8D,sBAAQA,WAAW,KAAnB,6BAA9D,uFAAmN,sBAAQA,WAAW,KAAnB,UAAnN,gEAGJ,mGACA,YAAC,IAAD,CAAOc,KAAK,UAAUf,QAAQ,SAC5B,YAAC,IAAD,CAAWE,SAAU,CACnBC,QAAS,CACPC,KAAM,wKAKNC,OAAQ,mKAMVC,QAAS,CACPC,WAAY,8KAOdC,IAAK,CACHC,MAAO,seASP,siBAUFC,QAAS,CACPC,KAAM,uBAIRC,MAAO,CACLC,OAAQ,uBAIVC,MAAO,CACLP,WAAY,wBAIbP,QAAQ,eAEb,YAAC,IAAD,CAAOe,KAAK,YAAYf,QAAQ,SAAhC,yN,6MAOJH,EAAWoB,gBAAiB","file":"component---src-api-reference-example-mdx-f7cc882c10436d0b784d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nextgen-docs/nextgen-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Alert, Link, MD } from \"components\";\nimport { usePlatforms } from 'hooks';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"custom-events\"\n    }}>{`Custom Events`}</h2>\n    <p>{`To track app events programatically, Smartlook provides two groups of methods:`}</p>\n    <p><strong parentName=\"p\">{`Custom Events Methods`}</strong></p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackCustomEvent(@NonNull String eventName);\\n \nSmartlook.trackCustomEvent(@NonNull String eventName, JSONObject eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, Bundle eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, String validJsonString);\nSmartlook.trackCustomEvent(@NonNull String eventName, @NotNull String key, String value);\n      `,\n        kotlin: `\nSmartlook.trackCustomEvent(@NonNull eventName: String)\\n\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: JSONObject);\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: Bundle);\nSmartlook.trackCustomEvent(@NonNull eventName: String, validJsonString: String);\nSmartlook.trackCustomEvent(@NonNull eventName: String, @NotNull key: String, value: String);\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackCustomEvent({name: \"sample_event\"})\nSmartlook.trackCustomEvent( {name: \"sample_event\", eventProperties: {id: \"sample_id\", text: \"sample text\"}})\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.trackCustomEvent(name eventName: String)\nSmartlook.trackCustomEvent(name: String, props: [String : String]?)\n`,\n        'objective-c': `\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName;\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.trackCustomEvent(String eventName);\nSmartlook.trackCustomEvent(String eventName, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.TrackCustomEvent(string eventName);\\n\n//json string, obtained for example with JsonUtility.ToJson(param)\nSmartlookUnity.TrackCustomEvent(string eventName, string properties);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.trackCustomEvent(key);\nSmartlook.trackCustomEvent(key, map);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p><strong parentName=\"p\">{`Timed Custom Events Methods`}</strong></p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startTimedCustomEvent(@NotNull String eventName);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, JSONObject eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, Bundle eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, String eventPropertiesJson);\\n\nSmartlook.stopTimedCustomEvent(@NotNull String eventId);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, JSONObject eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, Bundle eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, String eventPropertiesJson);\\n\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, JSONObject eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, Bundle eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.startTimedCustomEvent(@NotNull eventName: String)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: JSONObject)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: Bundle)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventPropertiesJson: String)\\n\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: JSONObject)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: Bundle)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventPropertiesJson: String)\\n\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: JSONObject)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: Bundle)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startTimedCustomEvent({name: \"sample_timed_event\", eventProperties: {sample: \"object\"}});\nSmartlook.stopTimedCustomEvent({eventId: \"event_id\", eventProperties: {sample: \"object\"}});\nSmartlook.cancelTimedCustomEvent({eventId: \"event_id\", reason: \"cancel reason\" eventProperties: {sample: \"object\"}});\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.startTimedCustomEvent(name: String, props: [String : String]?) -> Any\nSmartlook.trackTimedCustomEvent(eventId: Any, props: [String : String]?)\nSmartlook.trackTimedCustomEventCancel(eventId: Any, reason: String?, props: [String : String]?)\n`,\n        'objective-c': `\n + (id _Nonnull)startTimedCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n // to track successfull events\n+ (void)trackTimedCustomEventWithEventId:(id _Nonnull)eventId props:(nullable NSDictionary<NSString*, NSString*>*)props;\n// to track event cancellation\n+ (void)trackTimedCustomEventCancelWithEventId:(id _Nonnull)eventId reason:(NSString *_Nullable)reason props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.startTimedCustomEvent(String eventName, [Object map = null]);\nSmartlook.stopTimedCustomEvent(String key, [Object map = null]);\nSmartlook.cancelTimedCustomEvent(String key, String reason, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StartTimedCustomEvent(string eventName);\nSmartlookUnity.Smartlook.StartTimedCustomEvent(string eventName, string properties)\nSmartlookUnity.Smartlook.StopTimedCustomEvent(string eventId);\nSmartlookUnity.Smartlook.StopTimedCustomEvent(string eventId, string properties);\nSmartlookUnity.Smartlook.CancelTimedCustomEvent(string eventId, string reason);\nSmartlookUnity.Smartlook.CancelTimedCustomEvent(string eventId, string reason, string properties);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.startTimedCustomEvent(\"sample_timed_event\", {prop: \"propValue\"});\nSmartlook.stopTimedCustomEvent(\"event_id\", {prop: \"propValue\"});\nSmartlook.stopTimedCustomEvent(\"event_id\", \"reason\", {prop: \"propValue\"});\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"important\" visibleOn=\"cordova,react,flutter\" mdxType=\"Alert\">\nEvent properties will effectively use only flat object. \nThis means that if you pass json object that includes objects or arrays as a child elements these elements are goint to be ignored.\n    </Alert>\n    <h2 {...{\n      \"id\": \"dicussion\"\n    }}>{`Dicussion`}</h2>\n    <p>{`There are several use-cases when automated event capturing by Smartlook may not be suficcient for detailed analytics: `}</p>\n    <ul>\n      <li parentName=\"ul\">{`On some platforms, automated events capturing is technically not possible`}</li>\n      <li parentName=\"ul\">{`Some parameters that make the event important for analytics can only be provided programatically by the app author`}</li>\n      <li parentName=\"ul\">{`Some events are not directly caused by user interaction with UI (i.e., detectable automatically as user `}<em parentName=\"li\">{`clicks`}</em>{`)`}</li>\n      <li parentName=\"ul\">{`Some events are result of a lenghty, oft assynchronous operation which duration is also important.`}</li>\n    </ul>\n    <p>{`For these use-cases, tracking events programatically could be handy.`}</p>\n    <p>{`In the common case, when the event has no duration, the method call is straigthforward:`}</p>\n    <Alert kind=\"example\" mdxType=\"Alert\"> \n      <CodeBlock snippets={{\n        android: {\n          java: `\nSmartlook.trackCustomEvent(\"CUSTOM_EVENT\", eventProperties);\n      `,\n          kotlin: `\nSmartlook.trackCustomEvent(\"CUSTOM_EVENT\", eventProperties:);\n      `\n        },\n        cordova: {\n          javascript: `\nSmartlook.trackCustomEvent( {name: \"sample_event\", eventProperties: {id: \"sample_id\", text: \"sample text\"}})\n      `\n        },\n        ios: {\n          swift: `\nSmartlook.trackCustomEvent(\"custom_event\", props: [ \"some_property\" : somePropertyValue ]);\\n\n`,\n          'objective-c': `\n[Smartlook trackCustomEventWithName:@\"duration_event\" props:@{ @\"some_property\" : somePropertyValue }];\n      `\n        },\n        flutter: {\n          dart: `\nan example here\n`\n        },\n        unity: {\n          csharp: `\nan example here\n`\n        },\n        react: {\n          javascript: `\nan example here\n`\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <Alert kind=\"note\" visibleOn=\"android\" mdxType=\"Alert\">\nIf you struggle with serialization of your data take a look here.\n    </Alert>\n    <p>{`When, however, the app want to track result of some leghty process, e.g., a result and a duration of a network call, then:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Start timed event`}</strong>{`: set its name and optional start properties, store the event reference returned by Smartlook. Nothing is tracked at this moment.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When event ends, `}<strong parentName=\"p\">{`track the event`}</strong>{`. Identify the event with the stored event reference. You can also provide additional properties to it. `}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Or, when you want to cancel the event, `}<strong parentName=\"p\">{`track the event canceling`}</strong>{`. Identify the event with the stored event reference. You can also provide optional `}<strong parentName=\"p\">{`reason`}</strong>{` for the canceling and other additional properties to it. `}</p>\n      </li>\n    </ul>\n    <p>{`By tracking or canceling the event its duration is recorded automatically.`}</p>\n    <Alert kind=\"example\" mdxType=\"Alert\"> \n      <CodeBlock snippets={{\n        android: {\n          java: `\nString eventID = Smartlook.startTimedCustomEvent(\"duration_event\");\nThread.sleep(1000); //long running operation\nSmartlook.stopTimedCustomEvent(eventId);\n      `,\n          kotlin: `\nval eventID = Smartlook.startTimedCustomEvent(\"duration_event\")\nThread.sleep(1000) //long running operation\nSmartlook.stopTimedCustomEvent(eventId)\n      `\n        },\n        cordova: {\n          javascript: `\nvar eventID = Smartlook.startTimedCustomEvent({name: \"duration_event\"});\nsetTimeout(function() {\nSmartlook.stopTimedCustomEvent({eventId: eventId})\n}, 1000);\n      `\n        },\n        ios: {\n          swift: `\n// start event, and store its reference\nlet eventRef = Smartlook.startTimedCustomEvent(\"duration_event\", props: [ \"some_property\" : somePropertyValue ]);\\n\n// some lenghty operation...\\n\n// event ends as expected\nSmartlook.trackTimedCustomEvent(eventRef, [ \"result\" : success ? \"success\" : \"failure\", \"some_result_property\" : someResultValue ]);\\n\n// opetation is cancelled, e.g. by user\nSmartlook.trackTimedCustomEventCancel(eventId: eventRef, reason: \"cancelled by user\")\n`,\n          'objective-c': `\n// start event, and store its reference\nid eventRef = [Smartlook startTimedCustomEventWithName:@\"duration_event\" props:@{ @\"some_property\" : somePropertyValue }];\n// some lenghty operation...\\n\n// event ends as expected\n[Smartlook trackTimedCustomEventWithEventId:eventRef props:@{ @\"result\" : success ? @\"success\" : @\"failure\", @\"some_result_property\" : someResultValue } ];\\n\n// opetation is cancelled, e.g. by user\n[Smartlook trackTimedCustomEventCancelWithEventId:eventRef reason:@\"cancelled by user\" props:nil];\n      `\n        },\n        flutter: {\n          dart: `\nan example here\n`\n        },\n        unity: {\n          csharp: `\nan example here\n`\n        },\n        react: {\n          javascript: `\nan example here\n`\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <Alert kind=\"important\" mdxType=\"Alert\">\nProperties set in start will be **merged** with properties set while tracking the event. Properties provided with the tracking method have higher priority and will rewrite conflicting strat event properties.\n    </Alert>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}