(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"7rZD":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return c}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var o=n("/FXl"),i=n("TjRS"),r=n("+8zC");n("NRsk"),n("aD51");function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/api_reference.mdx"}});var l={_frontmatter:s},d=i.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(o.b)(d,a({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"lifecycle--recording"},"Lifecycle & recording"),Object(o.b)("h2",{id:"sdk-setup-on-application-start"},"SDK setup (on application start)"),Object(o.b)("p",null,"Smartlook SDK ",Object(o.b)("strong",{parentName:"p"},"setup")," needs to be called only ",Object(o.b)("strong",{parentName:"p"},"once during application lifetime")," and it should be called ",Object(o.b)("strong",{parentName:"p"},"on application startup"),". There is ",Object(o.b)("strong",{parentName:"p"},"no need to stop")," recording explicitly ",Object(o.b)("strong",{parentName:"p"},"on application closure"),", SDK stops itself automatically."),Object(o.b)("p",null,"Cordova\nThe best place to setup the SDK is in ",Object(o.b)("inlineCode",{parentName:"p"},"onDeviceReady"),":"),Object(o.b)(r.f,{visibleOn:"ios",mdxType:"TextBlock"},"The best place to setup the SDK is in `didFinishLaunchingWithOptions` method of the `ApplicationDelegate`:"),Object(o.b)(r.c,{snippets:{android:{java:"\nimport android.app.Application;\n\npublic class MyCustomApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Smartlook.setupAndStartRecording(YOUR_API_KEY);\n    }\n}\n      ",kotlin:"\nimport android.app.Application;\n\nclass MyCustomApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        Smartlook.setupAndStartRecording(YOUR_API_KEY)\n    }\n}\n      "},cordova:{javascript:'\nif(document.readyState === "complete") {\n  document.addEventListener("deviceready", onDeviceReady, false);\n}\n\nfunction onDeviceReady() {\n    Smartlook.setupAndStartRecording({smartlookAPIKey: "YOUR_API_KEY"});\n}\n      '},ios:{swift:'\nimport Smartlook\n \nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n \n  Smartlook.setup(key: "YOUR_API_KEY")\n  Smartlook.startRecording()\n  \n  // other initialization stuff\n    \n  return true\n}\n      ',"objective-c":'\n#import <Smartlook/Smartlook.h>\n    \n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n        \n    [Smartlook setupWithKey: @"YOUR_API_KEY"];\n    [Smartlook startRecording];\n  \n    // other initialization stuff\n  \n    return YES;\n}\n      '}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"Android\nTIP: If you need to setup SDK later than in Application class, typically if you are fetching your API key, please take a look here."),Object(o.b)("p",null,"The easiest way of setting up the SDK is with ",Object(o.b)("inlineCode",{parentName:"p"},"setupAndStart()")," method:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.setupAndStart(@NotNull String apiKey);\n      ",kotlin:"\nSmartlook.setupAndStart(@NotNull apiKey: String)\n      "},cordova:{javascript:'\nSmartlook.setupAndStartRecording({smartlookAPIKey: "YOUR_API_KEY"});\n      '}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"It will set the SDK up and also start the recording. If you want to start recording later you can just use:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.setup(@NotNull String apiKey);\n      ",kotlin:"\nSmartlook.setup(@NotNull apiKey: String)\n      "},cordova:{javascript:'\nSmartlook.setup({smartlookAPIKey: "YOUR_API_KEY"});\n      '},ios:{swift:"\nclass func setup(withKey key: String)\n      ","objective-c":"\n+(void)setupWithKey:(nonnull NSString *)key;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: You need to provide your Smartlook SDK API key which can be acquired in the Smartlook Dashboard."),Object(o.b)("p",null,"And then when you want to start the recording call:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.startRecording();\n      ",kotlin:"\nSmartlook.startRecording()\n      "},cordova:{javascript:"\nSmartlook.startRecording();\n      "},ios:{swift:"\nclass func startRecording()\n      ","objective-c":"\n+ (void)startRecording;\n"}},mdxType:"CodeBlock"}),Object(o.b)("h3",{id:"setup-configuration"},"Setup configuration"),Object(o.b)("p",null,"Android,iOS ??\nSome recording parameters can be configured on setup:"),Object(o.b)(r.e,{visibleOn:"android",markup:'\n| Parameter           | Required | Description                                                                                                                                        | Default value        |\n|---------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|\n| apiKey              | yes      | Unique 40 character key identifying your app (can be found in the dashboard).                                                                      | ""                   |\n| fps                 | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value you will override frame rate settings from Dashboard! | 2                    |\n| experimental        | no       | Set this to true to enable some experimental features as TextureView/Maps/MapBox recording etc.                                                    | false                |\n| activity            | no       | Actual activity reference is required when setting the SDK outside of Application class. Full example shown here.                                  | null                 |\n| renderingMode       | no       | Define the way SDK is going to capture screen image data. Full documentation here.                                                                 | RenderingMode.NATIVE |\n| renderingModeOption | no       | Further customize rendering mode.                                                                                                                  | null                 |\n',mdxType:"MD"}),Object(o.b)(r.e,{visibleOn:"ios",markup:'\n\n\nThe following table describes all available optional parameters. Most of them can be also set by a dedicated method. See the respective documentation section for details.\n\n\nThe options dictionary keys are constants defined as members of `SetupOptionKey` enumeration.\n\n\n| Parameter            | Type                   | Default value | Description                                                                                                                                 \n|----------------------|------------------------|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| .enableCrashlytics   | bool                   | false         | Enables Firebase Crashlytics integration              |\n| .framerate           | int                    | 2             | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value you will override frame rate settings from Dashboard!   |\n| .useAdaptiveFramerate | bool                    | true        | By defaults, Smartlook adapts its recording framerate to the frequency of UI changes in order to lower its footprint in app performace. For details, see FIXME LINK -> <Link to="/conceptual/screen-recording-quality">Screen Recording Quality</Link>. |\n| .renderingMode       | RenderingMode          | native        | Define the way SDK is going to capture screen image data. Full documentation [here](#rendering).   |\n| .renderingModeOption | RenderingModeOption    | none          | Further customize rendering mode. Full documentation [here](#rendering).  |\n| .startNewSession     | bool                   | false         | Always start new session with Smartlook setup. Full documentation [FIXME LINK here]().  |\n| .startNewSessionAndUser | bool                | false         | Always start new session and reset user woth Smartlook setup. Full documentation [FIXME LINK shere]().  |\n',mdxType:"MD"}),Object(o.b)(r.e,{visobleOn:"android",markup:"\nFull SDK setup configuration can be done with `SetupOptionsBuilder`, that lets you set any of above shown setup parameters with ease:\n",mdxType:"MD"}),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nFull SDK setup configuration can be done with optional `setup` method parameter:\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(@NotNull String apiKey)\n        .setFps(int fps)\n        .setExperimental(boolean experimental)\n        .setActivity(@NonNull Activity activity)\n        .setRenderingMode(@RenderingMode String renderingMode)\n        .setRenderingMode(@RenderingModeOption String renderingModeOption);\n\nSmartlook.setupAndStartRecording(builder.build());\n      ",kotlin:"\nval builder = Smartlook.SetupOptionsBuilder(@NotNull apiKey: String)\n        .setFps(fps: Int)\n        .setExperimental(experimental: Boolean)\n        .setActivity(@NonNull activity: Activity)\n        .setRenderingMode(@RenderingMode renderingMode: String)\n        .setRenderingMode(@RenderingModeOption renderingModeOption: String)\n\nSmartlook.setupAndStartRecording(builder.build())\n      "},ios:{swift:"\nclass func setup(key: String, options: [Smartlook.SetupOptionKey : Any]? = nil)\n","objective-c":'\n+(void)setupWithKey:(nonnull NSString *)key options:(nullable NSDictionary<SLSetupOptionKey,id> *)options;\n    \n// values in the options dictionary must be objects, e.g.,\n[Smartlook setupWithKey:@"SOME_API_KEY" options:@{ SLSetupOptionFramerateKey: @3 }];\n      '}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"Android\nTIP: You can replace the last line with ",Object(o.b)("inlineCode",{parentName:"p"},"Smartlook.setup()")," and start the recording later."),Object(o.b)("p",null,"Cordova\nRecording ",Object(o.b)("strong",{parentName:"p"},"framerate")," can be set during setup. Allowed values are from a range from 2 to 10 fps."),Object(o.b)(r.c,{snippets:{cordova:{javascript:'\nSmartlook.setupAndStartRecording({smartlookAPIKey: "YOUR_API_KEY", fps: 2});\n      '}},mdxType:"CodeBlock"}),Object(o.b)("h2",{id:"start-and-stop-recording"},"Start and stop recording"),Object(o.b)("p",null,"Recording can be ",Object(o.b)("strong",{parentName:"p"},"started")," or ",Object(o.b)("strong",{parentName:"p"},"stopped")," at any time, the only requirement is that the SDK is set up (see setup)."),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      ",kotlin:"\nSmartlook.startRecording()\nSmartlook.stopRecording()\n      "},cordova:{javascript:"\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      "},ios:{swift:"\nclass func startRecording()\nclass func stopRecording()\n","objective-c":"\n+ (void)startRecording;\n+ (void)stopRecording;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: You ",Object(o.b)("strong",{parentName:"p"},"don't need to call")," ",Object(o.b)("inlineCode",{parentName:"p"},"stopRecording()")," on application closure. ",Object(o.b)("strong",{parentName:"p"},"Recording is stopped automatically"),"."),Object(o.b)("h2",{id:"check-if-sdk-is-recording"},"Check if SDK is recording"),Object(o.b)("p",null,"If you are using ",Object(o.b)("inlineCode",{parentName:"p"},"startRecording()")," and ",Object(o.b)("inlineCode",{parentName:"p"},"stopRecording()")," methods it might be handy to know if SDK is currently recording or not. Simply call:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.isRecording();\n      ",kotlin:"\nSmartlook.isRecording()\n      "},cordova:{javascript:"\ncordova.plugins.SmartlookPlugin.isRecording(\n    function(isRecording){\n        //check here\n    }\n)\n      "},ios:{swift:"\nclass func isRecording() -> Bool\n","objective-c":"\n+ (BOOL)isRecording;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("h1",{id:"sensitive-data-hiding"},"Sensitive data hiding"),Object(o.b)("p",null,"Android\nWhen using ",Object(o.b)("strong",{parentName:"p"},"native")," rendering mode, ",Object(o.b)("strong",{parentName:"p"},"SDK can record sensitive data in your application"),". You can configure recording using methods listed below so sensitive data is not recorded, or you can simply use one of ",Object(o.b)("strong",{parentName:"p"},"Wireframe")," rendering mode that does not record sensitive data by default."),Object(o.b)("h2",{id:"blacklisted-views"},"Blacklisted views"),Object(o.b)("p",null,"You can hide any view in the recording by marking it as a ",Object(o.b)("strong",{parentName:"p"},"blacklisted")," view."),Object(o.b)("p",null,"View can be marked as blacklisted by calling:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.registerBlacklistedView(View view);\nSmartlook.registerBlacklistedViews(List<View> views);\n      ",kotlin:"\nSmartlook.registerBlacklistedView(view: View)\nSmartlook.registerBlacklistedViews(views: List<View>)\n      "},ios:{swift:"\nclass func registerBlacklisted(object: Any)\n","objective-c":"\n+ (void)registerBlacklistedObject:(nonnull id)object;\n      "}},mdxType:"CodeBlock"}),Object(o.b)(r.a,{kind:"example",visibleOn:"ios",mdxType:"Alert"},Object(o.b)(r.c,{snippets:{ios:{swift:"\nSmartlook.registerBlacklisted(object: someView)\n","objective-c":"\n[Smartlook registerBlacklistedObject:self.someView];\n      "}},mdxType:"CodeBlock"})),Object(o.b)(r.f,{visibleOn:"android",mdxType:"TextBlock"},"Or can be tagged directly in xml layout file:"),Object(o.b)(r.f,{visibleOn:"ios",mdxType:"TextBlock"},"Or can be tagged directly by an UIView property added by Smartlook:"),Object(o.b)(r.c,{snippets:{android:{xml:'\n<View>\n    <tag android:id="@id/smartlook_blacklisted_view"/>\n</View>\n      '},ios:{swift:"\nvar slSensitive: Bool\n","objective-c":"\n@property (nonatomic, assign) IBInspectable BOOL slSensitive;\n      "}},mdxType:"CodeBlock"}),Object(o.b)(r.a,{kind:"example",visibleOn:"ios",mdxType:"Alert"},Object(o.b)(r.c,{snippets:{ios:{swift:"\nsomeView.slSensitive = true\n","objective-c":"\nself.someView.slSensitive = YES;\n      "}},mdxType:"CodeBlock"})),Object(o.b)("p",null,"If view no longer needs to be blacklisted call:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.unregisterBlacklistedView(View view);\nSmartlook.unregisterBlacklistedViews(List<View> views);\n      ",kotlin:"\nSmartlook.unregisterBlacklistedView(view: View)\nSmartlook.unregisterBlacklistedViews(views: List<View>)\n      "},ios:{swift:"\nclass func registerBlacklisted(object: Any)\n","objective-c":"\n+ (void)unregisterBlacklistedObject:(nonnull id)object\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"TIP: Blacklisted view is hidden on recording by single color rectangle. You can configure color of this rectangle by calling:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.setBlacklistedItemsColor(@ColorInt int color);\n      ",kotlin:"\nSmartlook.setBlacklistedItemsColor(@ColorInt color: Int);\n      "},ios:{swift:"\nclass func setBlacklistedItem(color: UIColor)\n","objective-c":"\n+ (void)setBlacklistedItemsColor:(nonnull UIColor *)color;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"This works for all blacklisted objects."),Object(o.b)("h2",{id:"blacklisted-classes"},"Blacklisted classes"),Object(o.b)(r.e,{visobleOn:"android",markup:"\nIf you dont want to blacklist specific views and rather blacklist all views of given `Class`, use:\n",mdxType:"MD"}),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nYou can also blacklist all instances of a **`UIView` subclass** or all `UIView` subclasses that conform some **protocol**:\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.registerBlacklistedClass(Class class);\nSmartlook.registerBlacklistedClasses(List<Class> classes);\n      ",kotlin:"\nSmartlook.registerBlacklistedClass(class: Class)\nSmartlook.registerBlacklistedClasses(classes: List<Class>)\n      "},ios:{swift:"\n// Note: the object can be UIView instance, UIView subclass or a Protocol,\n// see examples below\nclass func registerBlacklisted(object: Any)\n","objective-c":"\n// Note: the object can be UIView instance, UIView subclass or a Protocol \n// see examples below\n+ (void)registerBlacklistedObject:(nonnull id)object;\n      "}},mdxType:"CodeBlock"}),Object(o.b)(r.a,{kind:"example",visibleOn:"ios",mdxType:"Alert"},Object(o.b)(r.c,{snippets:{ios:{swift:"\n// Note: the object can be UIView instance, UIView subclass or a Protocol \nsomeView.slSensitive = true\nSmartlook.registerBlacklisted(object: someView)      \nSmartlook.registerBlacklisted(object: SensitiveViewClass.self)      \nSmartlook.registerBlacklisted(object: SensitiveProtocol.self)\n","objective-c":"\n// Note: the object can be UIView instance, UIView subclass or a Protocol \nself.someView.slSensitive = true\n[Smartlook registerBlacklistedObject:self.someView];          \n[Smartlook registerBlacklistedObject:SensitiveViewClass.class];          \n[Smartlook registerBlacklistedObject:@protocol(SensitiveProtocol)];\n      "}},mdxType:"CodeBlock"})),Object(o.b)(r.e,{visobleOn:"android",markup:"\nNote: Note that `EditText` and `WebView` are **blacklisted by default** and can be removed using `Smartlook.unregisterBlacklistedClass()`.\n \nYou can remove any of blacklisted classes:\n",mdxType:"MD"}),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nNote that for convenience, **some classes are blacklisted by default**: `UITextView`, `UITextField` and `WKWebView`.\n \nYou can remove any of the blacklisted objects:\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.unregisterBlacklistedClass(Class class);\nSmartlook.unregisterBlacklistedClasses(List<Class> classes);\n      ",kotlin:"\nSmartlook.unregisterBlacklistedClass(class: Class)\nSmartlook.unregisterBlacklistedClasses(classes: List<Class>)\n      "},ios:{swift:"\nclass func unregisterBlacklisted(object: Any)\n","objective-c":"\n+ (void)unregisterBlacklistedObject:(nonnull id)object\n      "}},mdxType:"CodeBlock"}),Object(o.b)("h2",{id:"whitelisted-views"},"Whitelisted views"),Object(o.b)("p",null,"¿",Object(o.b)("em",{parentName:"p"},"NOTE: let us perhaps consider a bit denser documentation of whitelisting (as the methods are equivalent of blacklistig, similar of how it is now in current iOS documentation? ",Object(o.b)("a",a({parentName:"em"},{href:"https://smartlook.github.io/docs/sdk/ios/#whitelisting"}),"https://smartlook.github.io/docs/sdk/ios/#whitelisting"),")"),"?"),Object(o.b)("p",null,"In case you need some view to be recorded even if its instance of a blacklisted class, you can whitelist it:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.registerWhitelistedView(View view);\nSmartlook.registerWhitelistedViews(List<View> views);\n      ",kotlin:"\nSmartlook.registerWhitelistedView(view: View)\nSmartlook.registerWhitelistedViews(views: List<View>)\n      "},ios:{swift:"\nclass func registerWhitelisted(object: Any)\n","objective-c":"\n+ (void)registerWhitelistedObject:(nonnull id)object;\n      "}},mdxType:"CodeBlock"}),Object(o.b)(r.e,{visibleOn:"android",markup:"\nOr you can tag them directly in `xml` layout file:",mdxType:"MD"}),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nOr can be tagged directly by an `UIView` property added by Smartlook:\n",mdxType:"MD"}),Object(o.b)(r.a,{kind:"example",visibleOn:"ios,android",mdxType:"Alert"},Object(o.b)(r.c,{snippets:{android:{xml:'\n<View>\n    <tag android:id="@id/smartlook_whitelisted_view"/>\n</View>\n      '},ios:{swift:"\nsomeView.slSensitive = false\n","objective-c":"\nself.someView.slSensitive = NO;\n      "}},mdxType:"CodeBlock"})),Object(o.b)("p",null,"You can remove view from whitelist by calling:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.unregisterWhitelistedView(View view);\nSmartlook.unregisterWhitelistedViews(List<View> views);\n      ",kotlin:"\nSmartlook.unregisterWhitelistedView(view: View)\nSmartlook.unregisterWhitelistedViews(views: List<View>)\n      "},ios:{swift:"\nSmartlook.unregisterWhitelisted(object: someView)\n","objective-c":"\n[Smartlook unregisterWhitelistedObject:someView];\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"Cordova, Ionic\nSome elements in your application cannot be recorded because of security (posibly GDPR) reasons.\nAll of theese can be marked and will be hidden on the recording."),Object(o.b)("p",null,"NOTE: Sensitive elements are ",Object(o.b)("strong",{parentName:"p"},"hidden locally")," on the device, no sentive data is transfered over network and stored in our dashboard."),Object(o.b)("h2",{id:"hidden-elements"},"Hidden elements"),Object(o.b)("p",null,"Sensitive elements can be blacklisted by marking them with ",Object(o.b)("inlineCode",{parentName:"p"},".smartlook-hide")," css class:"),Object(o.b)(r.c,{snippets:{cordova:{html:"\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      "},ionic:{html:"\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: ",Object(o.b)("strong",{parentName:"p"},"All inputs")," are ",Object(o.b)("strong",{parentName:"p"},"hidden")," by default except for ",Object(o.b)("inlineCode",{parentName:"p"},"button")," and ",Object(o.b)("inlineCode",{parentName:"p"},"submit")," types."),Object(o.b)("h2",{id:"shown-elements"},"Shown elements"),Object(o.b)("p",null,"If you need to record some input that is hidden by default you can mark it with ",Object(o.b)("inlineCode",{parentName:"p"},".smartlook-show")," css class:"),Object(o.b)(r.c,{snippets:{cordova:{html:"\n<input type=\"text\" class='smartlook-show'>\n      "},ionic:{html:"\n<input type=\"text\" class='smartlook-show'>\n      "}},mdxType:"CodeBlock"}),Object(o.b)("h2",{id:"no-rendering"},"No Rendering"),Object(o.b)("p",null,'In case your whole screen consists of sensitive data you can tell SDK to not record any screen data. This can be done by switching into "no‑rendering" rendering mode:'),Object(o.b)(r.a,{kind:"example",mdxType:"Alert"},Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n      ",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING)\n      "},cordova:{javascript:"\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NO_RENDERING})\n      "},ios:{swift:"\nSmartlook.setRenderingMode(to: .noRendering)\n","objective-c":"\n[Smartlook setRenderingModeTo:SLRenderingModeNoRendering];\n      "}},mdxType:"CodeBlock"})),Object(o.b)("p",null,"Android, iOS\nTIP: SDK provides rendering modes that hide sensitive information by simplifying the rendered screen for recording. This can be advantageous because you can see what is the user doing and be safe in sensitive data regard. You can read more about rendering modes here."),Object(o.b)("p",null,"TIP: Some screens can leak sensitive data even through automatically detected touch events. You can read more about this issue here."),Object(o.b)("p",null,"When your application is no longer displaying sensitive screen you can set your rendering mode to preferred variant:"),Object(o.b)(r.a,{kind:"example",visibleOn:"ios,android",mdxType:"Alert"},Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\n      ",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.NATIVE)\n      "},cordova:{javascript:"\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NATIVE})\n      "},ios:{swift:"\nSmartlook.setRenderingMode(to: .native)\n","objective-c":"\n[Smartlook setRenderingModeTo:SLRenderingModeNative];\n      "}},mdxType:"CodeBlock"})),Object(o.b)("p",null,"Android"),Object(o.b)("h2",{id:"webview-blacklistingwhitelisting"},"WebView blacklisting/whitelisting"),Object(o.b)(r.e,{visibleOn:"android",markup:"\nIf your application has some parts displayed using `WebView` and you want to record those parts you need to enable `WebView` recording by removing `WebView` from list of blacklisted classes:\n",mdxType:"MD"}),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nIf your application has some parts displayed using `WKWebView` and you want to record those parts you need to enable `WKWebView` recording by removing `WKWebView` from list of blacklisted classes:\n",mdxType:"MD"}),Object(o.b)(r.a,{kind:"note",visibleOn:"ios",mdxType:"Alert"},"`UIWebView` class is obsolete and no longer supported by Apple. Thus, its instances and their content are not specifically handled by Smartlook from the *sensitivity* point of view."),Object(o.b)(r.a,{kind:"example",visibleOn:"ios,android",mdxType:"Alert"},Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.unregisterBlacklistedClass(WebView.class);\n      ",kotlin:"\nSmartlook.registerBlacklistedClass(WebView::class.java)\n      "},ios:{swift:"\nSmartlook.unregisterBlacklisted(object: WKWebView.class)\n","objective-c":"\n[Smartlook unregisterBlacklistedObject:WKWebView.class];\n      "}},mdxType:"CodeBlock"})),Object(o.b)("p",null,"Now that you are recording all ",Object(o.b)("inlineCode",{parentName:"p"},"WebView"),"s please ",Object(o.b)("strong",{parentName:"p"},"make sure that all sensitive elements")," on the displayed web page ",Object(o.b)("strong",{parentName:"p"},"are hidden"),". This can be done by marking sensitive html elements with ",Object(o.b)("inlineCode",{parentName:"p"},".smartlook-hide")," css class:"),Object(o.b)(r.b,{snippets:{html:"\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n"},mdxType:"Code"}),Object(o.b)("p",null,"All input inputs are hidden by default except for ",Object(o.b)("inlineCode",{parentName:"p"},"button")," and ",Object(o.b)("inlineCode",{parentName:"p"},"submit")," types. If you need to record some hidden inputs you can mark these views with ",Object(o.b)("inlineCode",{parentName:"p"},".smartlook-show")," css class:"),Object(o.b)(r.b,{snippets:{html:"\n<input type=\"text\" class='smartlook-show'>\n"},mdxType:"Code"}),Object(o.b)("h1",{id:"user-identification"},"User Identification"),Object(o.b)("p",null,"You can specify user identifier by calling:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.setUserIdentifier(@NonNull String identifier);\n      ",kotlin:"\nSmartlook.setUserIdentifier(@NonNull identifier: String)\n      "},cordova:{javascript:'\nSmartlook.setUserIdentifier({identifier: "sample_identifier"})\n      '},ios:{swift:"\nclass func setUserIdentifier(_ userIdentifier: String?)\n","objective-c":"\n+ (void)setUserIdentifier:(nullable NSString*)userIdentifier;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"TIP: You can then lookup identifiers in the Dashboard to find specific user’s recordings."),Object(o.b)("p",null,"Android"),Object(o.b)("h2",{id:"user-properties"},"User properties"),Object(o.b)("p",null,"Additional user information such as ",Object(o.b)("inlineCode",{parentName:"p"},"name"),", ",Object(o.b)("inlineCode",{parentName:"p"},"email"),", etc. can be set using ",Object(o.b)("inlineCode",{parentName:"p"},"UserProperties")," helper class and its methods:"),Object(o.b)(r.c,{snippets:{android:{java:'\nUserProperties userProperties = new UserProperties();\nuserProperties.putEmail("sample@email.com");\nuserProperties.putName("John Doe");\nSmartlook.setUserProperties(userProperties);\n      ',kotlin:'\nval userProperties = UserProperties().apply {\n    putEmail("sample@email.com")\n    putName("John Doe")\n}\nSmartlook.setUserProperties(userProperties)\n      '}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: If you set ",Object(o.b)("inlineCode",{parentName:"p"},"email")," or ",Object(o.b)("inlineCode",{parentName:"p"},"name")," property it will be displayed in the list of visitors in the Smartlook dashboard. Otherwise ",Object(o.b)("inlineCode",{parentName:"p"},"identifier")," is used."),Object(o.b)("p",null,"If there is no helper method for the data you want to set to user properties use ",Object(o.b)("inlineCode",{parentName:"p"},"put()")," method that accepts combination of ",Object(o.b)("inlineCode",{parentName:"p"},"key")," and ",Object(o.b)("inlineCode",{parentName:"p"},"value"),"."),Object(o.b)(r.c,{snippets:{android:{java:'\nUserProperties userProperties = new UserProperties();\nuserProperties.put("key", "value");\nSmartlook.setUserProperties(userProperties);\n      ',kotlin:'\nval userProperties = UserProperties()\nuserProperties.put("key", "value")\nSmartlook.setUserProperties(userProperties)\n      '}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: All helper and ",Object(o.b)("inlineCode",{parentName:"p"},"put()")," method has optional parameter ",Object(o.b)("inlineCode",{parentName:"p"},"immutable")," if set to ",Object(o.b)("strong",{parentName:"p"},"true"),", the value that has been set for the key is going to be immutable.\nThis means it cannot be set again (new value will ",Object(o.b)("strong",{parentName:"p"},"not overrride")," the old one)."),Object(o.b)("p",null,"Cordova"),Object(o.b)("p",null,"Additional user information, such as ",Object(o.b)("inlineCode",{parentName:"p"},"name"),", ",Object(o.b)("inlineCode",{parentName:"p"},"email")," and other custom properties can be set by calling:"),Object(o.b)(r.c,{snippets:{cordova:{javascript:'\ncordova.plugins.SmartlookPlugin.setUserIdentifier(\n    {identifier: "CordovaUser", sessionProperties: {name: "Cordova", email: "cordova@example.com"}})\n      '}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"iOS"),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nAdditional custom properties can be added to each recording session by calling:\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{ios:{swift:"\nclass func setSessionProperty(value: String, forName name: String)\n","objective-c":"\n+ (void)setSessionPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name;\n"}},mdxType:"CodeBlock"}),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nYou will see these properties in the Dashboard at Visitor details.\n\n    \nIf you do want locking a session property value to protect it against accidental further changes. Immutable property value cannot be changes once it is set.\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{ios:{swift:"\nstatic var immutable: SLPropertyOption\n \nclass func setSessionProperty(value: String, forName name: String, options: SLPropertyOption)\n","objective-c":"\ntypedef NS_OPTIONS(NSUInteger, SLPropertyOption) {\n    SLPropertyOptionDefaults    = 0,\n    SLPropertyOptionImmutable   = 1 << 0\n};\n+ (void)setSessionPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name withOptions:(SLPropertyOption)options;\n"}},mdxType:"CodeBlock"}),Object(o.b)(r.a,{kind:"example",visibleOn:"ios",mdxType:"Alert"},Object(o.b)(r.c,{snippets:{ios:{swift:'\nSmartlook.setSessionProperty(value: "immutable-value", forName: "my-property", options: .immutable)\n',"objective-c":'\n[Smartlook setSessionPropertyValue:@"immutable-value" forName:@"my-property" withOptions:SLPropertyOptionImmutable];\n      '}},mdxType:"CodeBlock"})),Object(o.b)("h1",{id:"analytics"},"Analytics"),Object(o.b)("p",null,"Android, iOS\nSome analytic events are recorded out-of-box:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Activity/Fragment changes"),Object(o.b)("li",{parentName:"ul"},"Focus changes"),Object(o.b)("li",{parentName:"ul"},"Clicked views"),Object(o.b)("li",{parentName:"ul"},"Application crashes"),Object(o.b)("li",{parentName:"ul"},"For everything else you can use custom events.")),Object(o.b)("p",null,"TIP: Names of some automatically detected events can be customized."),Object(o.b)("p",null,"Cordova"),Object(o.b)("p",null,"On web based frameworks we are not able to autodetect all events like on native frameworks. With that said we are still able to detect Application crashes.\nFor everything else you need to use custom events."),Object(o.b)("h2",{id:"custom-event"},"Custom event"),Object(o.b)("p",null,"You can track simple custom event by calling:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.trackCustomEvent(@NonNull String eventName);\n      ",kotlin:"\nSmartlook.trackCustomEvent(@NonNull eventName: String)\n      "},cordova:{javascript:'\nSmartlook.trackCustomEvent({name: "sample_event"})\n      '},ios:{swift:"\nclass func trackCustomEvent(name eventName: String)\n","objective-c":"\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"Android\nAdditional data serialized as ",Object(o.b)("inlineCode",{parentName:"p"},"JSONObject"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Bundle"),", ",Object(o.b)("inlineCode",{parentName:"p"},"String")," with valid json format or key/value pair can be added to custom event:"),Object(o.b)("p",null,"Cordova\nAddition data passed as a ",Object(o.b)("inlineCode",{parentName:"p"},"object")," can be added to custom event:"),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nCustom event also accepts a dictionary of string key/values as event properties.\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.trackCustomEvent(@NonNull String eventName, JSONObject eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, Bundle eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, String validJsonString);\nSmartlook.trackCustomEvent(@NonNull String eventName, @NotNull String key, String value);\n      ",kotlin:"\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: JSONObject);\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: Bundle);\nSmartlook.trackCustomEvent(@NonNull eventName: String, validJsonString: String);\nSmartlook.trackCustomEvent(@NonNull eventName: String, @NotNull key: String, value: String);\n      "},cordova:{javascript:'\nSmartlook.trackCustomEvent(\n    {name: "sample_event", eventProperties: {id: "sample_id", text: "sample text"}})\n      '},ios:{swift:"\nSmartlook.trackCustomEvent(name: String, props: [String : String]?)\n","objective-c":"\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: Event properties will effectively use only flat json object.\nThis means that if you pass json object that includes objects or arrays as a child elements these elements are goint to be ignored."),Object(o.b)("p",null,"Android\nNOTE: If you struggle with serialization of your data take a look here."),Object(o.b)("h2",{id:"navigation-event"},"Navigation event"),Object(o.b)("p",null,"You can track screen/navigation transitions manually by calling:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.trackNavigationEvent(@NotNull String name, @ViewState String viewState);\n      ",kotlin:"\nSmartlook.trackNavigationEvent(@NotNull name: String, @ViewState viewState: String)\n      "},cordova:{javascript:'\nSmartlook.trackNavigationEvent({name: "sample_screen", viewState: Smartlook.ViewState.START})\n      '},ios:{swift:"\nstatic let enter: Smartlook.NavigationEventType\nstatic let exit: Smartlook.NavigationEventType\n \nSmartlook.trackNavigationEvent(withControllerId controllerId: String, type: Smartlook.NavigationEventType)\n","objective-c":"\nSLNavigationType const _Nonnull SLNavigationTypeEnter;\nSLNavigationType const _Nonnull SLNavigationTypeExit;\n \n+ (void)trackNavigationEventWithControllerId:(nonnull NSString *)controllerId type:(nonnull SLNavigationType)type;\n      "}},mdxType:"CodeBlock"}),Object(o.b)(r.e,{visibleOn:"android",markup:"\nwhere `viewState` can be either `ViewState.START` or `ViewState.STOP`.\n",mdxType:"MD"}),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nwhere the `type` could flag the event as either `enter` or `exit` of the navigation controller.\n",mdxType:"MD"}),Object(o.b)("p",null,"NOTE: You need to track navigation events manually, because web technology based apps typically consist of single activity."),Object(o.b)("p",null,"Android\nYou can also explicitly tell the SDK if the navigation event happened between ",Object(o.b)("inlineCode",{parentName:"p"},"Activities")," or ",Object(o.b)("inlineCode",{parentName:"p"},"Fragments"),":"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.trackNavigationEvent(@NotNull String name, @ViewType String type, @ViewState String viewState);\n      ",kotlin:"\nSmartlook.trackNavigationEvent(@NotNull name: String, @ViewType type: String, @ViewState viewState: String)\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"where ",Object(o.b)("inlineCode",{parentName:"p"},"viewType")," is one of ",Object(o.b)("inlineCode",{parentName:"p"},"ViewType.ACTIVITY")," or ",Object(o.b)("inlineCode",{parentName:"p"},"ViewType.FRAGMENT"),"."),Object(o.b)("h2",{id:"timed-event"},"Timed event"),Object(o.b)("p",null,"In case you want to measure the duration of any time-sensitive or long-running actions in the app (for example download/upload). You can call one of:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.startTimedCustomEvent(@NotNull String eventName);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, JSONObject eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, Bundle eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, String eventPropertiesJson);\n      ",kotlin:"\nSmartlook.startTimedCustomEvent(@NotNull eventName: String)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: JSONObject)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: Bundle)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventPropertiesJson: String)\n      "},cordova:{javascript:'\nSmartlook.startTimedCustomEvent({name: "sample_timed_event", eventProperties: {sample: "object"}});\n      '},ios:{swift:"\nSmartlook.startTimedCustomEvent(name: String, props: [String : String]?) -> Any\n","objective-c":"\n+ (id _Nonnull)startTimedCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"This will not send out any event but returns a unique ",Object(o.b)("inlineCode",{parentName:"p"},"eventId")," that ",Object(o.b)("strong",{parentName:"p"},"needs to be stored")," and its used to stop/cancel custom timed event."),Object(o.b)("p",null,"To send out event with duration you need to call one of:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.stopTimedCustomEvent(@NotNull String eventId);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, JSONObject eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, Bundle eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, String eventPropertiesJson);\n      ",kotlin:"\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: JSONObject)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: Bundle)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventPropertiesJson: String)\n      "},cordova:{javascript:'\nSmartlook.stopTimedCustomEvent({eventId: "event_id", eventProperties: {sample: "object"}});\n      '}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"with corresponding ",Object(o.b)("inlineCode",{parentName:"p"},"eventId")," obtained from startTimedCustomEvent."),Object(o.b)("p",null,"NOTE: Properties set in start will be ",Object(o.b)("strong",{parentName:"p"},"merged")," with properties set in stop/cancel. Properties from stop/cancel have higher priority and will rewrite conflicting properties from start."),Object(o.b)("p",null,"In case given action failed you can call ",Object(o.b)("inlineCode",{parentName:"p"},"cancelTimedCustomEvent()")," instead of ",Object(o.b)("inlineCode",{parentName:"p"},"stopTimedCustomEvent()")," and provide a ",Object(o.b)("strong",{parentName:"p"},"reason")," of failure:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, JSONObject eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, Bundle eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, String eventPropertiesJson);\n      ",kotlin:"\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: JSONObject)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: Bundle)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventPropertiesJson: String)\n      "},cordova:{javascript:'\nSmartlook.cancelTimedCustomEvent({eventId: "event_id", reason: "cancel reason" eventProperties: {sample: "object"}});\n      '},ios:{swift:"\n// to track successfull events\nSmartlook.trackTimedCustomEvent(eventId: Any, props: [String : String]?)\n// to track event cancellation\nSmartlook.trackTimedCustomEventCancel(eventId: Any, reason: String?, props: [String : String]?)\n","objective-c":"\n// to track successfull events\n+ (void)trackTimedCustomEventWithEventId:(id _Nonnull)eventId props:(nullable NSDictionary<NSString*, NSString*>*)props;\n// to track event cancellation\n+ (void)trackTimedCustomEventCancelWithEventId:(id _Nonnull)eventId reason:(NSString *_Nullable)reason props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"EXAMPLE: Typical use of timed event might look like this:"),Object(o.b)(r.c,{snippets:{android:{java:'\nString eventID = Smartlook.startTimedCustomEvent("duration_event");\nThread.sleep(1000); //long running operation\nSmartlook.stopTimedCustomEvent(eventId);\n      ',kotlin:'\nval eventID = Smartlook.startTimedCustomEvent("duration_event")\nThread.sleep(1000) //long running operation\nSmartlook.stopTimedCustomEvent(eventId)\n      '},cordova:{javascript:'\nvar eventID = Smartlook.startTimedCustomEvent({name: "duration_event"});\nsetTimeout(function() {\nSmartlook.stopTimedCustomEvent({eventId: eventId})\n}, 1000);\n      '},ios:{swift:'\nlet eventRef = Smartlook.startTimedCustomEvent("duration_event");\n// some lenghty operation\nSmartlook.trackTimedCustomEvent(eventRef);\n',"objective-c":'\nid eventRef = [Smartlook startTimedCustomEventWithName:@"duration_event"];\n// some lenghty operation\n[Smartlook trackTimedCustomEventCancelWithEventId:eventRef];\n      '}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"In this case ",Object(o.b)("inlineCode",{parentName:"p"},"duration_event")," will have duration property set to circa 1000ms."),Object(o.b)("p",null,"Android"),Object(o.b)("h2",{id:"customize-automatic-event-detection"},"Customize automatic event detection"),Object(o.b)("p",null,"For some automatically detected events SDK tries to figure out the name from application context:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"click event")," - Event name consists of ",Object(o.b)("inlineCode",{parentName:"li"},"Activity")," name, ",Object(o.b)("inlineCode",{parentName:"li"},"View")," class (Button, etc.) and ",Object(o.b)("inlineCode",{parentName:"li"},"id"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"navigation event")," - Event name is set as ",Object(o.b)("inlineCode",{parentName:"li"},"Activity"),"/",Object(o.b)("inlineCode",{parentName:"li"},"Fragment")," name.")),Object(o.b)("p",null,"But sometimes it's impossible to name an event with an easy to read and descriptive name. Because of this SDK provides you with an option to personalize event names."),Object(o.b)("h3",{id:"name-click-events"},"Name click events"),Object(o.b)("p",null,"So a click on a given view has a custom event name instead of id it can be tagged directly in the XML layout file:"),Object(o.b)(r.c,{snippets:{android:{xml:'\n<View>\n    <tag android:id="@id/smartlook_custom_name" android:value="custom_name"/>\n</View>\n      '}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: If View has ",Object(o.b)("inlineCode",{parentName:"p"},"smartlook_custom_name")," set, clicking on this view will trigger an event with name consisting of ",Object(o.b)("inlineCode",{parentName:"p"},"Activity")," name, ",Object(o.b)("inlineCode",{parentName:"p"},"View")," class (",Object(o.b)("inlineCode",{parentName:"p"},"Button"),", etc.) and ",Object(o.b)("inlineCode",{parentName:"p"},"smartlook_custom_name"),"."),Object(o.b)("h3",{id:"name-navigation-events"},"Name navigation events"),Object(o.b)("p",null,"Custom names for navigation events can be set in two different ways. ",Object(o.b)("inlineCode",{parentName:"p"},"Activity"),"/",Object(o.b)("inlineCode",{parentName:"p"},"Fragment")," can implement ",Object(o.b)("inlineCode",{parentName:"p"},"SmartlookNamedController")," interface:"),Object(o.b)(r.c,{snippets:{android:{java:'\npublic class SettingsActivity extends AppCompatActivity implements SmartlookNamedController {\n    @NotNull\n    @Override\n    public String getCustomName() {\n        return "custom_activity_name";\n    }\n}\n      ',kotlin:'\nclass SettingsActivity : AppCompatActivity(), SmartlookNamedController {\n    @NotNull\n    override fun getCustomName(): String {\n        return "custom_activity_name";\n    }\n}\n      '}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"Or ",Object(o.b)("inlineCode",{parentName:"p"},"Activity"),"/",Object(o.b)("inlineCode",{parentName:"p"},"Fragment")," root view can be tagged directly in ",Object(o.b)("inlineCode",{parentName:"p"},"XML")," layout file:"),Object(o.b)(r.c,{snippets:{android:{xml:'\n<?xml version="1.0" encoding="utf-8"?>\n<View>\n\t<tag android:id="@id/smartlook_custom_controller_name" android:value="custom_name"/>\n\n\t\x3c!-- child views --\x3e\n</View>\n      '}},mdxType:"CodeBlock"}),Object(o.b)("h2",{id:"global-event-properties"},"Global event properties"),Object(o.b)("p",null,"SDK lets you set data that will be attached to every event. We call these ",Object(o.b)("strong",{parentName:"p"},"global event properties"),".\nYou can set global event properties:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.setGlobalEventProperties(JSONObject globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(Bundle globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(String globalEventPropertiesJson, boolean immutable);\nSmartlook.setGlobalEventProperty(@NotNull String key, @NotNull String value, boolean immutable);\n      ",kotlin:"\nSmartlook.setGlobalEventProperties(globalEventProperties: JSONObject, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventProperties: Bundle, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventPropertiesJson: String, immutable: Boolean)\nSmartlook.setGlobalEventProperty(@NotNull key: String, @NotNull value: String, immutable: Boolean)\n      "},cordova:{javascript:'\nSmartlook.setGlobalEventProperties({globalEventProperties: {sample: "property"}, immutable: true/false});\n      '},ios:{swift:"\nclass func setGlobalEventProperty(value: String, forName name: String)\n  \nstatic var immutable: SLPropertyOption \nclass func setGlobalEventProperty(value: String, forName name: String, options: SLPropertyOption)\n","objective-c":"\n+ (void)setGlobalEventPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name;\n  \ntypedef NS_OPTIONS(NSUInteger, SLPropertyOption) {\n    SLPropertyOptionDefaults    = 0,\n    SLPropertyOptionImmutable   = 1 << 0\n};\n+ (void)setGlobalEventPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name withOptions:(SLPropertyOption)options;\n      "}},mdxType:"CodeBlock"}),Object(o.b)(r.a,{kind:"example",visibleOn:"ios",mdxType:"Alert"},Object(o.b)(r.c,{snippets:{ios:{swift:'\nSmartlook.setGlobalEventProperty(value: "value", forName: "my-property");\nSmartlook.setGlobalEventProperty(value: "immutable-value", forName: "my-immutable-property", options: .immutable)\n',"objective-c":'\n[Smartlook setGlobalEventPropertyValue:@"value" forName:@"my-property"];\n[Smartlook setGlobalEventPropertyValue:@"immutable-value" forName:@"my-immutable-property" withOptions:SLPropertyOptionImmutable];\n      '}},mdxType:"CodeBlock"})),Object(o.b)("p",null,"Properties set to be ",Object(o.b)("strong",{parentName:"p"},"immutable")," have the ",Object(o.b)("strong",{parentName:"p"},"highest")," priority and once set they ",Object(o.b)("strong",{parentName:"p"},"cannot be overridden")," (only removed)."),Object(o.b)("p",null,"NOTE: Global event properties have higher priority so in the merging process they will override custom properties with the same key."),Object(o.b)("h2",{id:"remove-global-event-properties"},"Remove global event properties"),Object(o.b)("p",null,"If you want to remove global property with a given key call:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.removeGlobalEventProperty(String propertyKey);\n      ",kotlin:"\nSmartlook.removeGlobalEventProperty(propertyKey: String)\n      "},cordova:{javascript:'\nSmartlook.removeGlobalEventProperty({key: "property_key"});\n      '},ios:{swift:"\nSmartlook.removeGlobalEventProperty(forName: String)\n","objective-c":"\n+ (void)removeGlobalEventPropertyForName:(nonnull NSString *)name;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"Or you can remove all global event properties at once:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.removeAllGlobalEventProperties();\n      ",kotlin:"\nSmartlook.removeAllGlobalEventProperties()\n      "},cordova:{javascript:"\nSmartlook.removeAllGlobalEventProperties();\n      "},ios:{swift:"\nSmartlook.clearGlobalEventProperties()\n","objective-c":"\n+ (void)clearGlobalEventProperties;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: Global event properties are stored until they are not removed or the app is uninstalled."),Object(o.b)("h2",{id:"event-tracking-modes"},"Event tracking modes"),Object(o.b)("p",null,"Sometimes it can be beneficial to disable automatically detected or all events due to security reasons. This can be done using one of the ",Object(o.b)("strong",{parentName:"p"},"event tracking modes"),":"),Object(o.b)(r.e,{invisibleOn:"ios",markup:"\n* **FULL_TRACKING** this a default state. SDK tracks all automatically detected events along with all user defined events.\n* **IGNORE_USER_INTERACTION** automatically detected events will not be tracked. User defined events are still enabled.\n* **NO_TRACKING** no analytic events are enabled.\n",mdxType:"MD"}),Object(o.b)(r.e,{visibleOn:"ios",markup:"\n* `fullTracking`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* `ignoreUserInteractionEvents`: automatically detected events will not be tracked. User defined events are still enabled.\n* `noTracking`: no analytic events are enabled.\n",mdxType:"MD"}),Object(o.b)("p",null,"Event tracking mode can changed ",Object(o.b)("strong",{parentName:"p"},"anytime")," during the application run:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.setEventTrackingMode(@EventTrackingMode String eventTrackingMode);\n      ",kotlin:"\nSmartlook.setEventTrackingMode(@EventTrackingMode eventTrackingMode: String);\n      "},cordova:{javascript:"\nSmartlook.setEventTrackingMode({eventTrackingMode: Smartlook.EventTrackingMode.FULL_TRACKING});\n      "},ios:{swift:"\nstatic let fullTracking: Smartlook.EventTrackingMode\nstatic let ignoreUserInteractionEvents: Smartlook.EventTrackingMode\nstatic let noTracking: Smartlook.EventTrackingMode\n  \nclass func setEventTrackingMode(to eventTrackingMode: Smartlook.EventTrackingMode)\nclass func currentEventTrackingMode() -> Smartlook.EventTrackingMode\n","objective-c":"\nSLEventTrackingMode const SLEventTrackingModeFullTracking;\nSLEventTrackingMode const SLEventTrackingModeIgnoreUserInteractionEvents;\nSLEventTrackingMode const SLEventTrackingModeNoTracking;\n  \n+ (void)setEventTrackingModeTo:(nonnull SLEventTrackingMode)eventTrackingMode;\n+ (nonnull SLEventTrackingMode)currentEventTrackingMode;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"TIP: Take a look at pin code keyboard sample, demonstrating usage of analytic event modes."),Object(o.b)("h1",{id:"rendering"},"Rendering"),Object(o.b)("p",null,"SDK can use different methods of capturing screen image data. We call these rendering modes."),Object(o.b)("h2",{id:"set-rendering-mode"},"Set rendering mode"),Object(o.b)(r.e,{visibleOn:"android",markup:"\nYou can change rendering mode on SDK setup using builder:\n",mdxType:"MD"}),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nRendering mode can be set on SDK setup, e.g.:\n",mdxType:"MD"}),Object(o.b)(r.a,{kind:"example",mdxType:"Alert"},Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(@RenderingMode String renderingMode);\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      ",kotlin:"\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(@RenderingMode String renderingMode)\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build())\n      "},cordova:{javascript:'\nSmartlook.setupAndStartRecording({smartlookAPIKey: "YOUR_API_KEY", renderingMode: Smartlook.RenderingMode.NATIVE});\n      '},ios:{swift:"\nSmartlook.setup(key: YOUR_API_KEY, options: [.renderingMode: Smartlook.RenderingMode.wireframe]);\n","objective-c":'\n[Smartlook setupWithKey:@"YOUR_API_KEY" options:@{ SLSetupOptionRenderingModeOptionsKey: SLRenderingModeOptionBlueprintWireframe }];\n      '}},mdxType:"CodeBlock"})),Object(o.b)("p",null,"Or at anytime during application run using:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.setRenderingMode(@RenderingMode String renderingMode);\n      ",kotlin:"\nSmartlook.setRenderingMode(@RenderingMode renderingMode: String)\n      "},cordova:{javascript:"\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NATIVE});\n      "},ios:{swift:"\nclass func setRenderingMode(to renderingMode: Smartlook.RenderingMode)\n","objective-c":"\n+ (void)setRenderingModeTo:(nonnull SLRenderingMode)renderingMode;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"Rendering modes available:"),Object(o.b)(r.e,{visibleOn:"android",markup:"\n* `RenderingMode.NATIVE`\n* `RenderingMode.WIREFRAME`\n* `RenderingMode.NO_RENDERING`\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{ios:{swift:"\nSmartlook.RenderingMode.native\nSmartlook.RenderingMode.wireframe\nSmartlook.RenderingMode.noRendering\n","objective-c":"\nSLRenderingMode const SLRenderingModeNative;\nSLRenderingMode const SLRenderingModeWireframe;\nSLRenderingMode const SLRenderingModeNoRendering;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: ",Object(o.b)("inlineCode",{parentName:"p"},"NO_RENDERING")," mode does not record any screen data, this is beneficial on screens that include sensitive data, read more."),Object(o.b)("p",null,"Android, iOS"),Object(o.b)("h2",{id:"rendering-mode-option"},"Rendering mode option"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"WIREFRAME")," rendering mode can be further configured by ",Object(o.b)("inlineCode",{parentName:"p"},"renderingModeOption"),":"),Object(o.b)("p",null,"Rendering mode option can be set on setup:"),Object(o.b)(r.a,{kind:"example",mdxType:"Alert"},Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(@RenderingModeOption String renderingModeOption);\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      ",kotlin:"\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(@RenderingModeOption renderingModeOption: String);\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n        "},ios:{swift:"\nclass func  Smartlook.setup(key: String,\n                        options: [\n                          .renderingMode:Smartlook.RenderingMode,\n                          .renderingModeOption:Smartlook.RenderingModeOption\n                        ])\n          ","objective-c":"\n+(void)setupWithKey:(nonnull NSString *)key \n            options:@{\n              SLSetupOptionRenderingModeKey:SLRenderingMode,\n              SLSetupOptionRenderingModeOptionsKey:SLRenderingModeOption\n            };\n        "}},mdxType:"CodeBlock"})),Object(o.b)("p",null,"Or at anytime during application run using:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, @RenderingModeOption String renderingModeOption);\n      ",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, @RenderingModeOption renderingModeOption: String)\n      ",ios:{swift:"\nclass func setRenderingMode(to renderingMode: Smartlook.RenderingMode, option renderingModeOption: Smartlook.RenderingModeOption?)\n","objective-c":"\n+ (void)setRenderingModeTo:(nonnull SLRenderingMode)renderingMode withOption:(nullable SLRenderingModeOption)renderingModeOption\n      "}}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"Rendering mode options for ",Object(o.b)("inlineCode",{parentName:"p"},"WIREFRAME")," rendering mode:"),Object(o.b)(r.e,{visibleOn:"android",markup:"\n* `RenderingMode.WIREFRAME`\n* `RenderingMode.BLUEPRINT`\n* `RenderingMode.ICON_BLUEPRINT`\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{ios:{swift:"\nSmartlook.RenderingModeOption.none\nSmartlook.RenderingModeOption.colorWireframe\nSmartlook.RenderingModeOption.blueprintWireframe\nSmartlook.RenderingModeOption.iconBlueprintWireframe\n","objective-c":"\nSLRenderingModeOption const SLRenderingModeOptionNone;\nSLRenderingModeOption const SLRenderingModeOptionColorWireframe;\nSLRenderingModeOption const SLRenderingModeOptionBlueprintWireframe;\nSLRenderingModeOption const SLRenderingModeOptionIconBlueprintWireframe;\n      "}},mdxType:"CodeBlock"}),Object(o.b)(r.e,{visibleOn:"android",markup:"\n# Network intercepting\nYou can track your apps' HTTP traffic using the network inceptor provided by the SDK. This feature is available to you if you are using **OkHttp** for your HTTP/REST communication.\n\n\nNOTE: If you are using another HTTP library that allows intercepting, please feel free to submit a feature request here.\n\n\n## OkHttp interceptor\nIf you are using `OkHttp` you can add Smartlook interceptor as a another `NetworkInterceptor` when creating a `OkHttpClient` like this:\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{android:{java:"\nOkHttpClient client = new OkHttpClient.Builder()\n    .addNetworkInterceptor(new SmartlookOkHttpInterceptor())\n    .build();\n      ",kotlin:"\nval client = OkHttpClient.Builder()\n    .addNetworkInterceptor(SmartlookOkHttpInterceptor())\n    .build()\n      "}},mdxType:"CodeBlock"}),Object(o.b)(r.e,{visibleOn:"android",markup:"\nWe will **not read or send out any body data**, we are reading and sending only these request metadata:\n* **Request url** that can be stripped of any sensitive data -> read more.\n* **Http method** used for this request.\n* **Request headers** that can be filtered out so they do not leak any sensitive data.\n* **Response headers** that are filtered out so they do not leak any sensitive data.\n* **Protocol** negotiated by this connection.\n* **Duration** between request and response/failure.\n* **Request status** stating if the request was successful or eventually how it failed, can be one of:\n  * Ok\n  * Error\n  * Abort\n  * Timeout\n* **Status code** of http response.\n* Flag stating if response was received from **cache**.\n\n\nNOTE: All intercepted requests can be displayed in **dev tools** on every recording.\n\n\n### Url masks\nYou can hide sensitive parts of request URLs using `UrlMask`:\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{android:{java:"\nnew UrlMask(String regex);\nnew UrlMask(String regex, String replaceWith);\n      ",kotlin:"\nUrlMask(regex: String)\nUrlMask(regex: String, replaceWith: String)\n      "}},mdxType:"CodeBlock"}),Object(o.b)(r.e,{visibleOn:"android",markup:"\nNOTE: If you don't specify `replaceWith` `String` explicitly the default replace `String` is used.\nYou need to initialize `SmartlookOkHttpInterceptor` using `Builder` to define used `UrlMask`s:\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{android:{java:"\nnew SmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(UrlMask urlMask)\n                .build();\n      ",kotlin:"\nSmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(urlMask: UrlMask)\n                .build()\n      "}},mdxType:"CodeBlock"}),Object(o.b)(r.e,{visibleOn:"android",markup:"\nEXAMPLE: We are intercepting request with URL containing sensitive query named `secret`:\n```\nhttps://example.com/page?secret=password&second=query\n```\n\n\nThe content of sensitive query can be hidden for intercepting using `UrlMask`:\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{android:{java:'\nSmartlookOkHttpInterceptor interceptor = new SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(new UrlMask("(name=)[^&]+(&*)", "$1<sensitive>$2"))\n        .build();\n\nOkHttpClient client = new OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build();\n      ',kotlin:'\nval interceptor = SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(UrlMask("(name=)[^&]+(&*)", "$1<sensitive>$2"))\n        .build()\n\nval client = OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build()\n      '}},mdxType:"CodeBlock"}),Object(o.b)(r.e,{visibleOn:"android",markup:'\nWith above shown `UrlMask` intercepted request will have following URL stored:\n\n\n```\nhttps://example.com/page?secret=<sensitive>&second=query\n```\n\n\n### Sensitive headers\n\n\nIntercepted headers can contain sensitive data, so they need to be filtered out by their name. This can be done using `sensitiveHeaderNameRegexps`, this list of sensitive header names contains these regular expressions by default:\n* `".*csrf.*"`\n* `".*token.*"`\n* `".*auth.*"`\n* `".*key.*"`\n* `".*cookie.*"`\n\n\nYou can define your custom list of sensitive header name regular expressions:\n',mdxType:"MD"}),Object(o.b)(r.c,{snippets:{android:{java:"\nnew SmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(String headerRegex)\n        .build();\n      ",kotlin:"\nSmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(headerRegex: String)\n        .build()\n      "}},mdxType:"CodeBlock"}),Object(o.b)("h1",{id:"utility-methods"},"Utility methods"),Object(o.b)("h2",{id:"instal-referrer"},"Instal referrer"),Object(o.b)("p",null,"When your application is installed from the ",Object(o.b)("strong",{parentName:"p"},"Google Play Store")," Smartlook SDK ",Object(o.b)("strong",{parentName:"p"},"automatically")," tracks install referrer."),Object(o.b)("p",null,"You can also set your custom referrer using:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.setReferrer(String referrer, String source);\n      ",kotlin:"\nSmartlook.setReferrer(referrer: String, source: String)\n      "},cordova:{javascript:'\nSmartlook.setReferrer({referrer: "sample referrer", source: "sample source"});\n      '}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: Referrer value and source of installation is stored per visitor and can be viewed in Dashboard."),Object(o.b)("h2",{id:"dashboard-session-url"},"Dashboard session URL"),Object(o.b)("p",null,"You can obtain URL leading to Smartlook Dashboard for currently recorded session:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.getDashboardSessionUrl(boolean withCurrentTimestamp);\n      ",kotlin:"\nSmartlook.getDashboardSessionUrl(withCurrentTimestamp: Boolean)\n      "},cordova:{javascript:"\n Smartlook.getDashboardSessionUrl({withCurrentTimestamp: true}, successCallback, ...);\n\n function successCallback(dashboardSessionUrl) {\n  alert('Dashboard session URL: ' + dashboardSessionUrl);\n }\n      "},ios:{swift:"\nclass func getDashboardSessionURL(withCurrentTimestamp withTimestamp: Bool) -> URL?\n","objective-c":"\n+ (nullable NSURL *)getDashboardSessionURLWithCurrentTimestamp:(BOOL)withTimestamp;\n      "}},mdxType:"CodeBlock"}),Object(o.b)(r.e,{visibleOn:"android,cordova",markup:"\nIf `withCurrentTimestamp` is set to `TRUE` link will include information about current recording timestamp. \nThis will ensure that the player will start playing the session at the moment when `getDashboardSessionUrl` was called.\n",mdxType:"MD"}),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nIf `withCurrentTimestamp` is set to `true` link will include information about current recording timestamp. \nThis will ensure that the player will start playing the session at the moment when `getDashboardSessionUrl` was called.\n",mdxType:"MD"}),Object(o.b)("p",null,"NOTE: This URL can be opened only by someone who has access to your dashboard. This is ",Object(o.b)("strong",{parentName:"p"},"not a public sharing link"),"."),Object(o.b)("h2",{id:"dashboard-visitor-url"},"Dashboard visitor URL"),Object(o.b)("p",null,"You can obtain URL leading to Smartlook Dashboard for currently recorded visitor:"),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.getDashboardVisitorUrl();\n      ",kotlin:"\nSmartlook.getDashboardVisitorUrl()\n      "},cordova:{javascript:"\n Smartlook.getDashboardSessionUrl(successCallback, ...);\n\n function successCallback(dashboardVisitorUrl) {\n  alert('Dashboard visitor URL: ' + dashboardVisitorUrl);\n }\n      "},ios:{swift:"\nclass func getDashboardVisitorURL() -> URL?","objective-c":"\n+ (nullable NSURL *)getDashboardVisitorURL;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: This URL can be opened only by someone who has access to your dashboard. This is ",Object(o.b)("strong",{parentName:"p"},"not a public sharing link"),"."),Object(o.b)("h1",{id:"integrations"},"Integrations"),Object(o.b)("h2",{id:"manual-integration"},"Manual integration"),Object(o.b)(r.e,{visibleOn:"android",markup:"\nYou can manually integrate Smartlook info various analytic frameworks using our `IntegrationListener`.\n\n\nYou can register the listener like this:\n",mdxType:"MD"}),Object(o.b)(r.e,{visibleOn:"ios",markup:"\nYou can register to dashboard URL change notifications to integrate them programmatically into other 3rd party analytics frameworks.\n\n\nThe notifications are:\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        AnalyticsTool.trackSession(dashboardSessionUrl);\n    }\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        AnalyticsTool.trackVisitor(dashboardSessionUrl);\n    }\n});\n      ",kotlin:"\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n      AnalyticsTool.trackSession(dashboardSessionUrl)\n    }\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n      AnalyticsTool.trackVisitor(dashboardSessionUrl)\n    }\n})\n      "},cordova:{javascript:'\n Smartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) { alert("Session: " + dashboardSessionUrl); },\n  onVisitorReady: function (dashboardVisitorUrl) { alert("Visitor: " + dashboardVisitorUrl); }\n});\n      '},ios:{swift:"\npublic class let dashboardSessionURLChanged: NSNotification.Name\npublic class let dashboardVisitorURLChanged: NSNotification.Name\n","objective-c":"\nNSNotificationName const SLDashboardSessionURLChangedNotification;\nNSNotificationName const SLDashboardVisitorURLChangedNotification;\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"NOTE: You can find samples of integrations into most popular frameworks here."),Object(o.b)(r.e,{visibleOn:"android",markup:"\nIf you want to uregister the listener simply call:\n",mdxType:"MD"}),Object(o.b)(r.c,{snippets:{android:{java:"\nSmartlook.unregisterIntegrationListener();\n      ",kotlin:"\nSmartlook.unregisterIntegrationListener()\n      "},cordova:{javascript:"\n Smartlook.unregisterIntegrationListener();\n      "}},mdxType:"CodeBlock"}),Object(o.b)("h2",{id:"automatic-integrations"},"Automatic integrations"),Object(o.b)("p",null,"Smartlook SDK automatic integrations into mopst popular frameworks are in progress."))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/api_reference.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-api-reference-mdx-a4b01fd31b1a70def13b.js.map