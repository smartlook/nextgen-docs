(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{g1Xh:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return d}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var i=n("/FXl"),a=n("TjRS"),o=n("+8zC");n("NRsk"),n("aD51");function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/conceptual/handling-sensitive-data.mdx"}});var l={_frontmatter:r},c=a.a;function d(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(i.b)(c,s({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"handling-sensitive-data"},"Handling Sensitive Data"),Object(i.b)("p",null,"The goal of analytic is to understand user journey in the app and their interaction with it to improve the user experience. To gather the necessary data, Smartlook follows user actions and records what uses sees on the screen. This indeed represents a challenge for protecting user privacy - out of decency, and law requirements too, and also because the data itself is rarely needed for the analytics purposes. What analytics uses is the metadata."),Object(i.b)("p",null,"There are several ways how Smartlook protects user privacy whne gathering the informatin it needs for its purposes. Smartlook obfuscates out of the box the native visual elements that typically contain private information. The data are replaced by neutral colour boxes during the recording process, they never make it to our systems. Moreover, Smartlook offers a set of methods that enable app developers to avoid recording unnecessary information."),Object(i.b)("p",null,"Also, Smartlook provides an open-source ",Object(i.b)("a",s({parentName:"p"},{href:"https://github.com/smartlook/ios-consent-sdk"}),"Consent SDK for iOS")," and ",Object(i.b)("a",s({parentName:"p"},{href:"https://github.com/smartlook/android-consent-sdk"}),"Consent SDK for Android"),", that allow app authors getting user consent with the analytics data gathering."),Object(i.b)("h1",{id:"handling-ui-with-sensitive-data"},"Handling UI with Sensitive Data"),Object(i.b)("p",null,"Potentially any UI element may contain sensitive information that should not be recorded. On the other hand, some elements that are not recorded by default may contain harmless data vital for analytics. Smartlook offers a comprehensive set of methods to handle various scenarios."),Object(i.b)(o.a,{kind:"note",mdxType:"Alert"},"Terminology: in Smartlook, disabling UI element recording is done by blacklisting it. Enabling UI element recording is done by whitelisting it. Blacklisted UI elements are also called sensitive."),Object(i.b)("p",null,"Most UI elements are whitelisted by default. Some types of UI elements (text edits, web views) are blacklisted by default."),Object(i.b)("p",null,"There are three levels of granularity of handling the sensitive data recording:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"individual UI elements recording"),Object(i.b)("li",{parentName:"ul"},"UI element types recording"),Object(i.b)("li",{parentName:"ul"},"the whole screen recording ")),Object(i.b)(o.a,{kind:"important",mdxType:"Alert"},"In order to provide robust user privacy protection by default, some UI elements, namely text inputs and web views (that typically contain sensitive user data) are not recorded in the default Smartlook setup. The app author must take active steps to whitelist these elements in order to record their content."),Object(i.b)("h3",{id:"handling-sensitivity-of-individual-ui-elements"},"Handling Sensitivity of Individual UI Elements"),Object(i.b)("p",null,"In order not to record a particular view, like here in an example with an image view that shows a portrait image of the user, use a variable that holds a reference to the view with one of the following approaches to black list it, e.g., "),Object(i.b)(o.a,{kind:"example",mdxType:"Alert"},Object(i.b)(o.c,{snippets:{ios:{swift:"\nSmartlook.registerBlacklisted(object: self.portraitImageView)\nself.portraitImageView.slSensitive = true","objective-c":"\n[Smartlook registerBlacklistedObject: self.portraitImageView];\nself.portraitImageView.slSensitive = YES;"}},mdxType:"CodeBlock"})),Object(i.b)("p",null,"When, on the other hand, an otherwise blacklisted view (in our example a web view) should be recorded, follow this example code:"),Object(i.b)(o.a,{kind:"example",mdxType:"Alert"},Object(i.b)(o.c,{snippets:{ios:{swift:"\nSmartlook.unregisterBlacklisted(object: self.introWebView)\nself.introWebView.slSensitive = false"}},mdxType:"CodeBlock"})),Object(i.b)(o.a,{kind:"note",visibleOn:"ios",mdxType:"Alert"},"Note also, that the `slSensitive` property of `UIView` can be set in Xcode Interface Builder as well, i.e., it is not necessary creating an `@IBOutlet` for a view that is designed in the Interface Builder just in order to set its sensitivity."),Object(i.b)("p",null,"More on the topic in "),Object(i.b)(o.d,{to:"/api_reference?platform=ios#sensitive-data-hiding",mdxType:"Link"},"API reference"),".",Object(i.b)("h3",{id:"handling-sensitivity-of-classes"},"Handling Sensitivity of Classes"),Object(i.b)(o.a,{kind:"important",mdxType:"Alert"},"This functionality is available only on all platforms. Please consult the ",Object(i.b)(o.d,{to:"/api_reference?platform=ios#sensitive-data-hiding",mdxType:"Link"},"API reference")," to see if they are available for your development tollchain."),Object(i.b)("p",null,"In some use cases, whitelisting or blacklisting individual views is not practical, e.g., in an app that heavily uses web views for presenting some insensitive content, or if the app defines its own subclasses of visual components that present sensitive user data."),Object(i.b)("p",null,"To cover this use-case, Smartlook offers ",Object(i.b)("strong",{parentName:"p"},"on some platforms")," a convenient way how to blacklist or whitelist all descendants of some class or visual elements that conform some protocol. "),Object(i.b)(o.e,{visibleOn:"ios",markup:"\nOn iOS, you can blacklist or whitelist all instances of a **`UIView` subclass** or all `UIView` subclasses that conform some **protocol**.\n",mdxType:"MD"}),Object(i.b)("p",null,"More on the topic in "),Object(i.b)(o.d,{to:"/api_reference?platform=ios#sensitive-data-hiding",mdxType:"Link"},"API reference"),".",Object(i.b)("h3",{id:"handling-content-presented-in-webviews"},"Handling Content Presented in WebViews"),Object(i.b)("p",null,"Native WebView classes are blacklisted by default. Its instances, or the whole class, must be whitelisted in order to record its content. However, a whitelisted web view can still contain HTML elements with sensitive content, and Smartlook thus does not record the HTML elements where the user enters data."),Object(i.b)("p",null,"In order to change the default behaviour, HTML elements that are not recorded by default can be whitelisted by assigning smartlook-show CSS class to them. Any HTML element that should not be recorded can be blacklisted by assigning smartlook-hide CSS class to it. "),Object(i.b)(o.d,{to:"/api_reference",mdxType:"Link"},"API reference"),".",Object(i.b)("h3",{id:"recording-modes-handling-sensitive-data-at-the-whole-screen-level"},"Recording Modes: Handling Sensitive Data at the Whole Screen Level"),Object(i.b)("p",null,"There can be scenarios when direct recording of the screen in order to understand the user behaviour is not appropriate or necessary. In such a case, Smartlook can be instructed to use, permanently or just temporarily, one of its wireframe recording modes."),Object(i.b)("p",null,"When a wireframe mode is on, Smartlook draws a sketch of the screens instead of copying its content literally into the video. The principal UI elements, and user interaction with them, are still clearly distinguishable, but their actual look and content (texts, images) are replaced by their abstract representation. "),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"i do not understand how to link images, the example in index.mdx is useless"),"\n",Object(i.b)("inlineCode",{parentName:"p"},"<img src={rendering_native.png} />"),"\n",Object(i.b)("inlineCode",{parentName:"p"},"<img src={rendering_wireframe.png} />")),Object(i.b)("h4",{id:"setting-recording-mode"},"Setting Recording Mode"),Object(i.b)("p",null,"Default recording mode for an app is set in ",Object(i.b)("a",s({parentName:"p"},{href:"https://app.smartlook.com/settings/projects"}),"the dashboard"),". "),Object(i.b)("p",null,"When debugging or experimenting to find the best suitable one for a particular appRecording mode, the default rendering mode can be also set a a setup options. In production releases, this option should not be used."),Object(i.b)("p",null,"The app can change the rendering mode anytime, e.g., to temporarily hide the sensitive user content on some screens. It is also possible to obtain the currently used values."),Object(i.b)("p",null,"More about rendering modes could be found "),Object(i.b)(o.d,{to:"/api_reference#rendering",mdxType:"Link"},"in the API reference."),Object(i.b)("h1",{id:"handling-sensitive-events"},"Handling Sensitive Events"),Object(i.b)("p",null,"It is not just the visual elements that can contain sensitive information. Sometimes, clue to sensitive user data can be found in user interaction event. Consider that , e.g. location of ",Object(i.b)("em",{parentName:"p"},"click")," events on in  keyboard area could be used to guess user password event wenn the keyboard itself is obfuscated."),Object(i.b)(o.a,{kind:"important",mdxType:"Alert"},"Click events in the area of the system keyboard are never recorded by Smartlook. User interaction with custom input elements, e.g., custom PIN-Pad, must be filtered out programatically by the app developer."),Object(i.b)("p",null,"The default setting is to track all events (with the exception of events on the keyboard, for obvious user privacy reasons). When this is not desired, the app may fine-tune the level of tracked events. "),Object(i.b)("p",null,"Typically, the default ",Object(i.b)("strong",{parentName:"p"},"Full Tracking")," mode is desired, as it gives a detailed picture of user activities."),Object(i.b)("p",null,"On the other hand, on some screens event location of touches on otherwise blacklisted views can reveal sensitive private information (e.g., custom input view for PIN). In such a case, touches should not be recorded, and the app should switch to ",Object(i.b)("strong",{parentName:"p"},"Ignore User Interaction Events")," mode temporarily."),Object(i.b)("p",null,"Some apps that handle complex private information on some screens, may prefer stopping events recording altogether there, by switching to ",Object(i.b)("strong",{parentName:"p"},"No Tracking")," mode for the screens."),Object(i.b)(o.a,{kind:"note",mdxType:"Alert"},"Event tracking mode cannot be set on per-UI-element basis, only for the whole app."),Object(i.b)("p",null,"More about rendering modes could be found "),Object(i.b)(o.d,{to:"/api_reference#event-tracking-modes",mdxType:"Link"},"in the API reference."))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/conceptual/handling-sensitive-data.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-conceptual-handling-sensitive-data-mdx-d4e52f3fbf7bf97fb0ac.js.map