{"version":3,"sources":["webpack:///../src/cookbook/android_setup_outside_application_class.mdx"],"names":["_frontmatter","name","TextBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","kind","invisibleOn","parentName","snippets","java","kotlin","isMDXComponent"],"mappings":"oQAOaA,G,UAAe,S,0OAE5B,IAAsBC,EAKhBC,GALgBD,EAKU,YALF,SAA6BE,GAEzD,OADAC,QAAQC,KAAK,aAAeJ,EAAO,2EAC5B,kBAASE,KAIZG,EAAc,CAClBN,gBAEIO,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,eAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAI5E,YAACT,EAAD,CAAWU,KAAK,YAAYC,YAAY,UAAUF,QAAQ,aAA1D,uDAGA,YAAC,IAAD,CAAOA,QAAQ,SAAf,uCACA,yNAEA,uFAAsE,0BAAYG,WAAW,KAAvB,YAAtE,qEACA,YAAC,IAAD,CAAMC,SAAU,CACdC,KAAM,kXAWNC,OAAQ,wTAUPN,QAAQ,e,wOAKfF,EAAWS,gBAAiB","file":"component---src-cookbook-android-setup-outside-application-class-mdx-10f68197bec1a699572c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nextgen-docs/nextgen-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, Title } from 'components';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst TextBlock = makeShortcode(\"TextBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <TextBlock kind=\"important\" invisibleOn=\"android\" mdxType=\"TextBlock\">{`\nThis guide is focused on Android (Java/Kotlin).\n`}</TextBlock>\n    <Title mdxType=\"Title\">SDK setup outside Application class</Title>\n    <p>{`Sometimes it is not possible to initialize SDK at the start of the application.\nTypical example is when you need to fetch your api key so you don't have your api key at the application start.`}</p>\n    <p>{`If this is your case you need to provide SDK setup with actual `}<inlineCode parentName=\"p\">{`Activity`}</inlineCode>{` reference so the SDK can “catch up” with applications lifecycle.`}</p>\n    <Code snippets={{\n      java: `\npublic class MainActivity extends AppCompatActivity {\\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate();\\n\n        Smartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n                .setActivity(this);\\n\n        Smartlook.setupAndStartRecording(builder.build());\n    }\n}\n`,\n      kotlin: `\nclass MainActivity : AppCompatActivity() {\\n\n    override fun onCreate(savedInstanceState: Bundle) {\n        super.onCreate();\\n\n        val builder = Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n                .setActivity(this)\\n\n        Smartlook.setupAndStartRecording(builder.build())\n    }\n}\n`\n    }} mdxType=\"Code\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}