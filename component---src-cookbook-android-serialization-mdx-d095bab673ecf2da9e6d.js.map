{"version":3,"sources":["webpack:///../src/cookbook/android_serialization.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","snippets","java","kotlin","isMDXComponent"],"mappings":"ygBAQO,IAAMA,EAAe,Q,wNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,6IACA,sBACE,kBAAIC,WAAW,MAAK,0BAAYA,WAAW,MAAvB,eACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WACpB,kBAAIA,WAAW,MAAf,QAA6B,0BAAYA,WAAW,MAAvB,YAE/B,wGACA,YAAC,IAAD,CAAMC,SAAU,CACdC,KAAM,icAqBNC,OAAQ,uHAKPJ,QAAQ,SACX,iBAAQ,CACN,GAAM,2BADR,2BAGA,YAAC,IAAD,CAAME,SAAU,CACdC,KAAM,yVAWNC,OAAQ,uHAKPJ,QAAQ,SACX,iBAAQ,CACN,GAAM,uBADR,uBAGA,YAAC,IAAD,CAAME,SAAU,CACdC,KAAM,oRAONC,OAAQ,uHAKPJ,QAAQ,SACX,iBAAQ,CACN,GAAM,4BADR,4BAGA,yCAAwB,0BAAYC,WAAW,KAAvB,QAAxB,uGACA,YAAC,IAAD,CAAMC,SAAU,CACdC,KAAM,2HAINC,OAAQ,uHAKPJ,QAAQ,e,sNAKfH,EAAWQ,gBAAiB","file":"component---src-cookbook-android-serialization-mdx-d095bab673ecf2da9e6d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nextgen-docs/nextgen-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Link } from \"components\";\nimport { usePlatforms } from 'hooks';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"data-serialization\"\n    }}>{`Data serialization`}</h1>\n    <p>{`When using custom events and global event properties you may need to serialize data to one of SDK supported formats:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`JSONObject`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Bundle`}</inlineCode></li>\n      <li parentName=\"ul\">{`json `}<inlineCode parentName=\"li\">{`String`}</inlineCode></li>\n    </ul>\n    <p>{`For all examples we gonna use this data class as an input to the serialization:`}</p>\n    <Code snippets={{\n      java: `\npublic class Employee {\n    private String name;\n    private String id;\n    private double salary;\\n\n    public Employee(String name, String id, double salary) {\n        this.name = name;\n        this.id = id;\n        this.salary = salary;\n    }\\n\n    public String getName() {\n        return name;\n    }\\n\n    public String getId() {\n        return id;\n    }\\n\n    public double getSalary() {\n        return salary;\n    }\n}\n`,\n      kotlin: `\ndata class Employee(val name: String,\n                    val id: String,\n                    salary: Double)\n`\n    }} mdxType=\"Code\" />\n    <h2 {...{\n      \"id\": \"serialize-as-jsonobject\"\n    }}>{`Serialize as JSONObject`}</h2>\n    <Code snippets={{\n      java: `\nEmployee employee = new Employee(\"John Dough\", \"#123456\", 1000);\nJSONObject serializedEmployee = new JSONObject();\\n\ntry {\n    serializedEmployee.put(\"name\", employee.name);\n    serializedEmployee.put(\"id\", employee.id);\n    serializedEmployee.put(\"salary\", employee.salary);\n} catch (JSONException e) {\n    e.printStackTrace();\n}\n`,\n      kotlin: `\ndata class Employee(val name: String,\n                    val id: String,\n                    salary: Double)\n`\n    }} mdxType=\"Code\" />\n    <h2 {...{\n      \"id\": \"serialize-as-bundle\"\n    }}>{`Serialize as Bundle`}</h2>\n    <Code snippets={{\n      java: `\nEmployee employee = new Employee(\"John Dough\", \"#123456\", 1000);\nBundle serializedEmployee = new Bundle();\nserializedEmployee.putString(\"name\", employee.name);\nserializedEmployee.putString(\"id\", employee.id);\nserializedEmployee.putDouble(\"salary\", employee.salary);\n`,\n      kotlin: `\ndata class Employee(val name: String,\n                    val id: String,\n                    salary: Double)\n`\n    }} mdxType=\"Code\" />\n    <h2 {...{\n      \"id\": \"serialize-as-json-string\"\n    }}>{`Serialize as json String`}</h2>\n    <p>{`If you are using `}<inlineCode parentName=\"p\">{`Gson`}</inlineCode>{` (or any other similar library) you might prefer this way of serializing data for SDK API methods. `}</p>\n    <Code snippets={{\n      java: `\nEmployee employee = new Employee(\"John Dough\", \"#123456\", 1000);\nString serializedEmployee = gson.toJson(employee);\n`,\n      kotlin: `\ndata class Employee(val name: String,\n                    val id: String,\n                    salary: Double)\n`\n    }} mdxType=\"Code\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}