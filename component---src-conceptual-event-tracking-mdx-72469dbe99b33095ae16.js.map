{"version":3,"sources":["webpack:///../src/conceptual/event-tracking.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","kind","snippets","ios","swift","isMDXComponent"],"mappings":"0gBAQO,IAAMA,EAAe,Q,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,qBAAG,kBAAIC,WAAW,KAAf,mMACH,yTACA,wNACA,iBAAQ,CACN,GAAM,2BADR,2BAGA,mOACA,6cACA,YAAC,IAAD,CAAOC,KAAK,YAAYF,QAAQ,SAAhC,0RAGA,iBAAQ,CACN,GAAM,oBADR,oBAGA,kaACA,qHACA,iBAAQ,CACN,GAAM,0BADR,0BAGA,kVACA,+JACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,4LACA,YAAC,IAAD,CAAOE,KAAK,UAAUF,QAAQ,SAChC,YAAC,IAAD,CAAWG,SAAU,CACfC,IAAK,CACHC,MAAO,uFAGP,wHAIDL,QAAQ,eAEb,iBAAQ,CACN,GAAM,eADR,eAGA,mJAAkI,0BAAYC,WAAW,KAAvB,YAAlI,0FACA,4EAA2D,0BAAYA,WAAW,KAAvB,YAA3D,mJAAmQ,0BAAYA,WAAW,KAAvB,YAAnQ,QAAgU,0BAAYA,WAAW,KAAvB,YAAhU,oCACA,kGAAiF,0BAAYA,WAAW,KAAvB,UAAjF,6GACA,YAAC,IAAD,CAAOC,KAAK,UAAUF,QAAQ,SAChC,YAAC,IAAD,CAAWG,SAAU,CACfC,IAAK,CACHC,MAAO,2eAcP,qbAYDL,QAAQ,eAEb,+QACA,iBAAQ,CACN,GAAM,8BADR,8BAGA,iMACA,YAAC,IAAD,CAAOE,KAAK,UAAUF,QAAQ,SAChC,YAAC,IAAD,CAAWG,SAAU,CACfC,IAAK,CACHC,MAAO,qFAGP,iHAGDL,QAAQ,eAEb,sJACA,YAAC,IAAD,CAAOE,KAAK,OAAOF,QAAQ,SAA3B,uN,iNAOJH,EAAWS,gBAAiB","file":"component---src-conceptual-event-tracking-mdx-72469dbe99b33095ae16.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nextgen-docs/nextgen-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Alert, Link, MD } from \"components\";\nimport { usePlatforms } from 'hooks';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"event-tracking\"\n    }}>{`Event Tracking`}</h1>\n    <p><em parentName=\"p\">{`This section discusses what kinds of events are tracked by Smartlook, how they are available in the dashboard, how they relate to user privacy and how to control the level of tracked events.`}</em></p>\n    <p>{`Smartlook tracks two interconnected types of events. User interaction events, i.e., finger touches, gestures, UI element focus and such, and analytics events, by which Smartlook understands button clicks, navigation between screens and similar events that initialize an action in the app.`}</p>\n    <p>{`There are no known performance issues related to event tracking. Tracked events, however, especially those that are visualised during the session playback, can compromise sensitive user data.`}</p>\n    <h2 {...{\n      \"id\": \"user-interaction-events\"\n    }}>{`User Interaction Events`}</h2>\n    <p>{`Smartlook tracks user interactions with the app UI, like taps and gestures, in order to visualise them during recording playback. These records are also the data for creating user interaction heatmaps. `}</p>\n    <p>{`To protect user privacy, user interaction with virtual keyboards (i.e., events in the area where the keyboard is on the screen) is not recorded. When your app uses a custom input views (e.g., a custom PIN-pad) that the system does not recognize as a virtual keyboard (and thus Smartlook records interaction events in the area), you should consider using one of the event tracking modes to suppress user interaction tracking temporarily.`}</p>\n    <Alert kind=\"important\" mdxType=\"Alert\">\nBlacklisting such a view is not enough, as user interaction is tracked on blacklisted views. Blacklisting and event tracking are controlled independently. To see how to handle events that could reveal sensitive user information, see Handling Sensitive Data, Event Tracking Modes\n    </Alert>\n    <h2 {...{\n      \"id\": \"analytics-events\"\n    }}>{`Analytics Events`}</h2>\n    <p>{`Besides direct tracking user interaction at the basic level of touches and gestures, Smartlook also tracks how these events are understood by your app code. These events track what UI element has been tapped and how the app reacted to it. All these events are visible in the player timeline. If an analytic event is related to a UI element, the element is highlighted in the screen recording. `}</p>\n    <p>{`Most importantly, these analytics events could be used with Smartlook analytics (link here).`}</p>\n    <h2 {...{\n      \"id\": \"tracking-custom-events\"\n    }}>{`Tracking Custom Events`}</h2>\n    <p>{`Smartlook aims to track the relevant events automatically. It is, however, not fully possible on all platforms. Also, there are use cases when the automated tracking might not provide enough information for your analytics purposes. If this is your app case, here are some handy methods for manual events tracking.`}</p>\n    <p>{`The events created by these methods are treated by Smartlook exactly the way automatically acquired events of the corresponding type. `}</p>\n    <h3 {...{\n      \"id\": \"custom-events\"\n    }}>{`Custom events`}</h3>\n    <p>{`Custom events are identified by a name, and can also have additional optional properties. The additional properties can be used in funnels and any other filtering.`}</p>\n    <Alert kind=\"example\" mdxType=\"Alert\">\n  <CodeBlock snippets={{\n        ios: {\n          swift: `\nSmartlook.trackCustomEvent(name: \"CUSTOM EVENT\", props: [ \"PROP_1\" : \"value 1\"])\n`,\n          'objective-c': `\n[Smartlook trackCustomEventWithName:@\"CUSTOM EVENT\" props:@{ @\"PROP 1\": @\"record value\" }];\n      `\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <h3 {...{\n      \"id\": \"timed-event\"\n    }}>{`Timed event`}</h3>\n    <p>{`In the case you want to measure the duration of some time-sensitive or long-running actions in the app, you can first call `}<inlineCode parentName=\"p\">{`start...`}</inlineCode>{` method and store the returned opaque object that represents the timed event instance.`}</p>\n    <p>{`This call will not send out any event, but once the `}<inlineCode parentName=\"p\">{`track...`}</inlineCode>{` method with the corresponding event reference gets called Smartlook will track the event and store the time interval between the corresponding `}<inlineCode parentName=\"p\">{`start...`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`track...`}</inlineCode>{` calls in its duration property.`}</p>\n    <p>{`In the case you want to track an unsuccessful event, you can also use the `}<inlineCode parentName=\"p\">{`cancel`}</inlineCode>{` variant of the end method and provide the reason for cancellation in an extra parameter of the function.`}</p>\n    <Alert kind=\"example\" mdxType=\"Alert\">\n  <CodeBlock snippets={{\n        ios: {\n          swift: `\nlet eventRef = Smartlook.startTimedCustomEvent(\"duration_event\", props: [ \"start_option\" : startOption ]);\n...\n// some lenghty operation\n...\nif success {\n    // in the case of a successfull outcome\n    Smartlook.trackTimedCustomEvent(eventRef);\n} else {\n    // in the case of a unsucessfull outcome\n    Smartlook.trackTimedCustomEvent(eventRef);\n    Smartlook.trackTimedCustomEventCancel(eventId: eventRef, reason: \"network failure\", props: [\"error\" : error.description])\n}\n`,\n          'objective-c': `\nid eventRef = [Smartlook startTimedCustomEventWithName:@\"duration_event\" props:@{ @\"startOption\" : startOption }];\n...\n// some lenghty operation\n...\nif (success) {\n    [Smartlook trackTimedCustomEventWithEventId:eventRef props:@{ @\"result\" : resultValue } ];\n} else {\n    [Smartlook trackTimedCustomEventCancelWithEventId:eventRef reason:@\"network failure\" props:@{ @\"error\" : error.description }];\n}\n      `\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <p>{`Properties set in the startTimedCustomEvent will be merged with properties set in trackTimedCustomEvent. Properties from the trackTimedCustomEvent will have higher priority and will override conflicting properties from startTimedCustomEvent call.`}</p>\n    <h3 {...{\n      \"id\": \"navigation-events-tracking\"\n    }}>{`Navigation events tracking`}</h3>\n    <p>{`On some platforms, Smartlook is not able to detect all screen transitions (or none e.g. for Unity games or Flutter) out of the box, you can track these events manually:`}</p>\n    <Alert kind=\"example\" mdxType=\"Alert\">\n  <CodeBlock snippets={{\n        ios: {\n          swift: `\nSmartlook.trackNavigationEvent(withControllerId: \"LOGIN_SCREEN\", type: .enter)\n`,\n          'objective-c': `\n[Smartlook trackNavigationEventWithControllerId:@\"LOGIN_SCREEN\" type:SLNavigationTypeEnter];`\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <p>{`where the type is either enter or exit. The exit event also records the duration from the previous corresponding enter event.`}</p>\n    <Alert kind=\"note\" mdxType=\"Alert\">\nProperly dividing the user flow into individual screens is also important for correct heatmap generation, as each heatmap is generated for a particular screen, i.e., interval between two navigation events.\n    </Alert>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}