{"version":3,"sources":["webpack:///../src/conceptual/recording-navigation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","kind","snippets","ios","swift","to","isMDXComponent"],"mappings":"oQAQaA,G,oBAAe,S,yNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,wBADR,wBAGA,qBAAG,kBAAIC,WAAW,KAAf,0EACH,0IAAyH,kBAAIA,WAAW,KAAf,WAAzH,2DACA,qGAAoF,sBAAQA,WAAW,KAAnB,qBAApF,gGAA0O,sBAAQA,WAAW,KAAnB,YAA1O,KACA,gJAA+H,kBAAIA,WAAW,KAAf,UAA/H,uEAAyO,kBAAIA,WAAW,KAAf,WAAzO,KACA,YAAC,IAAD,CAAOC,KAAK,YAAYF,QAAQ,SAAhC,yMAGA,ofACA,sJACA,YAAC,IAAD,CAAOE,KAAK,OAAOF,QAAQ,SAA3B,+GAIA,YAAC,IAAD,CAAOE,KAAK,UAAUF,QAAQ,SAChC,YAAC,IAAD,CAAWG,SAAU,CACfC,IAAK,CACHC,MAAO,qFAGP,iHAGDL,QAAQ,eAEb,0DAAyC,0BAAYC,WAAW,KAAvB,SAAzC,OAAkG,0BAAYA,WAAW,KAAvB,QAAlG,cAAiK,0BAAYA,WAAW,KAAvB,QAAjK,iFACA,2EACA,YAAC,IAAD,CAAMK,GAAG,iCAAiCN,QAAQ,QAAlD,2B,uNAKJH,EAAWU,gBAAiB","file":"component---src-conceptual-recording-navigation-mdx-928fa680c887579cd3fd.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nextgen-docs/nextgen-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Alert, Link, MD } from \"components\";\nimport { usePlatforms } from 'hooks';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"recording-navigation\"\n    }}>{`Recording Navigation`}</h1>\n    <p><em parentName=\"p\">{`This section discusses how is the user navigation in the app recorded`}</em></p>\n    <p>{`Understanding the way user uses the app is the purpose of the analytics. A typical mobile app breaks into several `}<em parentName=\"p\">{`screens`}</em>{`, between them users navigates to achieve their goals. `}</p>\n    <p>{`Smartlook attempts to track the transitions automaticallt and record them as `}<strong parentName=\"p\">{`navigation events`}</strong>{`, that are then available in the Dashboard. Another usage of navigation events is generating `}<strong parentName=\"p\">{`heatmpas`}</strong>{`.`}</p>\n    <p>{`To generate a meaningfull heatmap, a portion of the app UI with stable structure must be used. Smartlook assumes that a `}<em parentName=\"p\">{`screen`}</em>{`, i.e., interval between two subsequent navigation events is such a `}<em parentName=\"p\">{`UI unit`}</em>{`.`}</p>\n    <Alert kind=\"important\" mdxType=\"Alert\">\nProperly dividing the user flow into individual screens important for correct heatmap generation, as each heatmap is generated for a particular screen, i.e., interval between two navigation events.\n    </Alert>\n    <p>{`However, the accuracy and usefulness of these auto-tracked navigation events depends heavily on the way the app UI is composed. Smartlook understands well apps that use standard UI kits a paradigms for each platform. If you app is, however, made using a 3rd party frameworks, e.g., a gaming framework, that Smartlook SDK cannot detect the navigation logic of the app. Consult the API reference for the extent auto-detection of navigation events is available on your platform.`}</p>\n    <p>{`In such a case, in orded to get useful navigation data, navigation events must be tracked programatically, using this method:`}</p>\n    <Alert kind=\"note\" mdxType=\"Alert\">\nThe navigation event recorded by this method is indistinguishable from the auto-detected navigation events.\n    </Alert>\n \n    <Alert kind=\"example\" mdxType=\"Alert\">\n  <CodeBlock snippets={{\n        ios: {\n          swift: `\nSmartlook.trackNavigationEvent(withControllerId: \"LOGIN_SCREEN\", type: .enter)\n`,\n          'objective-c': `\n[Smartlook trackNavigationEventWithControllerId:@\"LOGIN_SCREEN\" type:SLNavigationTypeEnter];`\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <p>{`where the type value is either of `}<inlineCode parentName=\"p\">{`enter`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`exit`}</inlineCode>{` kind. The `}<inlineCode parentName=\"p\">{`exit`}</inlineCode>{` event also records the duration from the previous corresponding enter event.`}</p>\n    <p>{`More details about the navigation events, consult `}</p>\n    <Link to=\"/api_reference#navigation-even\" mdxType=\"Link\">the API reference</Link>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}