{"version":3,"sources":["webpack:///../src/api_reference.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","visibleOn","markup","snippets","android","java","kotlin","cordova","javascript","ionic","typescript","ios","swift","flutter","dart","unity","csharp","react","kind","xml","visobleOn","html","invisibleOn","typecript","isMDXComponent"],"mappings":"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","file":"component---src-api-reference-mdx-cdf94e9fc94876f13b37.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/nextgen-docs/nextgen-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Alert, Link, MD } from \"components\";\nimport { usePlatforms } from 'hooks';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"lifecycle--recording\"\n    }}>{`Lifecycle & recording`}</h1>\n    <h2 {...{\n      \"id\": \"sdk-setup-on-application-start\"\n    }}>{`SDK setup (on application start)`}</h2>\n    <p>{`Smartlook SDK `}<strong parentName=\"p\">{`setup`}</strong>{` needs to be called only `}<strong parentName=\"p\">{`once during application lifetime`}</strong>{` and it should be called `}<strong parentName=\"p\">{`on application startup`}</strong>{`. There is `}<strong parentName=\"p\">{`no need to stop`}</strong>{` recording explicitly `}<strong parentName=\"p\">{`on application closure`}</strong>{`, SDK stops itself automatically.`}</p>\n    <MD visibleOn=\"android\" markup={`\nThe best place to setup the SDK is in \\`onCreate()\\` method of your \\`Application\\` class:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"cordova\" markup={`\nThe best place to setup the SDK is in [deviceready](https://cordova.apache.org/docs/en/5.1.1/cordova/events/events.deviceready.html) callback:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ionic\" markup={`\nThe best place to setup the SDK is in [platform ready](https://ionicframework.com/docs/v3/api/platform/Platform/#ready) callback:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\nThe best place to setup the SDK is in \\`didFinishLaunchingWithOptions\\` method of the \\`ApplicationDelegate\\`:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nimport android.app.Application;\\n\npublic class MyCustomApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Smartlook.setupAndStartRecording(YOUR_API_KEY);\n    }\n}\n      `,\n        kotlin: `\nimport android.app.Application;\\n\nclass MyCustomApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        Smartlook.setupAndStartRecording(YOUR_API_KEY)\n    }\n}\n      `\n      },\n      cordova: {\n        javascript: `\nif(document.readyState === \"complete\") {\n  document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\\n\nfunction onDeviceReady() {\n    Smartlook.setupAndStartRecording({smartlookAPIKey: \"YOUR_API_KEY\"});\n}\n      `\n      },\n      ionic: {\n        typescript: `\nthis.platform.ready().then(() => {\n    this.smartlook.setupAndStartRecording(new SmartlookSetupConfig(\"YOUR API KEY\"));\n}\n      `\n      },\n      ios: {\n        swift: `\nimport Smartlook\n \nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n \n  Smartlook.setup(key: \"YOUR_API_KEY\")\n  Smartlook.startRecording()\n  \n  // other initialization stuff\n    \n  return true\n}\n      `,\n        'objective-c': `\n#import <Smartlook/Smartlook.h>\n    \n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n        \n    [Smartlook setupWithKey: @\"YOUR_API_KEY\"];\n    [Smartlook startRecording];\n  \n    // other initialization stuff\n  \n    return YES;\n}\n      `\n      },\n      flutter: {\n        dart: `\nimport 'package:smartlook/smartlook.dart';\n\\n\nclass _MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    ...\n    Smartlook.setupAndStartRecording('YOUR_API_KEY');\n    ...\n    }\n}\n`\n      },\n      unity: {\n        csharp: `\npublic class NewBehaviourScript : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        SmartlookUnity.Smartlook.SetupAndStartRecording(\"YOUR_API_KEY\");\n    }\n\\n\n    // Update is called once per frame\n    void Update()\n    {\n        ...\n    }\n}\n`\n      },\n      react: {\n        javascript: `\nvar Smartlook = require('smartlook-react-native-wrapper');\nSmartlook.setupAndStartRecording(\"YOUR_API_KEY\");\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" visibleOn=\"android\" mdxType=\"Alert\">\n  If you need to setup SDK later than in Application class, typically if you are fetching your API key, please take a look here.\n    </Alert>\n    <MD visibleOn=\"android,cordova,ionic,flutter,unity,react\" markup={`\nThe easiest way of setting up the SDK is with \\`setupAndStart()\\` method:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\nThe easiest way of setting up the SDK is with \\`setup()\\` method:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setupAndStart(@NotNull String apiKey);\n      `,\n        kotlin: `\nSmartlook.setupAndStart(@NotNull apiKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setupAndStartRecording({smartlookAPIKey: \"YOUR_API_KEY\"});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setupAndStartRecording(new SmartlookSetupConfig(\"YOUR API KEY\"));\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setupAndStartRecording('YOUR_API_KEY');\n      `\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetupAndStartRecording(\"YOUR_API_KEY\");\n      `\n      },\n      react: {\n        javascript: `\nSmartlook.setupAndStartRecording(\"YOUR_API_KEY\");\n    `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android,cordova,ionic,flutter,unity,react\" markup={`\nIt will set the SDK up and also start the recording. If you want to start recording later you can just use:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setup(@NotNull String apiKey);\n      `,\n        kotlin: `\nSmartlook.setup(@NotNull apiKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setup({smartlookAPIKey: \"YOUR_API_KEY\"});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setup(new SmartlookSetupConfig(\"YOUR API KEY\"));\n      `\n      },\n      ios: {\n        swift: `\nclass func setup(withKey key: String)\n      `,\n        'objective-c': `\n+(void)setupWithKey:(nonnull NSString *)key;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setup(String key, [int fps = 2]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.Setup(\"YOUR_API_KEY\");\nSmartlookUnity.Smartlook.Setup(\"YOUR_API_KEY\", fps);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.setup(\"YOUR_API_KEY\", fps);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" visibleOn=\"android\" mdxType=\"Alert\">\n  You need to provide your Smartlook SDK API key which can be acquired in the Smartlook Dashboard.\n    </Alert>\n    <p>{`And then when you want to start the recording call:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startRecording();\n      `,\n        kotlin: `\nSmartlook.startRecording()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startRecording();\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.startRecording();\n      `\n      },\n      ios: {\n        swift: `\nclass func startRecording()\n      `,\n        'objective-c': `\n+ (void)startRecording;\n`\n      },\n      flutter: {\n        dart: `\nSmartlook.startRecording();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StartRecording();\n`\n      },\n      react: {\n        javascript: `\nSmartlook.startRecording();\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"setup-configuration\"\n    }}>{`Setup configuration`}</h3>\n    <TextBlock visibleOn=\"ios,android\" mdxType=\"TextBlock\">\nSome recording parameters can be configured on setup:\n    </TextBlock>\n    <MD visibleOn=\"android\" markup={`\n| Parameter           | Required | Description                                                                                                                                        | Default value        |\n|---------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|\n| apiKey              | yes      | Unique 40 character key identifying your app (can be found in the dashboard).                                                                      | \"\"                   |\n| fps                 | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value you will override frame rate settings from Dashboard! | 2                    |\n| experimental        | no       | Set this to true to enable some experimental features as TextureView/Maps/MapBox recording etc.                                                    | false                |\n| activity            | no       | Actual activity reference is required when setting the SDK outside of Application class. Full example shown here.                                  | null                 |\n| renderingMode       | no       | Define the way SDK is going to capture screen image data. Full documentation here.                                                                 | RenderingMode.NATIVE |\n| renderingModeOption | no       | Further customization of rendering mode.                                                                                                                  | null                 |\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\n\\n\nThe following table describes all available optional parameters. Most of them can be also set by a dedicated method. See the respective documentation section for details.\n\\n\nThe options dictionary keys are constants defined as members of \\`SetupOptionKey\\` enumeration.\n\\n\n| Parameter            | Type                   | Default value | Description                                                                                                                                 \n|----------------------|------------------------|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| .enableCrashlytics   | bool                   | false         | Enables Firebase Crashlytics integration              |\n| .framerate           | int                    | 2             | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value you will override frame rate settings from Dashboard!   |\n| .useAdaptiveFramerate | bool                    | true        | By defaults, Smartlook adapts its recording framerate to the frequency of UI changes in order to lower its footprint in app performace. For details, see FIXME LINK -> <Link to=\"/conceptual/screen-recording-quality\">Screen Recording Quality</Link>. |\n| .renderingMode       | RenderingMode          | native        | Define the way SDK is going to capture screen image data. Full documentation [here](#rendering).   |\n| .renderingModeOption | RenderingModeOption    | none          | Further customize rendering mode. Full documentation [here](#rendering).  |\n| .startNewSession     | bool                   | false         | Always start new session with Smartlook setup. Full documentation [FIXME LINK here]().  |\n| .startNewSessionAndUser | bool                | false         | Always start new session and reset user woth Smartlook setup. Full documentation [FIXME LINK shere]().  |\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"android\" markup={`\nFull SDK setup configuration can be done with \\`SetupOptionsBuilder\\`, this allows you to set any of setup parameters shown above:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\nFull SDK setup configuration can be done with optional \\`setup\\` method parameter:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(@NotNull String apiKey)\n        .setFps(int fps)\n        .setExperimental(boolean experimental)\n        .setActivity(@NonNull Activity activity)\n        .setRenderingMode(@RenderingMode String renderingMode)\n        .setRenderingMode(@RenderingModeOption String renderingModeOption);\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `,\n        kotlin: `\nval builder = Smartlook.SetupOptionsBuilder(@NotNull apiKey: String)\n        .setFps(fps: Int)\n        .setExperimental(experimental: Boolean)\n        .setActivity(@NonNull activity: Activity)\n        .setRenderingMode(@RenderingMode renderingMode: String)\n        .setRenderingMode(@RenderingModeOption renderingModeOption: String)\\n\nSmartlook.setupAndStartRecording(builder.build())\n      `\n      },\n      ios: {\n        swift: `\nclass func setup(key: String, options: [Smartlook.SetupOptionKey : Any]? = nil)\n`,\n        'objective-c': `\n+(void)setupWithKey:(nonnull NSString *)key options:(nullable NSDictionary<SLSetupOptionKey,id> *)options;\n    \n// values in the options dictionary must be objects, e.g.,\n[Smartlook setupWithKey:@\"SOME_API_KEY\" options:@{ SLSetupOptionFramerateKey: @3 }];\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android\" markup={`\nYou can replace the last line with \\`Smartlook.setup()\\` and start the recording later.\n`} mdxType=\"MD\" /> \n    <MD visibleOn=\"cordova,ionic\" markup={`\nRecording **framerate** can be set during setup. Allowed values are from a range from 2 to 10 fps.\n`} mdxType=\"MD\" /> \n    <CodeBlock snippets={{\n      cordova: {\n        javascript: `\nSmartlook.setup({smartlookAPIKey: \"YOUR_API_KEY\", fps: 2});\nSmartlook.setupAndStartRecording({smartlookAPIKey: \"YOUR_API_KEY\", fps: 2});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setup(new SmartlookSetupConfig(smartlookAPIKey: \"YOUR_API_KEY\", fps: number))\nsmartlook.setupAndStartRecording(new SmartlookSetupConfig(smartlookAPIKey: \"YOUR_API_KEY\", fps: number))\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"start-and-stop-recording\"\n    }}>{`Start and stop recording`}</h2>\n    <p>{`Recording can be `}<strong parentName=\"p\">{`started`}</strong>{` or `}<strong parentName=\"p\">{`stopped`}</strong>{` at any time, the only requirement is that the SDK is set up.`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      `,\n        kotlin: `\nSmartlook.startRecording()\nSmartlook.stopRecording()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.startRecording();\nsmartlook.stopRecording();\n      `\n      },\n      ios: {\n        swift: `\nclass func startRecording()\nclass func stopRecording()\n`,\n        'objective-c': `\n+ (void)startRecording;\n+ (void)stopRecording;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StartRecording();\nSmartlookUnity.Smartlook.StopRecording();\n`\n      },\n      react: {\n        javascript: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" mdxType=\"Alert\">\nYou <b>don't need to call</b> <i>stopRecording()</i> on application closure. <b>Recording is stopped automatically</b>.\n    </Alert>\n    <h2 {...{\n      \"id\": \"check-if-sdk-is-recording\"\n    }}>{`Check if SDK is recording`}</h2>\n    <p>{`If you are using `}<inlineCode parentName=\"p\">{`startRecording()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`stopRecording()`}</inlineCode>{` methods it might be handy to know if SDK is currently recording or not. Simply call:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.isRecording();\n      `,\n        kotlin: `\nSmartlook.isRecording()\n      `\n      },\n      cordova: {\n        javascript: `\ncordova.plugins.SmartlookPlugin.isRecording(\n    function(isRecording){\n        //check here\n    }\n)\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.isRecording().then((isRecording) => {\n  alert(isRecording)\n});\n      `\n      },\n      ios: {\n        swift: `\nclass func isRecording() -> Bool\n`,\n        'objective-c': `\n+ (BOOL)isRecording;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.isRecording();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.IsRecording();\n`\n      },\n      react: {\n        javascript: `\nSmartlook.isRecording();\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h1 {...{\n      \"id\": \"sensitive-data-hiding\"\n    }}>{`Sensitive data hiding`}</h1>\n    <MD visibleOn=\"android,ios,react\" markup={`\nWhen using **native** rendering mode, **SDK can record sensitive data in your application**. You can configure recording using methods listed below so sensitive data is not recorded, or you can simply use one of **Wireframe** rendering mode that does not record sensitive data by default.\n`} mdxType=\"MD\" />\n    <Alert kind=\"important\" visibleOn=\"android,ios,react\" mdxType=\"Alert\">\nSensitive elements are <b>hidden locally</b> on the device, no sentive data is transfered over network and stored in our dashboard.\n    </Alert>\n    <MD visibleOn=\"android,ios,react,flutter,unity\" markup={`\n## Blacklisted views\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"flutter, unity\" markup={`\nThis functionality is not available yet.\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"android,ios,react\" markup={`\nYou can hide any view in the recording by marking it as a **blacklisted** view.\\n\nView can be marked as blacklisted by calling:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerBlacklistedView(View view);\nSmartlook.registerBlacklistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.registerBlacklistedView(view: View)\nSmartlook.registerBlacklistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nclass func registerBlacklisted(object: Any)\n`,\n        'objective-c': `\n+ (void)registerBlacklistedObject:(nonnull id)object;\n      `\n      },\n      react: {\n        javascript: `\nSmartlook.registerBlacklistedView(ref);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"example\" visibleOn=\"ios\" mdxType=\"Alert\">\n  <CodeBlock snippets={{\n        ios: {\n          swift: `\nSmartlook.registerBlacklisted(object: someView)\n`,\n          'objective-c': `\n[Smartlook registerBlacklistedObject:self.someView];\n      `\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <MD visibleOn=\"android\" markup={`\nOr can be tagged directly in \\`xml\\` layout file:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\nOr can be tagged directly by an \\`UIView\\` property added by Smartlook:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        xml: `\n<View>\n    <tag android:id=\"@id/smartlook_blacklisted_view\"/>\n</View>\n      `\n      },\n      ios: {\n        swift: `\nvar slSensitive: Bool\n`,\n        'objective-c': `\n@property (nonatomic, assign) IBInspectable BOOL slSensitive;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"example\" visibleOn=\"ios\" mdxType=\"Alert\">\n  <CodeBlock snippets={{\n        ios: {\n          swift: `\nsomeView.slSensitive = true\n`,\n          'objective-c': `\nself.someView.slSensitive = YES;\n      `\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <MD visibleOn=\"android,ios,react\" markup={`\nIf view no longer needs to be blacklisted call:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterBlacklistedView(View view);\nSmartlook.unregisterBlacklistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.unregisterBlacklistedView(view: View)\nSmartlook.unregisterBlacklistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nclass func registerBlacklisted(object: Any)\n`,\n        'objective-c': `\n+ (void)unregisterBlacklistedObject:(nonnull id)object\n      `\n      },\n      react: {\n        javascript: `\nSmartlook.unregisterBlacklistedView(ref);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" visibleOn=\"android,ios,react\" mdxType=\"Alert\">\nBlacklisted view is hidden on recording by single color rectangle. You can configure color of this rectangle by calling:\n      <CodeBlock snippets={{\n        android: {\n          java: `\nSmartlook.setBlacklistedItemsColor(@ColorInt int color);\n      `,\n          kotlin: `\nSmartlook.setBlacklistedItemsColor(@ColorInt color: Int);\n      `\n        },\n        ios: {\n          swift: `\nclass func setBlacklistedItem(color: UIColor)\n`,\n          'objective-c': `\n+ (void)setBlacklistedItemsColor:(nonnull UIColor *)color;\n      `\n        }\n      }} mdxType=\"CodeBlock\" />\nThis is applied for all blacklisted objects.\n    </Alert>\n    <MD visibleOn=\"android,ios,react,flutter,unity\" markup={`\n## Blacklisted classes\n`} mdxType=\"MD\" />\n    <TextBlock visibleOn=\"flutter,unity,react\" mdxType=\"TextBlock\">\nThis functionality is not available yet.\n    </TextBlock>\n    <MD visobleOn=\"android\" markup={`\nIf you dont want to blacklist specific views and rather blacklist all views of given \\`Class\\`, use:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\nYou can also blacklist all instances of a **\\`UIView\\` subclass** or all \\`UIView\\` subclasses that conform some **protocol**:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerBlacklistedClass(Class class);\nSmartlook.registerBlacklistedClasses(List<Class> classes);\n      `,\n        kotlin: `\nSmartlook.registerBlacklistedClass(class: Class)\nSmartlook.registerBlacklistedClasses(classes: List<Class>)\n      `\n      },\n      ios: {\n        swift: `\n// Note: the object can be UIView instance, UIView subclass or a Protocol,\n// see examples below\nclass func registerBlacklisted(object: Any)\n`,\n        'objective-c': `\n// Note: the object can be UIView instance, UIView subclass or a Protocol \n// see examples below\n+ (void)registerBlacklistedObject:(nonnull id)object;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"example\" visibleOn=\"ios\" mdxType=\"Alert\">\n  <CodeBlock snippets={{\n        ios: {\n          swift: `\n// Note: the object can be UIView instance, UIView subclass or a Protocol \nsomeView.slSensitive = true\nSmartlook.registerBlacklisted(object: someView)      \nSmartlook.registerBlacklisted(object: SensitiveDataViewClass.self)      \nSmartlook.registerBlacklisted(object: SensitiveProtocol.self)\n`,\n          'objective-c': `\n// Note: the object can be UIView instance, UIView subclass or a Protocol \nself.someView.slSensitive = true\n[Smartlook registerBlacklistedObject:self.someView];          \n[Smartlook registerBlacklistedObject:SensitiveDataViewClass.class];          \n[Smartlook registerBlacklistedObject:@protocol(SensitiveProtocol)];\n      `\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n\n    <MD visobleOn=\"android\" markup={`\nYou can remove any of blacklisted classes:\n`} mdxType=\"MD\" />\n    <Alert kind=\"note\" visibleOn=\"ios\" mdxType=\"Alert\">\nNote that for convenience, <b>some classes are blacklisted by default</b>: <i>UITextView</i>, <i>UITextField</i> and <i>WKWebView</i>.\n    </Alert>\n    <MD visibleOn=\"ios\" markup={` \nYou can remove any of the blacklisted objects:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterBlacklistedClass(Class class);\nSmartlook.unregisterBlacklistedClasses(List<Class> classes);\n      `,\n        kotlin: `\nSmartlook.unregisterBlacklistedClass(class: Class)\nSmartlook.unregisterBlacklistedClasses(classes: List<Class>)\n      `\n      },\n      ios: {\n        swift: `\nclass func unregisterBlacklisted(object: Any)\n`,\n        'objective-c': `\n+ (void)unregisterBlacklistedObject:(nonnull id)object\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android,ios,react,flutter,unity\" markup={`\n## Whitelisted views\n`} mdxType=\"MD\" />\n    <TextBlock visibleOn=\"flutter,unity,react\" mdxType=\"TextBlock\">\nThis functionality is not available yet.\n    </TextBlock>\n    <p>{`¿`}<em parentName=\"p\">{`NOTE: let us perhaps consider a bit denser documentation of whitelisting (as the methods are equivalent of blacklistig, similar of how it is now in current iOS documentation? `}<a parentName=\"em\" {...{\n          \"href\": \"https://smartlook.github.io/docs/sdk/ios/#whitelisting\"\n        }}>{`https://smartlook.github.io/docs/sdk/ios/#whitelisting`}</a>{`)`}</em>{`?`}</p>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">\nIn case you need some view to be recorded even if its instance of a blacklisted class, you can whitelist it:\n    </TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerWhitelistedView(View view);\nSmartlook.registerWhitelistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.registerWhitelistedView(view: View)\nSmartlook.registerWhitelistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nclass func registerWhitelisted(object: Any)\n`,\n        'objective-c': `\n+ (void)registerWhitelistedObject:(nonnull id)object;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android\" markup={`\nOr you can tag them directly in \\`xml\\` layout file:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\nOr can be tagged directly by an \\`UIView\\` property added by Smartlook:\n`} mdxType=\"MD\" />\n    <Alert kind=\"example\" visibleOn=\"ios,android\" mdxType=\"Alert\">\n  <CodeBlock snippets={{\n        android: {\n          xml: `\n<View>\n    <tag android:id=\"@id/smartlook_whitelisted_view\"/>\n</View>\n      `\n        },\n        ios: {\n          swift: `\nsomeView.slSensitive = false\n`,\n          'objective-c': `\nself.someView.slSensitive = NO;\n      `\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">\nYou can remove view from whitelist by calling:\n    </TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterWhitelistedView(View view);\nSmartlook.unregisterWhitelistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.unregisterWhitelistedView(view: View)\nSmartlook.unregisterWhitelistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.unregisterWhitelisted(object: someView)\n`,\n        'objective-c': `\n[Smartlook unregisterWhitelistedObject:someView];\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"cordova,ionic\" markup={`\nSome elements in your application cannot be recorded because of security (posibly GDPR) reasons.\nAll of theese can be marked and will be hidden on the recording.\n`} mdxType=\"MD\" />\n    <Alert kind=\"important\" visibleOn=\"cordova,ionic\" mdxType=\"Alert\">\nSensitive elements are <b>hidden locally</b> on the device, no sentive data is transfered over network and stored in our dashboard.\n    </Alert>\n    <MD visibleOn=\"cordova,ionic\" markup={`\n## Hidden elements\nSensitive elements can be blacklisted by marking them with \\`.smartlook-hide\\` css class:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      cordova: {\n        html: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      `\n      },\n      ionic: {\n        html: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" visibleOn=\"cordova,ionic\" mdxType=\"Alert\">\n      <b>All inputs</b> are <b>hidden</b> by default except for <i>button</i> and <i>submit</i> types.\n    </Alert>\n    <MD visibleOn=\"cordova,ionic\" markup={`\n## Shown elements\nIf you need to record some input that is hidden by default you can mark it with \\`.smartlook-show\\` css class:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      cordova: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      },\n      ionic: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"no-rendering\"\n    }}>{`No Rendering`}</h2>\n    <p>{`In case your whole screen consists of sensitive data you can tell SDK to not record any screen data. This can be done by switching into \"no‑rendering\" rendering mode:`}</p>\n    <Alert kind=\"example\" mdxType=\"Alert\">\n      <CodeBlock snippets={{\n        android: {\n          java: `\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n      `,\n          kotlin: `\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING)\n      `\n        },\n        cordova: {\n          javascript: `\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NO_RENDERING})\n      `\n        },\n        ionic: {\n          typescript: `\nsmartlook.setRenderingMode(SmartlookRenderingMode.NO_RENDERING());\n      `\n        },\n        ios: {\n          swift: `\nSmartlook.setRenderingMode(to: .noRendering)\n`,\n          'objective-c': `\n[Smartlook setRenderingModeTo:SLRenderingModeNoRendering];\n      `\n        },\n        flutter: {\n          dart: `\nSmartlook.setRenderingMode(SmartlookRenderingMode.no_rendering);\n`\n        },\n        unity: {\n          csharp: `\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType.no_rendering);\n`\n        },\n        react: {\n          javascript: `\nSmartlook.setRenderingMode(\"no_rendering\");\n`\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <Alert kind=\"note\" visibleOn=\"android,ios,react\" mdxType=\"Alert\">\nSDK provides rendering modes that hide sensitive information by simplifying the rendered screen for recording. This can be advantageous because you can see what is the user doing and be safe in sensitive data regard. You can read more about rendering modes here.\n    </Alert>\n    <Alert kind=\"important\" mdxType=\"Alert\">\nSome screens can leak sensitive data even through automatically detected touch events. You can read more about this issue here.\n    </Alert>\n    <p>{`When your application is no longer displaying sensitive screen you can set your rendering mode to preferred variant:`}</p>\n    <Alert kind=\"example\" visibleOn=\"ios,android\" mdxType=\"Alert\">\n      <CodeBlock snippets={{\n        android: {\n          java: `\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\n      `,\n          kotlin: `\nSmartlook.setRenderingMode(RenderingMode.NATIVE)\n      `\n        },\n        cordova: {\n          javascript: `\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NATIVE})\n      `\n        },\n        ionic: {\n          typescript: `\nsmartlook.setRenderingMode(SmartlookRenderingMode.NATIVE());\n      `\n        },\n        ios: {\n          swift: `\nSmartlook.setRenderingMode(to: .native)\n`,\n          'objective-c': `\n[Smartlook setRenderingModeTo:SLRenderingModeNative];\n      `\n        },\n        flutter: {\n          dart: `\nSmartlook.setRenderingMode(SmartlookRenderingMode.native);\n`\n        },\n        unity: {\n          csharp: `\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType.native);\n`\n        },\n        react: {\n          javascript: `\nSmartlook.setRenderingMode(\"native\");\n`\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <MD visibleOn=\"android,ios,flutter,unity,react\" markup={`\n## WebView blacklisting/whitelisting\n`} mdxType=\"MD\" />\n    <TextBlock visibleOn=\"flutter,unity,react\" mdxType=\"TextBlock\">\nThis functionality is not available yet.\n    </TextBlock>\n    <MD visibleOn=\"android\" markup={`\nIf your application has some parts displayed using \\`WebView\\` and you want to record those parts you need to enable \\`WebView\\` recording by removing \\`WebView\\` from list of blacklisted classes:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\nIf your application has some parts displayed using \\`WKWebView\\` and you want to record those parts you need to enable \\`WKWebView\\` recording by removing \\`WKWebView\\` from list of blacklisted classes:\n`} mdxType=\"MD\" />\n    <Alert kind=\"note\" visibleOn=\"ios\" mdxType=\"Alert\">\n      <i>UIWebView</i> class is obsolete and no longer supported by Apple. Thus, its instances and their content are not specifically handled by Smartlook from the <i>sensitivity</i> point of view.\n    </Alert>\n    <Alert kind=\"example\" visibleOn=\"ios,android\" mdxType=\"Alert\">\n      <CodeBlock snippets={{\n        android: {\n          java: `\nSmartlook.unregisterBlacklistedClass(WebView.class);\n      `,\n          kotlin: `\nSmartlook.registerBlacklistedClass(WebView::class.java)\n      `\n        },\n        ios: {\n          swift: `\nSmartlook.unregisterBlacklisted(object: WKWebView.class)\n`,\n          'objective-c': `\n[Smartlook unregisterBlacklistedObject:WKWebView.class];\n      `\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <MD visibleOn=\"android,ios\" markup={`\nNow that you are recording all \\`WebView\\`s please **make sure that all sensitive elements** on the displayed web page **are hidden**. This can be done by marking sensitive html elements with \\`.smartlook-hide\\` css class:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        html: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      `\n      },\n      ios: {\n        html: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android,ios\" markup={`\nAll input inputs are hidden by default except for \\`button\\` and \\`submit\\` types. If you need to record some hidden inputs you can mark these views with \\`.smartlook-show\\` css class:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      },\n      ios: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h1 {...{\n      \"id\": \"user-identification\"\n    }}>{`User Identification`}</h1>\n    <p>{`You can specify user identifier by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setUserIdentifier(@NonNull String identifier);\n      `,\n        kotlin: `\nSmartlook.setUserIdentifier(@NonNull identifier: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setUserIdentifier({identifier: \"sample_identifier\"})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier(identifier: string));\n      `\n      },\n      ios: {\n        swift: `\nclass func setUserIdentifier(_ userIdentifier: String?)\n`,\n        'objective-c': `\n+ (void)setUserIdentifier:(nullable NSString*)userIdentifier;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setUserIdentifier(String key, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetUserIdentifier(string userIdentifier);\n//json string, obtained for example with JsonUtility.ToJson(param)\nSmartlookUnity.Smartlook.SetUserIdentifier(string userIdentifier, string properties);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.setUserIdentifier(idKey, map);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" mdxType=\"Alert\">\nYou can then lookup identifiers in the Dashboard to find specific user’s recordings.\n    </Alert>\n    <h2 {...{\n      \"id\": \"user-properties\"\n    }}>{`User properties`}</h2>\n    <TextBlock visibleOn=\"flutter,unity,react\" mdxType=\"TextBlock\">\nThis functionality is described in <b>User Identification</b> section.\n    </TextBlock>\n    <MD visibleOn=\"android\" markup={`\nAdditional user information such as \\`name\\`, \\`email\\`, etc. can be set using \\`UserProperties\\` helper class and its methods:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nUserProperties userProperties = new UserProperties();\nuserProperties.putEmail(\"sample@email.com\");\nuserProperties.putName(\"John Doe\");\nSmartlook.setUserProperties(userProperties);\n      `,\n        kotlin: `\nval userProperties = UserProperties().apply {\n    putEmail(\"sample@email.com\")\n    putName(\"John Doe\")\n}\nSmartlook.setUserProperties(userProperties)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" visibleOn=\"android\" mdxType=\"Alert\">\nIf you set <i>email</i> or <i>name</i> property it will be displayed in the list of visitors in the Smartlook dashboard. Otherwise <i>identifier</i> is used.\n    </Alert>\n    <MD visibleOn=\"android\" markup={`\nIf there is no helper method for the data you want to set to user properties use \\`put()\\` method that accepts combination of \\`key\\` and \\`value\\`.\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nUserProperties userProperties = new UserProperties();\nuserProperties.put(\"key\", \"value\");\nSmartlook.setUserProperties(userProperties);\n      `,\n        kotlin: `\nval userProperties = UserProperties()\nuserProperties.put(\"key\", \"value\")\nSmartlook.setUserProperties(userProperties)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android\" markup={`\nAll helper and \\`put()\\` method have optional parameter \\`immutable\\` if set to **true**, the value that has been set for the key is going to be immutable.\nThis means it cannot be set again (new value will **not overrride** the old one).\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"cordova,ionic\" markup={`\nAdditional user information, such as \\`name\\`, \\`email\\` and other custom properties can be set by calling:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      cordova: {\n        javascript: `\ncordova.plugins.SmartlookPlugin.setUserIdentifier(\n    {identifier: \"CordovaUser\", sessionProperties: {name: \"Cordova\", email: \"cordova@example.com\"}})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier(identifier: string, sessionProperties: {}));\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"ios\" markup={`\nAdditional custom properties can be added to each recording session by calling:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nclass func setSessionProperty(value: String, forName name: String)\n`,\n        'objective-c': `\n+ (void)setSessionPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name;\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"ios\" markup={`\nYou will see these properties in the Dashboard at Visitor details.\n\\n    \nIf you do want locking a session property value to protect it against accidental further changes. Immutable property value cannot be changes once it is set.\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nstatic var immutable: SLPropertyOption\n \nclass func setSessionProperty(value: String, forName name: String, options: SLPropertyOption)\n`,\n        'objective-c': `\ntypedef NS_OPTIONS(NSUInteger, SLPropertyOption) {\n    SLPropertyOptionDefaults    = 0,\n    SLPropertyOptionImmutable   = 1 << 0\n};\n+ (void)setSessionPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name withOptions:(SLPropertyOption)options;\n`\n      }\n    }} mdxType=\"CodeBlock\" />  \n    <Alert kind=\"example\" visibleOn=\"ios\" mdxType=\"Alert\">\n  <CodeBlock snippets={{\n        ios: {\n          swift: `\nSmartlook.setSessionProperty(value: \"immutable-value\", forName: \"my-property\", options: .immutable)\n`,\n          'objective-c': `\n[Smartlook setSessionPropertyValue:@\"immutable-value\" forName:@\"my-property\" withOptions:SLPropertyOptionImmutable];\n      `\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <h1 {...{\n      \"id\": \"analytics\"\n    }}>{`Analytics`}</h1>\n    <MD visibleOn=\"android, ios, react\" markup={`\nSome analytic events are recorded out-of-box:\n* Activity/Fragment changes\n* Focus changes\n* Clicked views\n* Application crashes\n* For everything else you can use custom events.\n`} mdxType=\"MD\" />\n    <Alert kind=\"note\" visibleOn=\"android\" mdxType=\"Alert\">\nTIP: Names of some automatically detected events can be customized.\n    </Alert>\n    <MD visibleOn=\"cordova, ionic\" markup={`\nOn web based frameworks we are not able to autodetect all events like on native frameworks. With that said we are still able to detect Application crashes.\nFor everything else you need to use custom events.\n`} mdxType=\"MD\" />\n    <h2 {...{\n      \"id\": \"custom-event\"\n    }}>{`Custom event`}</h2>\n    <p>{`You can track simple custom event by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackCustomEvent(@NonNull String eventName);\n      `,\n        kotlin: `\nSmartlook.trackCustomEvent(@NonNull eventName: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackCustomEvent({name: \"sample_event\"})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.trackCustomEvent(new SmartlookCustomEvent(name: string));\n      `\n      },\n      ios: {\n        swift: `\nclass func trackCustomEvent(name eventName: String)\n`,\n        'objective-c': `\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.trackCustomEvent(String eventName);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.TrackCustomEvent(string eventName);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.trackCustomEvent(key);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android\" markup={`\nAdditional data serialized as \\`JSONObject\\`, \\`Bundle\\`, \\`String\\` with valid json format or key/value pair can be added to custom event:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"cordova,ionic\" markup={`\nAddition data passed as a \\`object\\` can be added to custom event:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\nCustom event also accepts a dictionary of string key/values as event properties.\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackCustomEvent(@NonNull String eventName, JSONObject eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, Bundle eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, String validJsonString);\nSmartlook.trackCustomEvent(@NonNull String eventName, @NotNull String key, String value);\n      `,\n        kotlin: `\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: JSONObject);\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: Bundle);\nSmartlook.trackCustomEvent(@NonNull eventName: String, validJsonString: String);\nSmartlook.trackCustomEvent(@NonNull eventName: String, @NotNull key: String, value: String);\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackCustomEvent(\n    {name: \"sample_event\", eventProperties: {id: \"sample_id\", text: \"sample text\"}})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.trackCustomEvent(new SmartlookCustomEvent(name: string, eventProperties: {}));\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.trackCustomEvent(name: String, props: [String : String]?)\n`,\n        'objective-c': `\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.trackCustomEvent(String eventName, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\n    //json string, obtained for example with JsonUtility.ToJson(param)\nSmartlookUnity.TrackCustomEvent(string eventName, string properties);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.trackCustomEvent(key, map);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" visibleOn=\"android,cordova,ionic\" mdxType=\"Alert\">\nEvent properties will effectively use only flat object.\nThis means that if you pass object that includes objects or arrays as a child elements these elements are goint to be ignored.\n    </Alert>\n    <Alert kind=\"note\" visibleOn=\"android\" mdxType=\"Alert\">\nIf you struggle with serialization of your data take a look here.\n    </Alert>\n    <h2 {...{\n      \"id\": \"navigation-event\"\n    }}>{`Navigation event`}</h2>\n    <p>{`You can track screen/navigation transitions manually by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackNavigationEvent(@NotNull String name, @ViewState String viewState);\n      `,\n        kotlin: `\nSmartlook.trackNavigationEvent(@NotNull name: String, @ViewState viewState: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackNavigationEvent({name: \"sample_screen\", viewState: Smartlook.ViewState.START})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.trackNavigationEvent(new SmartlookNavigationEvent(name: string, viewState: SmartlookViewState))\n      `\n      },\n      ios: {\n        swift: `\nstatic let enter: Smartlook.NavigationEventType\nstatic let exit: Smartlook.NavigationEventType\n \nSmartlook.trackNavigationEvent(withControllerId controllerId: String, type: Smartlook.NavigationEventType)\n`,\n        'objective-c': `\nSLNavigationType const _Nonnull SLNavigationTypeEnter;\nSLNavigationType const _Nonnull SLNavigationTypeExit;\n \n+ (void)trackNavigationEventWithControllerId:(nonnull NSString *)controllerId type:(nonnull SLNavigationType)type;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.trackNavigationEvent(String key, SmartlookNavigationEventType type);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.TrackNavigationEvent(string screenName, NavigationEventType direction);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.trackNavigationEvent(screenName, \"enter\"/\"exit\");\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android,cordova,ionic\" markup={`\nwhere \\`viewState\\` can be either \\`ViewState.START\\` or \\`ViewState.STOP\\`.\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\nwhere the \\`type\\` could flag the event as either \\`enter\\` or \\`exit\\` of the navigation controller.\n`} mdxType=\"MD\" />\n    <Alert kind=\"important\" visibleOn=\"unity\" mdxType=\"Alert\">\nYou need to track navigation events manually, because Unity apps typically consist of single activity.\n    </Alert>\n    <Alert kind=\"important\" visibleOn=\"cordova, ionic\" mdxType=\"Alert\">\nYou need to track navigation events manually, because web technology based apps typically consist of single activity.\n    </Alert>\n    <MD visibleOn=\"android\" markup={`\nYou can also explicitly tell the SDK if the navigation event happened between \\`Activities\\` or \\`Fragments\\`:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackNavigationEvent(@NotNull String name, @ViewType String type, @ViewState String viewState);\n      `,\n        kotlin: `\nSmartlook.trackNavigationEvent(@NotNull name: String, @ViewType type: String, @ViewState viewState: String)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android\" markup={`\nwhere \\`viewType\\` is one of \\`ViewType.ACTIVITY\\` or \\`ViewType.FRAGMENT\\`.\n`} mdxType=\"MD\" />\n    <h2 {...{\n      \"id\": \"timed-event\"\n    }}>{`Timed event`}</h2>\n    <p>{`In case you want to measure the duration of any time-sensitive or long-running actions in the app (for example download/upload). You can call one of:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startTimedCustomEvent(@NotNull String eventName);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, JSONObject eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, Bundle eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.startTimedCustomEvent(@NotNull eventName: String)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: JSONObject)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: Bundle)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startTimedCustomEvent({name: \"sample_timed_event\"});\nSmartlook.startTimedCustomEvent({name: \"sample_timed_event\", eventProperties: {sample: \"object\"}});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.startTimedCustomEvent(new SmartlookCustomEvent(name: string));\nsmartlook.startTimedCustomEvent(new SmartlookCustomEvent(name: string, eventProperties: {}));\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.startTimedCustomEvent(name: String, props: [String : String]?) -> Any\n`,\n        'objective-c': `\n+ (id _Nonnull)startTimedCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.startTimedCustomEvent(String eventName, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StartTimedCustomEvent(string eventName);\nSmartlookUnity.Smartlook.StartTimedCustomEvent(string eventName, string properties)\n`\n      },\n      react: {\n        javascript: `\nSmartlook.startTimedCustomEvent(\"sample_timed_event\", {prop: \"propValue\"});\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`This will not send out any event but returns a unique `}<inlineCode parentName=\"p\">{`eventId`}</inlineCode>{` that `}<strong parentName=\"p\">{`needs to be stored`}</strong>{` and its used to stop/cancel custom timed event.`}</p>\n    <p>{`To send out event with duration you need to call one of:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.stopTimedCustomEvent(@NotNull String eventId);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, JSONObject eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, Bundle eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: JSONObject)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: Bundle)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.stopTimedCustomEvent({eventId: \"event_id\", eventProperties: {sample: \"object\"}});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.stopTimedCustomEvent(new SmartlookTimedCustomEventStop(eventId: string, eventProperties: {})});\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.stopTimedCustomEvent(String key, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StopTimedCustomEvent(string eventId);\nSmartlookUnity.Smartlook.StopTimedCustomEvent(string eventId, string properties);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.stopTimedCustomEvent(\"event_id\", {prop: \"propValue\"});\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`with corresponding `}<inlineCode parentName=\"p\">{`eventId`}</inlineCode>{` obtained from startTimedCustomEvent.`}</p>\n    <Alert kind=\"note\" mdxType=\"Alert\">\nNOTE: Properties set in start will be <b>merged</b> with properties set in stop/cancel. Properties from stop/cancel have higher priority and will rewrite conflicting properties from start.\n    </Alert>\n    <p>{`In case given action failed you can call `}<inlineCode parentName=\"p\">{`cancelTimedCustomEvent()`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`stopTimedCustomEvent()`}</inlineCode>{` and provide a `}<strong parentName=\"p\">{`reason`}</strong>{` of failure:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, JSONObject eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, Bundle eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: JSONObject)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: Bundle)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.cancelTimedCustomEvent({eventId: \"event_id\", reason: \"cancel reason\" eventProperties: {sample: \"object\"}});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.cancelTimedCustomEvent(new SmartlookTimedCustomEventCancel(eventId: string, reason: string, eventProperties: {})});\n      `\n      },\n      ios: {\n        swift: `\n// to track successfull events\nSmartlook.trackTimedCustomEvent(eventId: Any, props: [String : String]?)\n// to track event cancellation\nSmartlook.trackTimedCustomEventCancel(eventId: Any, reason: String?, props: [String : String]?)\n`,\n        'objective-c': `\n// to track successfull events\n+ (void)trackTimedCustomEventWithEventId:(id _Nonnull)eventId props:(nullable NSDictionary<NSString*, NSString*>*)props;\n// to track event cancellation\n+ (void)trackTimedCustomEventCancelWithEventId:(id _Nonnull)eventId reason:(NSString *_Nullable)reason props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.cancelTimedCustomEvent(String key, String reason, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.CancelTimedCustomEvent(string eventId, string reason);\nSmartlookUnity.Smartlook.CancelTimedCustomEvent(string eventId, string reason, string properties);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.stopTimedCustomEvent(\"event_id\", \"reason\", {prop: \"propValue\"});\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"example\" visibleOn=\"android,cordova,ionic,ios\" mdxType=\"Alert\">\nTypical use of timed event might look like this:\n      <CodeBlock snippets={{\n        android: {\n          java: `\nString eventID = Smartlook.startTimedCustomEvent(\"duration_event\");\nThread.sleep(1000); //long running operation\nSmartlook.stopTimedCustomEvent(eventId);\n      `,\n          kotlin: `\nval eventID = Smartlook.startTimedCustomEvent(\"duration_event\")\nThread.sleep(1000) //long running operation\nSmartlook.stopTimedCustomEvent(eventId)\n      `\n        },\n        cordova: {\n          javascript: `\nvar eventID = Smartlook.startTimedCustomEvent({name: \"duration_event\"});\nsetTimeout(function() {\nSmartlook.stopTimedCustomEvent({eventId: eventId})\n}, 1000);\n      `\n        },\n        ios: {\n          swift: `\nlet eventRef = Smartlook.startTimedCustomEvent(\"duration_event\");\n// some lenghty operation\nSmartlook.trackTimedCustomEvent(eventRef);\n`,\n          'objective-c': `\nid eventRef = [Smartlook startTimedCustomEventWithName:@\"duration_event\"];\n// some lenghty operation\n[Smartlook trackTimedCustomEventCancelWithEventId:eventRef];\n      `\n        }\n      }} mdxType=\"CodeBlock\" />\nIn this case <i>duration_event</i> will have duration property set to circa 1000ms.\n    </Alert>\n    <MD visibleOn=\"android\" markup={`\n## Customize automatic event detection\nFor some automatically detected events SDK tries to figure out the name from application context:\n* **click event** - Event name consists of \\`Activity\\` name, \\`View\\` class (Button, etc.) and \\`id\\`.\n* **navigation event** - Event name is set as \\`Activity\\`/\\`Fragment\\` name.\\n\nBut sometimes it's impossible to name an event with an easy to read and descriptive name. Because of this SDK provides you with an option to personalize event names.\\n\n### Name click events\nSo a click on a given view has a custom event name instead of id it can be tagged directly in the XML layout file:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        xml: `\n<View>\n    <tag android:id=\"@id/smartlook_custom_name\" android:value=\"custom_name\"/>\n</View>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"example\" visibleOn=\"android\" mdxType=\"Alert\">\nIf View has <i>smartlook_custom_name</i> set, clicking on this view will trigger an event with name consisting of <i>Activity</i> name, <i>View</i> class (<i>Button</i>, etc.) and <i>smartlook_custom_name</i>.\n    </Alert>\n    <MD visibleOn=\"android\" markup={`\n### Name navigation events\nCustom names for navigation events can be set in two different ways. \\`Activity\\`/\\`Fragment\\` can implement \\`SmartlookNamedController\\` interface:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\npublic class SettingsActivity extends AppCompatActivity implements SmartlookNamedController {\n    @NotNull\n    @Override\n    public String getCustomName() {\n        return \"custom_activity_name\";\n    }\n}\n      `,\n        kotlin: `\nclass SettingsActivity : AppCompatActivity(), SmartlookNamedController {\n    @NotNull\n    override fun getCustomName(): String {\n        return \"custom_activity_name\";\n    }\n}\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android\" markup={`\nOr \\`Activity\\`/\\`Fragment\\` root view can be tagged directly in \\`XML\\` layout file:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        xml: `\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<View>\n\t<tag android:id=\"@id/smartlook_custom_controller_name\" android:value=\"custom_name\"/>\\n\n\t<!-- child views -->\n</View>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"global-event-properties\"\n    }}>{`Global event properties`}</h2>\n    <p>{`SDK lets you set data that will be attached to every event. We call these `}<strong parentName=\"p\">{`global event properties`}</strong>{`.\nYou can set global event properties:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setGlobalEventProperties(JSONObject globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(Bundle globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(String globalEventPropertiesJson, boolean immutable);\nSmartlook.setGlobalEventProperty(@NotNull String key, @NotNull String value, boolean immutable);\n      `,\n        kotlin: `\nSmartlook.setGlobalEventProperties(globalEventProperties: JSONObject, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventProperties: Bundle, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventPropertiesJson: String, immutable: Boolean)\nSmartlook.setGlobalEventProperty(@NotNull key: String, @NotNull value: String, immutable: Boolean)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setGlobalEventProperties({globalEventProperties: {sample: \"property\"}, immutable: true/false});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setGlobalEventProperties({globalEventProperties: {sample: \"property\"}, immutable: true/false});\n      `\n      },\n      ios: {\n        swift: `\nclass func setGlobalEventProperty(value: String, forName name: String)\n  \nstatic var immutable: SLPropertyOption \nclass func setGlobalEventProperty(value: String, forName name: String, options: SLPropertyOption)\n`,\n        'objective-c': `\n+ (void)setGlobalEventPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name;\n  \ntypedef NS_OPTIONS(NSUInteger, SLPropertyOption) {\n    SLPropertyOptionDefaults    = 0,\n    SLPropertyOptionImmutable   = 1 << 0\n};\n+ (void)setGlobalEventPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name withOptions:(SLPropertyOption)options;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setGlobalEventProperty(String key, String value, bool immutable)\nSmartlook.setGlobalEventProperties(Object map, bool immutable)\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetGlobalEventProperty(string key, string value, bool immutable);\nSmartlookUnity.Smartlook.SetGlobalEventProperties(string properties, bool immutable);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.setGlobalEventProperty(key, value, immutable);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"example\" visibleOn=\"ios\" mdxType=\"Alert\">\n  <CodeBlock snippets={{\n        ios: {\n          swift: `\nSmartlook.setGlobalEventProperty(value: \"value\", forName: \"my-property\");\nSmartlook.setGlobalEventProperty(value: \"immutable-value\", forName: \"my-immutable-property\", options: .immutable)\n`,\n          'objective-c': `\n[Smartlook setGlobalEventPropertyValue:@\"value\" forName:@\"my-property\"];\n[Smartlook setGlobalEventPropertyValue:@\"immutable-value\" forName:@\"my-immutable-property\" withOptions:SLPropertyOptionImmutable];\n      `\n        }\n      }} mdxType=\"CodeBlock\" />\n    </Alert>\n    <p>{`Properties set to be `}<strong parentName=\"p\">{`immutable`}</strong>{` have the `}<strong parentName=\"p\">{`highest`}</strong>{` priority and once set they `}<strong parentName=\"p\">{`cannot be overridden`}</strong>{` (only removed).`}</p>\n    <Alert kind=\"note\" mdxType=\"Alert\">\nGlobal event properties have higher priority so in the merging process they will override custom properties with the same key.\n    </Alert>\n    <h2 {...{\n      \"id\": \"remove-global-event-properties\"\n    }}>{`Remove global event properties`}</h2>\n    <p>{`If you want to remove global property with a given key call:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.removeGlobalEventProperty(String propertyKey);\n      `,\n        kotlin: `\nSmartlook.removeGlobalEventProperty(propertyKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.removeGlobalEventProperty({key: \"property_key\"});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.removeGlobalEventProperty(SmartlookGlobalEventPropertyKey(key: string))\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.removeGlobalEventProperty(forName: String)\n`,\n        'objective-c': `\n+ (void)removeGlobalEventPropertyForName:(nonnull NSString *)name;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.removeGlobalEventProperty(String key)\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.RemoveGlobalEventProperty(string key);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.removeGlobalEventProperty(key);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Or you can remove all global event properties at once:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.removeAllGlobalEventProperties();\n      `,\n        kotlin: `\nSmartlook.removeAllGlobalEventProperties()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.removeAllGlobalEventProperties();\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.removeAllGlobalEventProperties()\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.clearGlobalEventProperties()\n`,\n        'objective-c': `\n+ (void)clearGlobalEventProperties;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.removeAllGlobalEventProperties()\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.RemoveAllGlobalEventProperties();\n`\n      },\n      react: {\n        javascript: `\nSmartlook.removeAllGlobalEventProperties();\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" mdxType=\"Alert\">\nGlobal event properties are stored until they are not removed or the app is uninstalled.\n    </Alert>\n    <h2 {...{\n      \"id\": \"event-tracking-modes\"\n    }}>{`Event tracking modes`}</h2>\n    <MD invisibleOn=\"android,ios,cordova,ionic\" markup={`\nSometimes it can be beneficial to disable automatically detected or all events due to security reasons. This can be done using one of the **event tracking modes**:\n`} mdxType=\"MD\" />\n    <TextBlock visibleOn=\"flutter,unity,react\" mdxType=\"TextBlock\">\nThis functionality is not available yet.\n    </TextBlock>\n    <MD invisibleOn=\"android\" markup={`\n* **FULL_TRACKING** this a default state. SDK tracks all automatically detected events along with all user defined events.\n* **IGNORE_USER_INTERACTION** automatically detected events will not be tracked. User defined events are still enabled.\n* **NO_TRACKING** no analytic events are enabled.\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\n* \\`fullTracking\\`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`ignoreUserInteractionEvents\\`: automatically detected events will not be tracked. User defined events are still enabled.\n* \\`noTracking\\`: no analytic events are enabled.\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"cordova\" markup={`\n* \\`Smartlook.RenderingMode.FULL_TRACKING\\`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`Smartlook.RenderingMode.IGNORE_USER_INTERACTION\\`: automatically detected events will not be tracked. User defined events are still enabled.\n* \\`Smartlook.RenderingMode.NO_TRACKING\\`: no analytic events are enabled.\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ionic\" markup={`\n* \\`SmartlookEventTrackingMode.FULL_TRACKING()\\`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`SmartlookEventTrackingMode.IGNORE_USER_INTERACTION()\\`: automatically detected events will not be tracked. User defined events are still enabled.\n* \\`SmartlookEventTrackingMode.NO_TRACKING()\\`: no analytic events are enabled.\n`} mdxType=\"MD\" />\n    <MD invisibleOn=\"android,ios,cordova,ionic\" markup={`\nEvent tracking mode can changed **anytime** during the application run:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setEventTrackingMode(@EventTrackingMode String eventTrackingMode);\n      `,\n        kotlin: `\nSmartlook.setEventTrackingMode(@EventTrackingMode eventTrackingMode: String);\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setEventTrackingMode({eventTrackingMode: Smartlook.EventTrackingMode.FULL_TRACKING});\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setEventTrackingMode(SmartlookEventTrackingMode.FULL_TRACKING());\n      `\n      },\n      ios: {\n        swift: `\nstatic let fullTracking: Smartlook.EventTrackingMode\nstatic let ignoreUserInteractionEvents: Smartlook.EventTrackingMode\nstatic let noTracking: Smartlook.EventTrackingMode\n  \nclass func setEventTrackingMode(to eventTrackingMode: Smartlook.EventTrackingMode)\nclass func currentEventTrackingMode() -> Smartlook.EventTrackingMode\n`,\n        'objective-c': `\nSLEventTrackingMode const SLEventTrackingModeFullTracking;\nSLEventTrackingMode const SLEventTrackingModeIgnoreUserInteractionEvents;\nSLEventTrackingMode const SLEventTrackingModeNoTracking;\n  \n+ (void)setEventTrackingModeTo:(nonnull SLEventTrackingMode)eventTrackingMode;\n+ (nonnull SLEventTrackingMode)currentEventTrackingMode;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" visibleOn=\"android,ios,cordova,ionic\" mdxType=\"Alert\">\nTake a look at pin code keyboard sample, demonstrating usage of analytic event modes.\n    </Alert>\n    <MD visibleOn=\"android,ios,cordova,ionic\" markup={`\n# Rendering\nSDK can use different methods of capturing screen image data. We call these rendering modes.\n## Set rendering mode\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"android\" markup={`\nYou can change rendering mode on SDK setup using builder:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios,cordova,ionic\" markup={`\nRendering mode can be set on SDK setup, e.g.:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(@RenderingMode String renderingMode);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `,\n        kotlin: `\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(@RenderingMode String renderingMode)\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build())\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setupAndStartRecording({smartlookAPIKey: \"YOUR_API_KEY\", renderingMode: Smartlook.RenderingMode.NATIVE});\n      `\n      },\n      ionic: {\n        typescript: `\nSmartlook.setupAndStartRecording(new SmartlookSetupConfig(\"YOUR_API_KEY\", null, SmartlookRenderingMode.NATIVE()));\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.setup(key: YOUR_API_KEY, options: [.renderingMode: Smartlook.RenderingMode.wireframe]);\n`,\n        'objective-c': `\n[Smartlook setupWithKey:@\"YOUR_API_KEY\" options:@{ SLSetupOptionRenderingModeOptionsKey: SLRenderingModeOptionBlueprintWireframe }];\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android,ios,cordova,ionic\" markup={`\nOr at anytime during application run using:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(@RenderingMode String renderingMode);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(@RenderingMode renderingMode: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NATIVE});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setRenderingMode(renderingMode: SmartlookRenderingMode);\n      `\n      },\n      ios: {\n        swift: `\nclass func setRenderingMode(to renderingMode: Smartlook.RenderingMode)\n`,\n        'objective-c': `\n+ (void)setRenderingModeTo:(nonnull SLRenderingMode)renderingMode;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setRenderingMode(SmartlookRenderingMode renderingMode);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType renderingMode);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.SetRenderingMode(\"native\"/\"no_rendering\"/\"wireframe\");\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android,ios,cordova,ionic\" markup={`\nRendering modes available:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"android\" markup={`\n* \\`RenderingMode.NATIVE\\`\n* \\`RenderingMode.WIREFRAME\\`\n* \\`RenderingMode.NO_RENDERING\\`\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nSmartlook.RenderingMode.native\nSmartlook.RenderingMode.wireframe\nSmartlook.RenderingMode.noRendering\n`,\n        'objective-c': `\nSLRenderingMode const SLRenderingModeNative;\nSLRenderingMode const SLRenderingModeWireframe;\nSLRenderingMode const SLRenderingModeNoRendering;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"cordova\" markup={`\n* \\`Smartlook.RenderingMode.NATIVE\\`\n* \\`Smartlook.RenderingMode.NO_RENDERING\\`\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ionic\" markup={`\n* \\`SmartlookRenderingMode.NATIVE()\\`\n* \\`SmartlookRenderingMode.NO_RENDERING()\\`\n`} mdxType=\"MD\" />\n    <Alert kind=\"note\" visibleOn=\"android,ios,cordova,ionic\" mdxType=\"Alert\">\n      <i>NO_RENDERING</i> mode does not record any screen data, this is beneficial on screens that include sensitive data, read more.\n    </Alert>\n    <MD visibleOn=\"android,ios\" markup={`\n## Rendering mode option\n\\`WIREFRAME\\` rendering mode can be further configured by \\`renderingModeOption\\`:\\n\nRendering mode option can be set on setup:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(@RenderingModeOption String renderingModeOption);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `,\n        kotlin: `\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(@RenderingModeOption renderingModeOption: String);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n        `\n      },\n      ios: {\n        swift: `\nclass func  Smartlook.setup(key: String,\n                        options: [\n                          .renderingMode:Smartlook.RenderingMode,\n                          .renderingModeOption:Smartlook.RenderingModeOption\n                        ])\n          `,\n        'objective-c': `\n+(void)setupWithKey:(nonnull NSString *)key \n            options:@{\n              SLSetupOptionRenderingModeKey:SLRenderingMode,\n              SLSetupOptionRenderingModeOptionsKey:SLRenderingModeOption\n            };\n        `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android,ios\" markup={`\nOr at anytime during application run using:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, @RenderingModeOption String renderingModeOption);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, @RenderingModeOption renderingModeOption: String)\n      `,\n        ios: {\n          swift: `\nclass func setRenderingMode(to renderingMode: Smartlook.RenderingMode, option renderingModeOption: Smartlook.RenderingModeOption?)\n`,\n          'objective-c': `\n+ (void)setRenderingModeTo:(nonnull SLRenderingMode)renderingMode withOption:(nullable SLRenderingModeOption)renderingModeOption\n      `\n        }\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android\" markup={`\nRendering mode options for \\`WIREFRAME\\` rendering mode:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"android\" markup={`\n* \\`RenderingMode.WIREFRAME\\`\n* \\`RenderingMode.BLUEPRINT\\`\n* \\`RenderingMode.ICON_BLUEPRINT\\`\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nSmartlook.RenderingModeOption.none\nSmartlook.RenderingModeOption.colorWireframe\nSmartlook.RenderingModeOption.blueprintWireframe\nSmartlook.RenderingModeOption.iconBlueprintWireframe\n`,\n        'objective-c': `\nSLRenderingModeOption const SLRenderingModeOptionNone;\nSLRenderingModeOption const SLRenderingModeOptionColorWireframe;\nSLRenderingModeOption const SLRenderingModeOptionBlueprintWireframe;\nSLRenderingModeOption const SLRenderingModeOptionIconBlueprintWireframe;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android\" markup={`\n# Network intercepting\nYou can track your apps' HTTP traffic using the network inceptor provided by the SDK. This feature is available to you if you are using **OkHttp** for your HTTP/REST communication.\n`} mdxType=\"MD\" />\n    <Alert kind=\"note\" visibleOn=\"android\" mdxType=\"Alert\">\nIf you are using another HTTP library that allows intercepting, please feel free to submit a feature request on our github.\n    </Alert>\n    <MD visibleOn=\"android\" markup={`\n## OkHttp interceptor\nIf you are using \\`OkHttp\\` you can add Smartlook interceptor as a another \\`NetworkInterceptor\\` when creating a \\`OkHttpClient\\` like this:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nOkHttpClient client = new OkHttpClient.Builder()\n    .addNetworkInterceptor(new SmartlookOkHttpInterceptor())\n    .build();\n      `,\n        kotlin: `\nval client = OkHttpClient.Builder()\n    .addNetworkInterceptor(SmartlookOkHttpInterceptor())\n    .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android\" markup={`\nWe will **not read or send out any body data**, we are reading and sending only these request metadata:\n* **Request url** that can be stripped of any sensitive data -> read more.\n* **Http method** used for this request.\n* **Request headers** that can be filtered out so they do not leak any sensitive data.\n* **Response headers** that are filtered out so they do not leak any sensitive data.\n* **Protocol** negotiated by this connection.\n* **Duration** between request and response/failure.\n* **Request status** stating if the request was successful or eventually how it failed, can be one of:\n  * Ok\n  * Error\n  * Abort\n  * Timeout\n* **Status code** of http response.\n* Flag stating if response was received from **cache**.\n`} mdxType=\"MD\" />\n    <Alert kind=\"note\" visibleOn=\"android\" mdxType=\"Alert\">\nAll intercepted requests can be displayed in <b>dev tools</b> on every recording.\n    </Alert>\n    <MD visibleOn=\"android\" markup={`\n### Url masks\nYou can hide sensitive parts of request URLs using \\`UrlMask\\`:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew UrlMask(String regex);\nnew UrlMask(String regex, String replaceWith);\n      `,\n        kotlin: `\nUrlMask(regex: String)\nUrlMask(regex: String, replaceWith: String)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" visibleOn=\"android\" mdxType=\"Alert\">\nIf you don't specify <i>replaceWith</i> <i>String</i> explicitly the default replace <i>String</i> is used.\nYou need to initialize <i>SmartlookOkHttpInterceptor</i> using <i>Builder</i> to define used <i>UrlMask</i>s:\n    </Alert>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew SmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(UrlMask urlMask)\n                .build();\n      `,\n        kotlin: `\nSmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(urlMask: UrlMask)\n                .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"example\" visibleOn=\"android\" mdxType=\"Alert\">\nWe are intercepting request with URL containing sensitive query named <i>secret</i>:\n      <br />\n      <i>https://example.com/page?secret=password&second=query</i>\n      <br />\nThe content of sensitive query can be hidden for intercepting using <i>UrlMask</i>:\n    </Alert>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlookOkHttpInterceptor interceptor = new SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(new UrlMask(\"(name=)[^&]+(&*)\", \"$1<sensitive>$2\"))\n        .build();\\n\nOkHttpClient client = new OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build();\n      `,\n        kotlin: `\nval interceptor = SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(UrlMask(\"(name=)[^&]+(&*)\", \"$1<sensitive>$2\"))\n        .build()\\n\nval client = OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android\" markup={`\nWith above shown \\`UrlMask\\` intercepted request will have following URL stored:\n\\n\n\\`\\`\\`\nhttps://example.com/page?secret=<sensitive>&second=query\n\\`\\`\\`\n\\n\n### Sensitive headers\n\\n\nIntercepted headers can contain sensitive data, so they need to be filtered out by their name. This can be done using \\`sensitiveHeaderNameRegexps\\`, this list of sensitive header names contains these regular expressions by default:\n* \\`\".*csrf.*\"\\`\n* \\`\".*token.*\"\\`\n* \\`\".*auth.*\"\\`\n* \\`\".*key.*\"\\`\n* \\`\".*cookie.*\"\\`\n\\n\nYou can define your custom list of sensitive header name regular expressions:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew SmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(String headerRegex)\n        .build();\n      `,\n        kotlin: `\nSmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(headerRegex: String)\n        .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h1 {...{\n      \"id\": \"utility-methods\"\n    }}>{`Utility methods`}</h1>\n    <h2 {...{\n      \"id\": \"instal-referrer\"\n    }}>{`Instal referrer`}</h2>\n    <p>{`When your application is installed from the `}<strong parentName=\"p\">{`Google Play Store`}</strong>{` Smartlook SDK `}<strong parentName=\"p\">{`automatically`}</strong>{` tracks install referrer.`}</p>\n    <p>{`You can also set your custom referrer using:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setReferrer(String referrer, String source);\n      `,\n        kotlin: `\nSmartlook.setReferrer(referrer: String, source: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setReferrer({referrer: \"sample referrer\", source: \"sample source\"});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setReferrer(smartlookReferrer: SmartlookReferrer);\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setReferrer(String referrer, String source);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetReferrer(string referrer, string source);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.setReferrer(\"referrer\", \"source\");\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" visibleOn=\"android\" mdxType=\"Alert\">\nReferrer value and source of installation is stored per visitor and can be viewed in Dashboard.\n    </Alert>\n    <h2 {...{\n      \"id\": \"dashboard-session-url\"\n    }}>{`Dashboard session URL`}</h2>\n    <p>{`You can obtain URL leading to Smartlook Dashboard for currently recorded session:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.getDashboardSessionUrl(boolean withCurrentTimestamp);\n      `,\n        kotlin: `\nSmartlook.getDashboardSessionUrl(withCurrentTimestamp: Boolean)\n      `\n      },\n      cordova: {\n        javascript: `\n Smartlook.getDashboardSessionUrl({withCurrentTimestamp: true}, successCallback, ...);\\n\n function successCallback(dashboardSessionUrl) {\n  alert('Dashboard session URL: ' + dashboardSessionUrl);\n }\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.getDashboardSessionUrl(): Promise<string>\n      `\n      },\n      ios: {\n        swift: `\nclass func getDashboardSessionURL(withCurrentTimestamp withTimestamp: Bool) -> URL?\n`,\n        'objective-c': `\n+ (nullable NSURL *)getDashboardSessionURLWithCurrentTimestamp:(BOOL)withTimestamp;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.getDashboardSessionUrl(bool withCurrentTimestamp);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.GetDashboardSessionUrl(bool withCurrentTimestamp);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.getDashboardSessionUrl(withCurrentTimestamp);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`If `}<inlineCode parentName=\"p\">{`withCurrentTimestamp`}</inlineCode>{` is set to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` link will include information about current recording timestamp.\nThis will ensure that the player will start playing the session at the moment when `}<inlineCode parentName=\"p\">{`getDashboardSessionUrl`}</inlineCode>{` was called.`}</p>\n    <Alert kind=\"note\" mdxType=\"Alert\">\nThis URL can be opened only by someone who has access to your dashboard. This is <b>not a public shareable link</b>.\n    </Alert>\n    <h2 {...{\n      \"id\": \"dashboard-visitor-url\"\n    }}>{`Dashboard visitor URL`}</h2>\n    <p>{`You can obtain URL leading to Smartlook Dashboard for currently recorded visitor:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.getDashboardVisitorUrl();\n      `,\n        kotlin: `\nSmartlook.getDashboardVisitorUrl()\n      `\n      },\n      cordova: {\n        javascript: `\n Smartlook.getDashboardVisitorUrl(successCallback, ...);\\n\n function successCallback(dashboardVisitorUrl) {\n  alert('Dashboard visitor URL: ' + dashboardVisitorUrl);\n }\n      `\n      },\n      ionic: {\n        typecript: `\nsmartlook.getDashboardVisitorUrl(): Promise<string>\n      `\n      },\n      ios: {\n        swift: `\nclass func getDashboardVisitorURL() -> URL?`,\n        'objective-c': `\n+ (nullable NSURL *)getDashboardVisitorURL;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.getDashboardVisitorUrl();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.GetDashboardVisitorUrl();\n`\n      },\n      react: {\n        javascript: `\nSmartlook.getDashboardVisitorUrl();\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <Alert kind=\"note\" mdxType=\"Alert\">\nThis URL can be opened only by someone who has access to your dashboard. This is **not a public sharing link**.\n    </Alert>\n    <h1 {...{\n      \"id\": \"integrations\"\n    }}>{`Integrations`}</h1>\n    <h2 {...{\n      \"id\": \"manual-integration\"\n    }}>{`Manual integration`}</h2>\n    <MD visibleOn=\"android,cordova,ionic,flutter,unity,react\" markup={`\nYou can manually integrate Smartlook info various analytic frameworks using our \\`IntegrationListener\\`.\n\\n\nYou can register the listener like this:\n`} mdxType=\"MD\" />\n    <MD visibleOn=\"ios\" markup={`\nYou can register to dashboard URL change notifications to integrate them programmatically into other 3rd party analytics frameworks.\n\\n\nThe notifications are:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        AnalyticsTool.trackSession(dashboardSessionUrl);\n    }\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        AnalyticsTool.trackVisitor(dashboardSessionUrl);\n    }\n});\n      `,\n        kotlin: `\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n      AnalyticsTool.trackSession(dashboardSessionUrl)\n    }\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n      AnalyticsTool.trackVisitor(dashboardSessionUrl)\n    }\n})\n      `\n      },\n      cordova: {\n        javascript: `\n Smartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) { alert(\"Session: \" + dashboardSessionUrl); },\n  onVisitorReady: function (dashboardVisitorUrl) { alert(\"Visitor: \" + dashboardVisitorUrl); }\n});\n      `\n      },\n      ios: {\n        swift: `\npublic class let dashboardSessionURLChanged: NSNotification.Name\npublic class let dashboardVisitorURLChanged: NSNotification.Name\n`,\n        'objective-c': `\nNSNotificationName const SLDashboardSessionURLChangedNotification;\nNSNotificationName const SLDashboardVisitorURLChangedNotification;\n      `\n      },\n      flutter: {\n        dart: `\n    class CustomIntegrationListener implements IntegrationListener {\n  void onSessionReady(String dashboardSessionUrl) {\n    print(dashboardSessionUrl);\n  }\n\\n\n  void onVisitorReady(String dashboardVisitorUrl) {\n    print(dashboardVisitorUrl);\n  }\n}\n\\n\nSmartlook.registerIntegrationListener(new CustomIntegrationListener());\n`\n      },\n      unity: {\n        csharp: `\n    public class IntegrationListener : SmartlookUnity.IntegrationListener\n{\n    public override void onSessionReady(string dashboardSessionUrl)\n    {\n        Debug.Log(\"dashboardSessionUrl : \" + dashboardSessionUrl);\n    }\n\\n\n    public override void onVisitorReady(string dashboardVisitorUrl)\n    {\n        Debug.Log(\"dashboardVisitorUrl : \" + dashboardVisitorUrl);\n    }\n}\n\\n\nSmartlookUnity.Smartlook.RegisterIntegrationListener(new IntegrationListener());\n`\n      },\n      react: {\n        javascript: `\nSmartlook.registerIntegrationListener(\n    (visitor) => {\n      console.log(\"app visitor\", visitorUrl)\n    },\n    (dash) => {\n      console.log(\"app dash\", dashboardUrl)\n    }\n  );\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <MD visibleOn=\"android\" markup={`\nIf you want to uregister the listener simply call:\n`} mdxType=\"MD\" />\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterIntegrationListener();\n      `,\n        kotlin: `\nSmartlook.unregisterIntegrationListener()\n      `\n      },\n      cordova: {\n        javascript: `\n Smartlook.unregisterIntegrationListener();\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"automatic-integrations\"\n    }}>{`Automatic integrations`}</h2>\n    <p>{`Smartlook SDK automatic integrations into mopst popular frameworks are in progress.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}